/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 27.03.2025 12:28:22

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 36
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 72
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 280384;
#else
constexpr int kTensorArenaSize = 279360;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_FULLY_CONNECTED, OP_RESHAPE, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 72, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[7] = { 220, -418, -68, 129, -80, -93, 362, };
const TfArray<1, int> tensor_dimension3 = { 1, { 7 } };
const TfArray<1, float> quant3_scale = { 1, { 8.6286403529811651e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[7*72] = { 
  87, -52, 69, 48, -30, -2, 85, 78, 30, -14, 55, -19, 79, 7, 43, 47, 103, 102, 59, 21, 32, -45, 7, -5, 90, -20, -35, 116, -79, -95, 92, 19, -56, -83, -99, 102, 84, 18, -36, 53, -27, -124, -74, 34, 65, 60, 7, -57, 0, -66, 35, -19, -78, -25, -94, -16, 5, -87, -17, 74, -92, -4, -45, -82, -70, 7, 107, -47, -45, -71, -98, 100, 
  62, -96, 14, -1, 30, -38, 47, -82, 118, -8, -87, -54, -71, 67, 92, 28, -27, 14, 59, -61, 52, 41, -17, -14, -37, 4, 88, 35, 51, -46, 15, -25, -64, -20, 49, -57, -75, 83, 98, 3, 59, 32, 1, 121, -32, -43, 103, 26, 64, 60, 37, -71, 75, -23, 74, 21, 40, 5, 12, 30, -98, -74, -117, -122, -19, -88, -30, -41, 53, -67, -39, -74, 
  -21, -55, 101, 85, 39, -70, 65, 76, -77, 119, -111, -25, 20, -36, -3, -85, -20, -4, 94, -115, -31, 95, -91, -1, 17, -3, 64, -22, -96, 2, 16, 41, -13, -51, -14, -55, 66, -70, -26, 93, -20, 17, -25, -56, 95, -68, 12, 54, -78, 88, 19, -75, 71, -19, 70, 67, 103, 101, 25, -1, -33, -90, 80, -90, 100, 2, 100, 37, 45, 20, 60, -2, 
  56, 22, -32, 3, 2, -74, 25, -42, -122, 37, 29, -5, 14, -2, -88, 50, -67, 78, -53, 63, 31, 19, 92, -18, -33, -80, -62, -29, 53, -39, 50, 40, -74, 32, -51, -7, 72, 37, 106, 112, 97, -21, -46, -90, 85, 88, -98, 32, -106, 83, -69, 69, 57, -11, 15, -91, -69, 109, -45, 55, -73, 71, -119, -45, -101, 72, 68, -97, 67, 3, 61, -124, 
  -46, 60, -31, 98, 99, -91, -53, -52, -36, 99, 78, -6, -53, -30, -54, -50, -51, 34, 105, 20, -94, 44, -96, 9, -26, 79, -81, 12, -76, 94, -48, -70, -30, -34, -96, -115, -61, 41, -127, 62, -42, 24, 1, -68, 19, 67, -118, 67, -13, 41, 80, 72, 44, 33, -64, 94, -31, -54, -74, 90, 78, 89, -42, 0, -72, 25, -33, -113, -23, 68, -16, -23, 
  43, -52, -16, 70, -49, 82, 88, 38, -113, -73, 106, -30, -87, 22, -4, -110, -105, -7, 14, -39, 73, 89, -92, 8, 33, -74, 106, 76, 41, -36, -70, -23, -5, -38, -38, -60, 1, 127, 72, -37, 24, -1, 60, -24, 13, 51, 4, -91, -15, 113, 0, -118, 47, -80, -40, 57, 77, 29, 79, -33, -18, -104, -49, -127, -4, 122, -48, 71, 20, -17, -50, -16, 
  108, -31, -26, 30, -75, -58, -39, 6, 45, -87, 15, -122, -28, 6, 6, 80, 10, -28, 62, -79, -113, 120, 9, 80, 15, -71, -98, -83, -121, 9, -22, 29, -109, 19, -110, 44, -87, 59, 9, -62, -16, -88, 22, -75, 35, -28, -12, -98, 36, -118, 58, -96, 40, 118, 76, 92, 68, -18, -23, 52, 52, 44, 65, -50, 33, -95, 51, -75, -58, 72, 99, -82, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 7,72 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0025119283236563206, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[8] = { 188, 139, -268, -321, -274, 93, 66, 352, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<1, float> quant5_scale = { 1, { 2.3753242203383707e-05, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[8*1280] = { 
  7, 52, -34, -26, -12, 11, 9, 0, 54, 12, 59, -87, 6, -88, -21, -6, 46, 28, 15, -65, -14, 20, 56, -60, -21, -37, -14, -50, -66, -21, 31, -45, 49, 14, 65, 57, 10, 7, 38, 72, -55, 25, -7, 35, 3, 48, 45, 42, 24, -17, 19, 73, -1, -35, -18, 22, -26, -68, -24, -54, 50, -61, -42, -82, -15, -40, 73, -51, -29, 35, 56, -12, -71, -33, 15, 38, -17, 9, 38, -39, -28, 15, 46, 52, -46, -1, 91, -54, -5, 31, -43, -8, 69, 78, 54, -41, -51, -54, -19, 34, 6, 37, 15, -15, 29, 28, -43, 64, -9, 38, 41, 34, 69, -86, -58, 48, -16, 20, 7, 58, -20, -35, 25, 22, -32, 73, 24, -48, 50, 61, -65, 13, -42, -28, 56, 3, -59, -7, 69, 28, 57, -4, 44, 7, -63, 66, -25, -30, -30, -10, 16, -58, -37, -38, -32, 47, 12, 44, -49, -28, 79, 27, 12, -9, -49, 68, -14, -60, -78, -85, 68, 92, 57, -61, 74, -2, 25, -8, 36, 56, -27, -23, 71, -25, 43, 0, 61, 29, -16, 76, -20, 42, 0, 16, -18, -30, -3, -67, -56, -55, -31, -55, -49, -14, 64, -11, 75, 21, -33, -44, -26, 39, -31, -7, 52, 18, -44, 19, 44, 48, 62, -67, 7, -30, 22, 32, 41, 5, -21, 29, 37, 36, 74, -56, 41, 25, -45, 64, 21, -5, -48, 68, 49, 75, 49, 52, 43, -3, -67, 11, 25, 8, 45, 51, 4, 69, 15, -33, 29, -64, -2, 7, 1, 44, 49, 4, -3, -12, 45, 48, 56, -14, 24, -72, 9, -82, 101, 49, 44, 21, 48, 30, -48, 8, -28, 5, -55, -51, 56, 65, 14, -18, -72, 35, 55, 11, 31, 4, 45, 72, 70, 12, 43, 63, -59, -11, 5, 43, 7, 55, 52, -50, -46, 57, -68, -33, -10, 22, -14, -39, 35, 43, 18, -14, 11, 56, -58, -51, 64, -63, 12, -19, -4, -79, -3, -76, -4, 28, 8, 64, -32, 39, 45, 29, -37, 49, 46, 21, 84, -12, 56, -71, 23, 32, 58, 16, 50, -17, 6, -66, -15, -54, 15, 12, -86, 39, 94, -49, 4, -46, 28, -1, 19, -66, -16, 9, 4, -6, -57, -59, 23, 25, 18, 24, -61, -68, 24, -29, -62, -59, -44, 8, 53, -55, -37, -16, 38, 2, -36, -20, -29, -5, 45, -25, 27, 38, 68, 51, 39, -13, 24, -8, -21, -91, -43, -7, 8, 4, -3, -8, -52, 70, 38, 36, 3, -11, -68, -49, -31, -52, 34, -1, 16, 5, 5, 54, -28, -74, 14, -17, 43, 14, 44, 11, -39, 59, -59, -3, -2, 53, -14, -43, -21, 6, 3, 3, -62, 38, 77, 10, -63, -26, -27, 78, 19, 9, -34, 52, -35, -32, 13, 38, 0, -44, 2, -3, 3, -17, 24, 54, 28, 38, -66, -85, 9, -2, -56, 26, -55, 45, 2, -22, -26, -6, -70, -33, 19, -106, -46, -78, 12, 57, 62, 41, 39, -36, 32, -33, 53, -32, -47, -8, 28, -13, 13, 62, -23, -25, 59, 34, -31, -37, 57, -47, -4, 2, 15, -13, 58, -36, 4, -6, 46, 43, 48, -68, 65, -57, -25, 117, 33, -9, -39, -8, -25, -44, 2, -66, -89, -14, -74, -37, -54, -23, -54, 63, -4, -15, 15, 80, 26, -20, -78, 47, 39, 18, 23, 46, -8, -63, -61, 25, -33, 12, -11, 27, -17, -89, 3, 32, -4, -13, -7, -36, 44, 30, -16, -68, -12, 38, 21, 47, -15, -13, -65, 37, -72, -7, -30, 5, -34, 71, 11, 34, 14, 62, -17, -36, 52, -20, -4, -2, 21, -34, 14, 76, 69, 11, -46, -33, -57, -9, 27, -59, 14, 48, 26, 30, -20, 54, 36, -54, -31, 23, 16, 45, -28, -44, 17, 94, 40, 35, -12, -46, 56, -10, -59, 67, -17, 15, 64, 42, -37, 5, 6, -32, 52, -50, 66, 25, 20, 44, 3, 29, -25, -44, 46, -18, -40, -59, 38, -16, -48, 9, 34, 8, 24, 37, 72, -16, -44, 20, -71, 67, -16, 23, -17, 41, 29, -63, -45, 77, -32, -45, -25, -64, 55, -4, 21, -4, 38, 38, 46, -6, -98, 28, -13, -10, 1, 0, -30, 73, 22, 38, 31, 10, 30, -14, -23, 3, -25, -23, 55, 85, 84, -19, 2, 98, 55, -76, 25, 17, 1, 48, -33, 87, 58, -70, -20, 56, -28, 78, -22, 8, 33, -81, -25, -46, -53, -63, 48, 2, -32, -52, 48, 16, -50, -64, 9, 22, -50, -1, -26, 20, 45, -51, 10, 91, 1, -5, 52, -17, -45, 6, -55, -45, 14, -29, 59, -25, 27, 45, 25, 10, -41, -62, -43, 20, 2, -24, 11, 80, 26, 8, 17, 19, -49, -20, -36, 36, -63, 32, 30, -54, -35, -16, 39, 0, -20, 5, 31, -21, -38, 27, 50, 20, -39, -9, 27, -3, 61, 24, -31, 24, -31, -15, -43, 39, 75, -79, 24, 48, -11, 47, -39, -111, -42, 44, -16, -49, 29, -9, 79, 60, -40, 54, -60, 69, -29, -42, -12, 37, -64, -35, 44, -46, -5, -27, -96, -59, 38, -5, 103, -45, -10, 23, -13, -61, 35, -39, 63, -4, 48, 35, 23, 45, 17, -3, -38, -25, 10, 40, 18, -59, -21, -29, -32, -49, -18, -39, 46, 21, -62, -15, 69, 34, -56, -13, -25, 38, -65, 53, -6, 13, 16, 33, 53, 44, 19, 65, 53, 42, -78, -65, 22, -36, -10, 31, -9, -50, 23, -12, -52, -40, 64, 35, -39, -3, 50, -11, -5, 35, -29, 58, 15, 28, 55, 7, 21, 3, -33, 45, 31, -42, 60, -64, -44, 41, 22, 13, -73, -9, 88, -43, 13, 8, 37, -1, -71, -9, 26, -62, 68, -3, -53, 25, -41, 1, -31, 7, -79, -56, 21, 53, 41, -78, -21, 10, 28, 47, 24, -6, -35, -46, -1, 34, -11, -54, -49, -2, -40, 22, -70, 45, 64, -11, -27, 69, -110, -33, -10, 78, 53, 16, -19, -51, 18, -51, -58, -35, 32, -30, 41, -26, -44, 50, -13, 35, -71, 10, 31, -19, 78, 18, -33, 38, -52, -16, 16, 19, 21, 9, 33, -31, 76, 35, 61, 38, -9, -11, -22, 59, -35, -23, -47, 34, 65, 0, 29, 55, 54, -22, 9, -110, 42, -61, 63, -21, 51, 14, -39, 71, 8, 19, 51, -24, -31, 13, -103, 24, -56, -3, 23, -8, -35, 34, -10, 44, 61, 45, 53, -30, 45, -31, 66, -16, -3, -19, -7, 32, -73, -72, 2, -43, 23, -13, -49, 34, -64, 6, -40, -3, -17, 47, 25, -1, 47, -43, -7, -47, -58, -22, 39, -51, -66, -30, -1, -9, 55, -58, -83, 60, -54, -10, -33, -44, 18, -4, -57, -36, -55, -51, -14, 18, -20, 5, -51, 10, -1, 29, -44, -48, 1, -28, 9, 48, 35, -59, 40, -53, -69, 47, -20, 75, -10, 24, -51, 60, -29, -34, -38, 44, -30, -60, -60, -52, 31, 68, 51, 34, 19, 54, -61, 42, -31, -43, 60, -14, -22, 32, 49, 65, 7, -31, -51, 15, -29, -47, 72, 25, 31, -50, -38, 10, -70, 6, 11, 5, -18, 22, 64, 21, -15, -52, 15, -24, 33, 33, 13, 26, -11, -54, -5, 59, 51, 28, -33, 10, 7, -54, -35, -45, -18, -15, -46, 5, 15, 67, -23, 51, -42, -61, 11, 18, -48, -9, 7, -53, 46, 12, -33, -37, 2, 28, -70, -7, -73, -7, 8, -63, -71, -32, 31, 14, 34, 68, -77, -71, 2, 66, 28, 11, 11, 14, 25, -16, -18, 1, -50, 11, 44, 33, -52, 28, -56, 55, -6, 46, -3, -10, 
  -45, -1, 24, -41, 33, 3, -49, -13, -37, 75, 19, -41, -5, 5, 19, -13, 3, 64, -28, 22, 32, -66, -35, -24, 11, -20, -46, -46, 14, -80, -70, 43, 29, 10, 19, -9, -61, 71, -70, -34, -39, 10, 12, -63, 49, 22, 35, 26, 37, -11, 39, 68, -9, -101, 43, 19, 7, -53, -71, -37, 21, 11, 26, -4, 102, -17, 11, -33, -32, -3, 37, 35, 33, -68, 40, 11, 43, -54, 86, -73, 6, 14, -55, 42, -32, 65, 1, 53, -17, -57, 53, -37, 20, -63, -45, -14, -8, 62, 13, 10, 6, 13, 30, -15, -10, -58, -54, -45, 67, 22, -21, 20, -42, 17, 73, 68, 2, -36, -30, -69, 46, -17, -25, 28, -56, 92, 66, 77, 28, 19, -3, 39, 27, -3, 6, -68, -31, 33, 28, 24, -21, -15, 0, 29, 35, -54, 6, 66, 23, 43, 55, -29, -30, -43, -43, -3, -42, -11, -2, -6, -43, 8, -68, -75, 8, -15, -53, 54, -26, 56, 2, -82, -62, -65, -25, 12, -20, 56, -19, 31, 20, 10, -26, 54, -8, -52, -5, 47, -42, 40, -58, 9, 2, 31, 61, -108, -53, 15, 73, 85, 79, -50, 13, -39, 39, 9, 53, -13, 30, 52, -11, 62, 48, -20, 34, -15, -37, -53, 67, -20, -21, 54, -61, 35, 8, -8, -88, -15, 70, -26, 37, 34, 33, -1, -21, -68, 22, 11, -53, 44, -10, -63, 32, 57, 63, 34, -47, 4, 7, 45, 56, 39, -57, -47, 55, 23, -18, -42, -35, -1, -1, -59, -24, 45, 41, 54, 38, 12, 29, 34, -54, -20, 77, -34, -46, -38, 42, 40, 14, 16, 12, 29, 68, -51, 6, -46, 63, -53, -76, -34, 1, 14, 58, 66, -49, -47, -3, -34, -65, -5, 6, -52, 4, 6, 59, -50, 42, 13, -31, -84, -51, 43, -32, -33, 24, 0, 25, 73, -19, 28, -62, 11, -13, 34, 21, 17, -6, 39, -71, 55, -52, -43, -41, -23, -37, 34, 17, -10, -87, -33, 93, -38, 52, -19, -47, 20, 65, -59, -20, -22, -39, -69, 33, 78, 4, -13, 68, 20, 55, -14, 52, -27, -48, 49, 21, 67, -115, 9, 67, 72, -3, -82, 107, 5, 63, -14, 16, 24, -6, -24, 24, -18, -8, -64, -22, 12, 26, -15, 26, -64, -68, 52, 70, -13, -25, -17, 13, 55, -58, -49, 2, -33, -4, 39, 87, 65, -18, 18, -55, -37, -7, 8, 30, -70, 10, 16, 56, -84, -31, -17, -31, -16, -36, -17, 60, 62, -9, 24, -1, -49, 7, -40, 21, -20, 0, 37, 65, 17, 16, 15, -27, 34, -56, -39, 54, 64, -19, 87, -27, 9, 67, -68, 41, -65, -11, 21, -17, -9, -16, 29, 57, -1, 47, 5, -27, -42, -79, -73, 29, -52, 27, -29, 39, 64, 74, -31, 0, -42, -12, -36, -82, 36, 3, -8, -105, 26, -12, 8, 29, -6, 48, -57, 32, 31, 12, -60, 33, 32, 41, -61, 65, -36, 107, 53, -20, 13, 7, 23, 5, 48, -59, -13, -11, 24, 9, 68, -17, 1, -1, 44, 27, -18, 39, 8, -10, -8, 22, -6, 48, -1, -74, -2, 41, 52, -13, -53, -36, 48, -9, 6, 33, -72, 6, -64, -5, 31, -50, 48, -36, 19, -85, -85, 83, 18, 78, -3, 17, 19, -90, 25, -76, -34, 81, -36, -54, -38, 15, 35, -41, -47, -33, 72, -18, 60, 35, 78, -33, -2, 16, -47, 50, 5, -8, 24, 75, -31, -29, 28, -3, -42, 22, -57, -21, 61, -30, 64, -5, -31, -26, 26, -6, 41, 56, 53, 19, -4, 64, -49, 52, -36, -69, 38, -14, -33, 30, -38, 32, -20, 31, 25, 23, 50, -8, 37, 39, 14, 57, -20, -13, -70, -3, -31, -30, -4, -38, -17, 28, 39, -65, -64, -17, -66, -54, 24, -56, 43, -45, 16, 20, -40, -35, -63, -36, -11, 8, -45, -64, 7, 34, -14, 5, -42, -8, -9, 29, 40, -39, 22, -34, 35, 9, -64, -10, 11, -10, -26, 33, -49, -49, -24, -55, -74, -5, -42, 6, 23, -6, 8, -46, 91, -39, -85, 4, -18, 50, 0, 87, 84, 34, -36, 18, 57, -37, -44, 9, -79, -7, 44, 64, -41, -3, 35, 32, 31, 49, -66, -77, 62, 51, 6, -25, -22, 20, 38, 3, 42, -54, -61, -72, 31, -23, -59, -8, 38, -35, -4, 50, -29, 8, -9, 41, 17, -53, -34, 52, -35, 55, -39, -37, 20, 14, 64, -61, -30, -44, -48, -2, 120, -4, -70, 15, 35, -37, 27, -1, 41, -68, 41, -77, -8, 16, -101, -15, -45, -38, 61, -49, 62, -62, 16, -14, -61, -6, -58, 19, 40, 68, -18, -63, 53, -2, -55, -88, -29, -53, -60, -50, 45, -48, 56, 56, 16, 33, 32, 10, -34, -19, -15, 57, -11, 22, -25, -12, -15, -4, -17, -46, -9, 1, -53, 64, -18, -21, 18, -27, -30, 59, 6, 0, -5, -82, -66, 62, 85, -80, 30, -20, -30, -41, -3, 28, 49, 10, -17, 57, -74, 8, -62, -31, 23, 19, -11, -43, 64, -41, -31, 5, -21, 58, 3, 28, 41, -39, 36, 22, 51, -4, 50, 43, -16, -44, -52, 59, -19, -61, 7, 48, 17, 24, 33, -77, 17, 37, 20, 82, -62, 20, -78, -9, -27, -36, 66, -25, 34, 11, 15, -6, -25, -35, -70, -56, -40, -35, 26, 37, 80, -26, 55, 5, -8, 42, 23, 45, -31, -47, -17, -31, -75, -14, 1, 116, 53, 54, -8, 61, 40, -45, 41, 75, 14, -61, -16, 67, -67, 92, 25, 35, -53, -3, -56, 32, -28, -84, 32, 9, 40, 26, 23, -42, -48, -33, -62, 18, 37, 0, 28, 48, -40, -45, 64, 42, 37, 20, 67, 57, 46, -47, 4, 53, 1, -6, -37, 59, -4, -52, -34, -59, 84, 69, 47, 58, -47, 2, -18, -37, -44, -4, 45, 69, -5, -74, 69, -30, -37, -85, 18, 67, 33, -34, -55, 20, -62, 16, 20, -34, -25, 52, -32, -41, 26, 64, 41, -38, -56, 7, 24, 24, 45, -55, -57, -36, -14, -7, -54, -3, -4, -13, -22, 40, 37, -61, -56, -46, -68, -20, 20, -44, 3, -78, 20, 5, -37, -4, 17, 68, -38, -69, 73, -34, -59, 42, -24, 40, -28, 9, 72, -23, 8, -18, 15, 45, -62, -30, 35, 19, 22, 44, 17, -48, 93, -60, -92, 57, -18, 46, 41, -28, 81, 47, 60, 22, 49, 18, -17, -26, -55, 7, -58, 25, 37, 35, -50, 14, -50, -49, -59, -32, -1, -44, 64, 58, 15, -55, 47, 7, 63, 16, -32, 40, -36, 24, -14, -28, -82, 58, -43, -30, 12, 47, 37, 10, 29, -20, -27, -32, 33, 36, 73, -77, -14, -23, -67, -108, -70, -35, -44, 36, 56, -79, -42, -57, -50, -27, 13, 46, -17, 19, 53, -8, 64, 49, -22, 14, -52, 41, 17, -27, -1, -30, 43, 77, 3, -110, -43, 12, 46, 10, -39, -45, 34, -8, 5, -14, 55, -41, -55, -75, -18, 31, -64, -51, 8, 4, -6, 59, 34, 39, 1, 17, -95, -5, -23, 22, 71, 23, -37, 48, 21, 39, 2, 48, 72, 40, -2, -28, -24, 50, -25, 64, 28, -70, -66, 47, -21, 30, -5, -16, 83, -11, 22, -32, 80, -17, -1, -34, -52, 11, 17, -9, -62, -72, 36, -25, 75, 14, -29, -57, 63, 29, 49, -63, 23, -29, -4, -20, 15, 37, -35, -52, 40, 18, 28, -21, -11, 9, 29, 27, 22, 28, 48, -67, 2, 38, -54, -18, -19, 3, 26, -48, -52, -40, -20, -42, -48, 18, -34, -23, 46, 16, 61, 
  17, -47, -58, 37, 23, 39, 52, -39, -40, 47, 40, 2, 52, -53, -46, -27, -27, -5, -12, -43, -5, 67, -62, 0, 9, 53, -59, -18, 33, 18, 3, 4, -41, 31, -20, -100, 40, -4, 69, -71, -14, 16, -60, 72, 77, -29, -23, 44, 49, 36, -38, -40, -21, 79, 14, -27, 31, -19, 5, 20, -75, 41, -33, -11, -37, -46, -11, 48, -41, 61, -38, 12, 10, -51, 20, -49, 42, -20, -7, -28, -50, -18, 49, 14, -5, 15, -49, 54, 62, 18, -5, 71, 23, -58, -54, -3, -19, 22, 14, 32, 30, -9, -40, 9, 73, -60, -28, -10, 16, -49, 65, 34, -29, -31, 20, 8, 49, 41, 30, -16, 43, -62, -19, -70, -6, -41, 16, -3, -40, 111, 25, -19, -16, 37, -40, -22, -63, 73, -67, -54, -84, 56, -78, -54, -44, -22, -40, -38, 35, 19, 22, 34, 57, -15, -17, -41, -18, 3, 48, 68, -79, -25, -61, -50, -52, 50, 20, 45, 14, -33, -33, 14, 6, -22, -6, 9, -45, -78, -81, -67, 64, -22, -8, 42, 24, -22, -22, -19, -29, -57, -15, 67, 54, -3, 34, -43, 29, -17, -8, 12, 46, 20, 61, 14, -44, -13, 4, 46, -65, 27, -64, 40, 43, -7, 31, -36, -8, -42, -7, -13, 8, 1, 39, -57, -41, -73, -40, 47, 80, 40, 53, 72, -10, 8, -7, 34, -18, -47, -53, 5, 11, 1, 43, -6, 40, 51, 64, -48, -41, 50, 6, 56, 41, 26, 69, -45, 63, 49, -54, 40, 9, -29, -79, 18, 20, -47, -30, -32, 57, -14, 40, 32, -69, -17, 36, -39, 22, -2, -39, 35, 9, -26, -32, 21, -55, -49, 91, 63, -1, 24, -52, 44, -69, 34, -51, -66, 14, -61, -78, -73, 12, 62, -16, -6, -40, -4, 16, 28, -13, 48, 44, -63, 2, 40, 0, -59, 10, 19, -24, 13, 37, 31, -31, 5, -39, -3, 10, 42, -5, 32, -13, 55, -33, 62, -40, -29, 4, -106, 64, 72, -40, 13, -20, -18, -19, 45, 34, -22, 15, -11, 22, 40, 41, 23, -66, -47, 58, 15, -33, 50, -31, -14, -78, 2, 53, -23, 38, 5, -23, -34, 64, -32, -11, -58, -33, 68, 3, -46, 20, 59, -37, -23, -39, 49, -30, 15, 64, -59, 95, 22, 43, -75, -49, -20, 21, 67, 1, -5, -72, -19, -65, -67, -28, -23, 14, -60, -10, -1, -65, -74, 22, -71, -24, -2, 2, -60, 73, -75, -65, 51, 39, -49, -4, 43, 50, -94, -63, 18, -25, 46, -25, 25, -30, 15, -20, -33, -20, 58, 33, -22, -37, 51, 27, 34, 20, -62, -65, 6, -10, 59, -65, 17, 56, -28, -44, 51, 42, -46, 48, 18, 60, 7, 54, 0, -38, 4, -27, 25, 91, -4, -86, 49, -4, 41, -73, 28, -33, 3, 9, 28, -33, -3, -27, 96, 43, -66, -53, -42, -87, 9, 60, -23, -77, 77, -89, 6, -3, -10, 16, -68, -40, -13, 16, -33, 21, -52, -26, -33, 53, 6, 16, -4, -94, 32, 31, 43, -62, -63, 49, -90, -19, -72, 62, -66, -52, -14, 22, 52, -34, 81, -15, -10, 32, 50, -42, -71, -56, 16, 9, -1, 58, 31, 24, 87, -40, 81, 25, -20, 44, -7, 63, 46, 57, 2, -16, 31, 60, 53, 50, 24, -66, -14, 8, 47, -28, -57, 29, -51, 2, 39, -49, 49, 33, -85, 53, -54, 6, 90, 50, -77, 28, -48, -40, -6, 6, -18, 31, 14, 51, -5, -8, 1, 65, -19, -24, -18, -82, -45, 29, -30, -2, -38, -43, -6, 15, -49, 48, -49, -24, 21, -50, -76, 52, 34, -47, 9, 44, 62, 17, 37, 63, 26, 24, -83, 51, 38, 63, -54, 49, 27, 11, 77, -16, 34, 49, 46, 18, -8, -76, -39, -51, 40, 31, 5, 27, 55, 49, 43, 45, -51, 42, -30, 53, -11, -25, -22, 30, -27, -62, -48, -12, 58, 13, 72, -9, 34, 40, -27, 46, 29, 22, -40, 3, 58, -38, 38, -18, -25, 62, -16, 34, 50, 41, 15, -44, 51, -32, 34, -71, 70, 53, -63, -20, -61, -29, 14, 36, -79, -35, -9, 7, -47, -58, 54, -25, 60, 22, 49, -51, 5, -31, 76, -45, 70, 51, 43, -58, -40, -11, 31, 64, -32, -3, -47, 13, -6, -22, -62, -56, -28, -41, -37, 59, 48, 47, 47, 2, 65, 12, -29, -35, 44, -20, -11, 2, -61, 53, -78, -48, -32, 7, -94, 33, 37, -38, 28, -17, -8, -7, -1, -4, -17, -24, -66, -34, 32, -63, -47, -1, -19, 51, 52, 30, -67, -2, 11, -10, 9, -1, -81, 10, -6, 8, 40, 80, 54, 8, -18, 10, -36, 6, -18, -45, 56, 11, -43, 35, -26, 1, -1, 46, -25, 4, -45, -42, -12, -14, 30, 43, -44, 1, -16, 12, -16, 75, 34, 1, -17, -4, 41, 39, 28, -3, 23, 41, -52, 65, -83, -24, -8, 39, 46, -30, -1, -27, 6, -9, -52, -13, -2, 39, -1, -43, -26, -45, -29, 12, 75, 49, 76, 83, 56, 50, -34, -11, -9, 3, -64, -13, 61, -75, -29, -77, -55, -71, -16, 29, 79, 40, -19, -5, 54, 23, -23, 1, -15, -76, 55, -20, -30, -4, 111, 14, 7, -19, 44, -9, 5, -65, 54, -6, -29, 27, 78, 36, 47, -47, 13, 12, -70, 32, 19, 21, -65, -36, 26, -52, -6, -1, 9, 5, 0, 37, 3, 60, -19, -58, -46, 41, 12, 4, -11, 17, 46, 9, -35, -17, 17, 50, 22, 76, -3, -12, -60, -40, 56, -38, -57, -63, 24, -62, 13, -14, -53, -35, 50, 65, -9, 34, 6, 70, -50, -62, -14, 41, -4, -21, 22, 22, -40, -24, -58, -65, 5, -18, -9, 87, 37, -73, -45, 30, 45, -53, 24, 37, 49, -7, -63, -21, 3, -60, 88, 51, 72, -31, 8, 57, -10, -74, 53, 18, 59, -6, 46, -93, 1, -41, -81, -27, 83, 57, 52, 22, 51, -35, -32, -23, -73, 34, -15, 32, -23, 0, 21, -40, 12, 36, 4, -4, 23, -22, -35, -8, 68, 10, -23, -8, 38, -19, -63, 18, -72, 39, 37, 35, -55, -41, -13, 1, 42, -58, -23, 51, -77, 19, 43, -59, 0, 39, -63, 4, 24, -81, -78, -52, -1, 9, 27, 39, -30, 68, 22, -42, -105, 9, 17, 0, -4, 40, -99, -17, 77, -45, 19, -17, 19, -16, 65, 42, -13, 17, 0, 32, 45, 38, -30, -66, -42, 74, -124, -69, -44, -39, 70, -83, 39, 1, 7, 82, 76, 75, -41, 60, -69, 14, -44, 63, 3, 37, -41, -51, 12, -76, -49, -20, -30, -3, -1, -4, 40, 25, 89, -45, -3, 12, -21, -22, -52, -9, 0, 3, 43, -11, -37, -71, 24, -37, 38, -32, -53, 9, 5, 50, 25, -78, 44, -28, -38, -8, 23, -15, -1, 50, 16, -19, -7, -41, -14, -47, 38, 54, 76, -26, 40, 23, 41, -50, 6, -46, 31, 43, 37, -8, 48, -85, 22, -50, -17, -32, -61, -29, -42, 37, -18, 86, -18, -24, 50, 19, 37, 74, 37, 2, 19, 72, -78, 34, 17, -48, -33, 26, -76, -15, -6, -14, 26, 38, -43, 16, -5, -15, -50, -26, 55, -90, -27, -31, -12, -68, 21, -49, -50, 33, 18, -42, -55, 46, 54, -67, 29, 56, -44, 0, -31, -74, -8, 23, 28, 56, 30, 22, 21, -62, 27, -20, 33, 21, 25, 51, 17, -73, 18, -59, 49, 0, 49, 19, -10, 37, 39, -54, 27, 20, -32, 36, 29, 62, -35, -47, -40, -41, 26, -25, 3, -34, 6, 44, 89, -40, -16, 
  63, 50, 18, 11, -1, 13, 6, -36, 34, 14, 34, -61, -3, 63, -12, -81, -68, 54, 33, -69, 16, 53, -38, -92, -54, 58, 18, -34, 8, 21, 15, 3, 66, 56, 30, 11, 15, 14, -59, 53, 30, -76, 24, -23, 0, 49, 30, -71, 47, -4, -56, 7, 64, -69, 14, 18, 28, 10, -25, 26, -21, -6, 38, -25, 40, -14, 59, 23, 48, -38, -83, -2, -78, 56, 67, 6, -2, 9, -16, -37, 49, 5, -5, -57, -51, 68, 58, 22, -84, 38, -5, -30, -76, -104, -48, -22, 13, -68, 42, -54, -92, -77, -27, 31, -58, -12, 18, -53, 48, 25, -48, -11, 10, 8, -82, 9, -58, 5, -56, 7, 20, 6, -1, -11, -9, -43, 8, -1, -18, -53, 54, 41, -54, -51, -65, 49, -18, 37, 44, -50, 2, 6, 28, -42, -26, -83, 23, -62, -31, 2, -52, -66, 18, -41, -2, -83, 56, -28, -45, 51, -27, 16, 32, -39, -52, 58, -82, 23, -61, -67, -52, -4, -10, -14, -4, -14, 50, -42, -58, 24, -3, -57, -5, -6, -52, -62, 59, 14, -50, -45, -94, 51, 4, 52, 1, 63, -31, 39, 7, 20, 14, 45, -32, 44, -12, 23, 76, -41, 84, -31, -29, -59, 8, -64, -32, -49, 28, 24, -24, -34, -41, -13, -13, 13, -50, -80, 18, 41, -101, -48, 25, -68, -66, -5, 16, -35, -33, -58, 24, -28, -68, -55, 30, -35, 38, 3, -56, -54, -56, 81, 73, -67, 23, 8, -19, 43, 57, -17, -28, 49, 27, -6, -18, -26, -46, -30, 7, -91, -36, 33, -23, 96, -22, 43, -21, 11, -78, 16, 46, 1, 16, -101, 6, -60, 63, -30, -27, -11, 10, -3, -20, 52, -67, 44, -27, -12, 58, -57, 16, -46, -29, 28, -91, -29, 9, -32, -22, 47, 50, 30, -34, -27, 59, -46, -12, 24, -36, 12, 41, 41, -61, -63, 39, 19, -95, -32, -78, -13, -10, -29, -37, 65, 32, -44, 41, -49, 1, 27, -35, -33, 36, -22, -3, -20, -51, 26, -2, 8, -101, -3, -31, 60, -53, -61, 27, -13, -6, -9, -5, 12, -6, 11, -5, 17, -111, -42, 1, -40, 51, -45, -11, 19, -92, -20, 81, 21, -102, -23, 63, 36, 29, -42, -18, 31, -60, -54, 39, -66, 17, -4, -42, -13, -20, 38, -46, 52, -59, -66, 7, -40, 11, 7, 13, -101, 10, 39, -8, 26, 5, 5, 81, -37, 31, -26, 18, -23, 26, -71, -43, -5, 74, 83, 14, -13, 37, 25, 61, 88, 7, 45, -15, -3, 8, 14, 17, -43, 61, -6, 20, -39, -15, 29, -43, 76, -38, 37, -66, -80, 15, -6, 29, 24, -18, 2, 38, 48, 19, -84, 2, 87, -10, 19, 53, 35, 40, -48, -42, 52, 15, -24, -37, -10, 41, -6, 4, 32, 32, -5, -7, -24, -91, 51, 23, 22, -58, 50, 24, 2, 9, -10, -68, -34, -60, 43, -58, -74, 58, -68, 56, -90, 33, 47, -13, 73, 6, -43, 31, 20, 45, -37, 19, -58, -5, -54, -2, 35, 30, 10, -4, -32, 60, 23, -4, -26, -30, 22, -47, -78, -52, 20, -24, -43, 13, -105, -58, -94, -62, -65, 53, -90, -43, -6, 37, 16, -12, -23, 79, -8, -24, 12, 17, 12, -93, 65, -54, -6, -66, -11, -19, 36, 42, -2, -47, 12, 97, -50, 40, -86, 27, 14, -83, 27, -49, -40, 0, -8, -55, -60, -73, 35, 34, 6, -3, -15, 61, -68, 59, -25, -34, 51, 2, -6, -40, 22, -25, -64, 1, -67, -36, -33, 31, 25, -48, 6, 20, -33, -78, 48, -108, 0, 32, -41, 75, 27, 31, 12, -34, -50, -100, -9, -1, -56, -41, -38, 34, 21, -2, -95, -5, -29, -44, 3, -21, -51, -23, -16, -66, 76, -51, 37, 2, -38, -4, -33, 39, 13, -13, 11, -36, -34, 19, -10, 37, 27, 47, 10, 59, 15, -118, -75, 14, -14, 16, 15, -22, 30, -20, 51, 42, -63, -53, -20, 51, 17, 26, 35, -23, 31, 29, 31, -53, 61, -31, -74, 32, 29, -50, 40, -25, -37, -6, 57, -33, 27, 10, 33, -16, 5, -52, -13, 42, 36, 20, 47, 27, -30, 14, 36, 69, -33, -72, 1, -12, 22, -8, -80, -12, -22, -71, -70, -26, 98, -27, 24, -12, -14, -107, 9, -25, 14, -21, -77, 67, 76, 25, -25, -98, 30, -37, -16, -125, 33, 12, 10, -71, -63, -11, -49, -43, 0, 67, -13, 41, 33, 15, -58, -8, -43, 33, -42, -27, 87, 42, 15, 59, 59, 30, 32, 15, 54, 22, -7, 56, 44, -64, -31, 54, 21, -1, 23, 77, 27, 29, 9, 25, -4, 36, -97, 11, -13, -76, 52, 17, -25, 6, -68, 55, 25, 83, -23, -81, 22, -13, 49, 82, -31, -18, 17, 56, -65, 45, -45, 42, -28, 44, -41, 13, 97, -8, -1, 12, -4, 0, 82, 70, 13, -51, 83, 70, -50, -12, 26, -96, -14, 28, -69, -1, 43, -1, 13, 46, 53, 44, -39, -75, -28, 1, -25, 39, -49, 14, -73, 49, 21, 13, -38, -34, 47, -109, 10, -45, 34, 79, -74, 45, 60, 68, -55, -20, 34, -39, 22, -10, 54, 55, 30, -65, 16, -41, 15, 28, 6, -22, 36, -3, -35, 24, 49, 36, 61, -68, -87, -55, 38, -52, -57, -2, 6, -53, -11, -16, 12, 5, 4, 0, -15, 43, 49, 26, -21, -42, -13, 29, 71, -51, -40, -10, -87, -12, 5, -68, -29, -19, -75, -64, 23, 50, -48, -64, -27, 10, 73, -60, -32, 46, 1, -55, -23, -24, -39, 64, -53, 21, 44, -32, 64, -95, -66, 6, -55, 18, -18, 55, 61, -95, -50, -20, -59, -32, 61, 2, -15, -96, -14, 79, -21, 50, 8, 70, 12, -15, 29, -38, -37, 7, -23, -32, 5, -30, -7, 27, -26, -29, 4, -3, -13, -64, -22, 40, 40, -49, -3, -52, -37, -73, 60, 53, -9, 15, -66, -37, -33, 27, -13, 80, 29, 13, -52, -54, -91, -1, 37, 73, 52, 19, -59, 4, 79, 34, -28, -2, 20, 50, 21, 55, 83, -75, -23, 42, 29, -2, -44, -60, -24, -60, -119, -31, -45, -1, 10, -16, 27, 85, 33, -25, 70, -14, 4, -72, 26, 6, -20, 63, 34, 25, 9, -25, 4, 82, -35, 48, 32, 35, -44, -20, -26, -57, 11, 75, 45, -47, 22, 55, -33, -61, -67, 28, -82, 12, -47, -30, -69, -60, 33, 23, -65, 74, 57, 76, 0, 46, -5, 5, 49, -79, -18, -11, -12, 42, 13, 35, 13, 39, 58, 33, -18, -49, 19, 22, 7, -41, -53, -18, -4, -18, 73, -17, -59, 40, 8, -9, -8, 19, -58, 20, -37, 5, 23, 14, 52, 42, 68, 17, 21, -41, -20, -82, 20, -48, -11, -20, -21, -12, -63, 77, 50, 31, -54, 5, 39, 15, 31, -2, -60, -9, -20, 17, 15, -35, -85, 39, 37, -11, 41, -81, 46, -31, 78, -117, 38, -37, -37, -42, -76, -54, 30, -14, 49, 21, 51, 11, -74, 40, -34, -5, 22, -22, -26, -36, -38, -42, -39, 23, 39, 69, -47, -63, 59, 3, 60, -17, -6, -14, 18, -20, -37, -35, -42, 1, -4, 35, 3, -32, -54, 51, -6, -44, -54, 41, -50, -51, -20, 32, 39, -11, -34, 41, -53, -45, 6, 60, -56, 58, -22, 3, 52, -57, 11, 17, 15, 53, 56, -78, -16, -42, -21, -65, -44, -66, 90, -5, 43, -11, -15, 4, -69, -43, 45, -76, -72, 12, 20, 48, 17, -33, 31, 80, 14, 3, 61, -6, -63, 30, -58, 19, 1, -9, -27, -1, 71, 
  47, -3, 0, 50, 59, 52, 46, -46, 3, -17, 38, 54, 48, 6, 25, 24, 5, 49, -41, -81, -24, 23, 53, -51, 11, 5, 5, -47, -12, -1, 30, -32, 44, -64, -22, -43, 33, 42, -22, -53, -18, -13, -56, 7, 6, 4, 0, -2, 13, -10, -12, -70, -16, -6, 54, -50, -5, 27, 6, -6, -77, -81, -58, 71, -20, -69, -46, 24, 10, -32, -21, 64, -30, -21, -28, -47, -15, -69, -32, 30, 46, 17, 8, -5, -49, -19, -9, -9, 28, 14, -37, -91, -7, 41, -52, -35, -18, -43, 51, -51, -13, -42, -30, 30, 24, 58, -28, -37, -39, -49, 29, -73, -51, 54, 8, -31, 18, -13, 10, -47, -57, -4, -27, 28, -31, 62, 68, -23, 36, -26, 63, -70, 44, -61, 6, 10, -21, -31, -24, 45, -73, 3, 35, 28, -27, -47, 11, 6, 0, -81, -19, -86, -58, -14, -23, -37, 22, 11, -69, 22, -50, 70, -22, 50, -33, 21, -17, 38, -41, -68, -32, -65, -50, -24, -61, 10, 27, 20, -26, -90, 72, -56, -57, -12, -2, -35, -37, 24, 0, 39, 43, 21, 1, -23, 26, -38, -27, -57, -77, -32, -14, -53, -58, -42, -56, 80, 7, 11, -70, 26, 32, -72, 19, 17, 32, -4, -39, -53, 0, 15, 23, 53, -19, 15, 22, -38, 35, 59, -47, -62, 20, -28, -6, 24, 49, 43, 11, 25, 39, 40, -34, 41, 72, 19, -59, 39, -52, -43, -20, 14, -44, -88, -31, 24, -56, -12, -30, 29, -45, 3, 16, -32, -50, 23, -6, -14, -1, -31, -32, 58, -3, 74, 28, 53, -49, -54, -55, 37, -58, 18, -75, -24, -76, -35, -39, 30, -5, -45, -14, 50, -43, 21, -10, 61, -59, 23, 77, 7, -12, -13, 25, -4, -17, -53, 28, -33, 54, -46, -3, 0, 21, -47, -18, -75, 47, -48, -42, -66, 40, 14, -4, -3, 19, -74, -35, 76, -15, -62, -73, 29, 66, 53, -11, -9, -16, -29, 1, -87, 14, 29, 39, 40, 69, -49, 26, 54, -22, 27, -26, 74, 29, -45, -77, -46, -9, -53, -53, -82, 52, -10, 29, 35, 56, -2, 3, 15, 23, -49, 26, 74, 10, -25, 55, -18, 26, 24, -73, -7, -7, -92, -22, 7, 22, -44, 37, -49, -13, -61, -44, -4, -49, 20, 46, -31, -60, -21, -43, 32, -36, -62, 30, 44, -10, 34, 19, -57, -14, 83, -11, 57, 15, -72, 46, 48, -6, 10, 26, -85, -75, -56, -60, 40, -12, -76, -31, -11, -22, -45, 42, 10, -52, -50, 69, 20, -29, -25, -69, -18, 9, -6, -43, -30, -8, 37, 2, -50, 1, -52, 8, -68, -51, -66, -20, -2, -39, -26, -53, -40, -32, -59, -18, -36, -16, -52, 59, 1, -65, -3, -97, -5, -21, -13, -17, -9, -77, 12, 59, 43, 76, 13, -19, 52, -51, -83, -103, 33, 39, -68, -39, -80, -31, 33, -95, -65, 18, 46, 26, 85, -93, -62, 11, -51, -4, 58, 5, 26, -36, -10, -13, 33, -48, 39, -74, -54, -34, -41, 21, -20, -23, -27, 49, -11, 59, 65, -1, -59, 38, -32, -29, -74, -5, -7, 56, -49, 23, 20, 0, 39, -72, -82, -79, -41, -55, 15, 10, 5, -69, 53, -21, -51, 41, -18, -27, -10, -42, 23, -51, -78, 36, -63, -26, -13, 29, 66, 9, 56, 44, -83, 5, -42, 45, 2, 9, 51, -47, 56, 46, -35, 45, 9, 39, -3, -5, -13, 48, -58, -66, 30, 6, 18, 46, -79, 0, 50, -64, 57, -2, 38, -66, -56, -13, -68, 35, -11, -1, -1, -70, -47, -58, -81, -13, 76, 47, -12, 27, 16, -17, -20, -82, -45, -31, -56, -5, -80, 50, 9, -13, 51, -73, -32, 33, 57, 25, -45, -9, 74, 6, 4, -69, -43, 7, 27, -9, -87, -15, 47, -31, -24, -29, -52, -9, -60, -59, 17, 49, -50, 49, -46, -29, -60, 29, -52, -8, -115, 58, 70, -63, 11, 8, 28, 7, -12, -62, -56, -13, 45, 72, -29, 19, 72, -35, 1, 49, -48, 12, -75, 23, -33, -1, 5, -49, 47, -3, -9, 36, 48, -71, -31, 11, -75, 19, 39, 20, -59, -41, 18, -15, -37, -4, -20, -66, 4, 14, -44, 40, 36, -16, 36, -41, -61, 76, 31, 30, 22, 54, -6, -94, -17, -62, 36, -20, 40, 36, -29, 35, 11, 22, -66, 43, 49, -23, -38, 53, 43, 5, -35, 5, -66, 33, 28, -37, 28, 42, 8, -9, 28, -72, -59, -1, 57, -39, -10, 9, -54, -38, 21, 43, -24, -13, -30, 66, -14, 49, -6, 38, 22, 38, -25, -69, 17, 65, -8, -4, 5, -24, -94, -12, -50, 69, 28, -77, 51, 26, 58, -43, -9, -31, -48, -29, 45, -56, -76, -13, 8, -53, -33, 52, -52, 7, 15, -15, 16, 44, -21, -9, -59, 15, -2, 28, 2, 45, -33, -33, 63, 104, 47, -77, -94, -34, -25, -32, -5, -22, 35, -79, -58, 27, 20, 66, -65, -67, 31, -29, -66, -38, -73, 15, 10, -5, -54, -38, -6, 25, 58, -13, -35, -35, 47, 26, -63, -38, 31, 12, 47, -26, -12, -46, -28, 2, 47, 35, 16, -80, 4, 53, 69, -35, -32, -67, -50, 24, 14, -37, 81, 64, 20, -23, 26, 28, -33, 39, 62, 61, -20, -1, -10, -28, -20, 50, 53, 32, 10, 12, 4, -20, -28, 16, -29, 37, -51, -21, 7, -33, 2, -96, 51, 35, 9, 22, -3, 4, -9, 53, 35, 44, 5, -57, -23, 34, 45, -2, 0, -63, 50, 54, -53, -39, 29, -17, -30, -30, 17, 14, 45, -51, -26, -54, -26, -62, 54, -64, 44, -31, 33, 42, 9, 50, 47, -5, 57, -14, 30, -26, -6, -25, 1, -56, 16, 45, -97, 59, -42, 53, 5, -22, -6, -98, 9, -55, -32, -38, 16, -12, -54, 62, 63, 68, -23, 32, -54, -2, 50, 34, -21, 32, 44, 38, 68, -39, -67, 45, -12, -50, 37, -23, 45, -53, -56, -23, -20, -16, -53, -10, -17, -74, 34, -35, -42, 46, -46, -43, -23, 36, -49, -2, -2, -47, -6, 0, 4, 16, 54, 69, 47, -69, -11, 36, -60, -55, 64, -57, -21, 24, 30, 19, -6, 16, -45, -3, -78, 30, 49, -16, 57, -30, 31, 50, 18, 38, -3, -26, 42, 62, 16, -20, -72, 40, -44, 6, 38, -80, -47, 63, 41, -13, -60, -47, -51, 48, -44, 28, -12, 16, -62, -63, 28, 46, 39, -51, 83, -83, 8, -2, 18, 31, -10, 33, -15, -62, -60, 55, 1, -18, 18, 43, 4, -28, -22, -31, -54, 0, -78, 41, -11, 57, 44, -45, -56, 7, -8, -15, 52, 22, -7, 33, -11, -64, -44, 2, -67, -77, -57, 19, 14, 33, -49, 14, 54, 4, 54, 53, -28, -39, -34, 11, 30, 8, 13, -4, -55, 38, -16, 12, 55, 53, -3, -51, -13, 13, -34, -12, -44, -56, 6, -19, 46, -4, 1, 5, 27, -62, -4, 4, 26, 8, -69, -13, 66, 73, -67, -17, -15, 68, 65, 63, 21, -65, -32, 6, -27, -26, 10, -60, 33, 17, -13, -35, -64, 13, 21, 40, -32, 4, -74, 1, -39, -33, 42, -43, 41, -53, -77, -23, 1, -31, -12, -82, 31, -38, -76, 8, 40, 49, -52, 40, -109, 39, 43, 43, 7, -45, -19, -35, 25, -67, -50, 24, -75, 8, -69, -25, -4, -39, 26, -54, -15, -44, 12, 26, 31, 43, -5, 32, -35, -56, -70, -71, 53, -18, -11, -39, -50, 29, 43, 57, -2, -21, -46, 19, 69, -36, 72, 28, -9, -16, -59, -47, -47, -45, 37, 
  53, 27, 54, -1, -76, -19, 53, 24, 38, 49, 24, 20, 50, 74, -47, -65, 10, 51, 69, -26, -51, 79, -45, 18, 23, 58, 47, -59, 42, 11, 20, -2, 57, 34, -30, 63, -73, -18, -8, -27, -9, 15, -52, -27, -80, -24, 16, -91, 26, 92, -1, 77, 53, 77, 26, -49, 11, 38, 5, -53, 63, -35, -70, -20, 29, -68, -89, -46, 44, -47, -31, 93, -6, -44, 7, 18, 51, 29, -65, -49, 7, 28, 74, -53, 19, -27, -46, -62, 35, 47, 31, 27, -13, -56, -24, 27, -56, -27, 24, -20, -11, 37, -71, -13, -18, 17, -12, -53, -83, -1, 78, 12, 30, -41, -19, -26, -11, -45, -11, -41, 45, 32, -12, 83, -46, 11, -6, 2, -24, 13, 6, 22, 8, 56, 1, -3, -21, -17, -67, -43, -17, 3, -63, -16, -92, -29, 70, 32, -28, -19, 47, 46, 33, 6, -72, -13, 18, 39, -39, 49, -94, -33, 25, 8, -13, 36, 17, 61, 51, -65, -24, -41, 40, 25, -9, 60, -14, -45, -69, 40, 7, -12, 17, 69, -17, -10, -9, -42, 2, -29, 66, 11, -50, 15, -50, -5, 44, 49, -35, 7, 9, -8, -4, 11, 20, -76, -6, -40, 5, -53, 29, 22, 3, 35, 14, -55, 15, 59, -83, 120, -31, -59, 19, 22, 34, -2, -48, -44, 40, -13, -26, 25, -63, 3, -41, -31, -31, -17, 37, 60, 45, -2, 40, -91, -28, 41, -19, 60, 59, -37, 25, -42, -45, 6, 10, -14, -38, 2, 67, -27, 18, -27, 35, -78, -12, -72, -40, 46, 7, 34, -35, 18, 56, -57, -25, 57, 16, 4, -31, -48, 55, 62, 72, -9, -35, 5, 29, -30, -3, -44, 8, 42, 43, 25, -27, 41, -44, -38, 70, 51, -52, -12, 39, 41, 4, -43, -39, 69, -4, 20, -2, -39, 8, 70, 53, -41, 54, -29, 51, 17, 92, 23, 20, -21, -3, -54, 52, -43, 25, 39, 25, 3, 62, 25, -37, -43, -70, -11, 4, 24, 42, -48, -53, 81, 28, 51, 28, -3, 23, 65, -72, 1, 56, -23, -76, -23, -64, -34, 37, 41, 85, -35, 68, 35, 52, 11, -23, 65, -19, 70, -42, -36, 15, -18, -36, 22, 16, 50, 34, 18, -47, -12, -24, 42, 40, -2, 2, -66, 45, 11, 80, 20, -14, 7, 28, 7, 73, -29, -74, -45, -45, -74, 66, -69, 24, 5, -78, -52, -25, 45, -42, -6, 26, -60, 36, 14, -14, -52, 36, -11, 36, -59, 67, 97, -68, 65, -55, 58, -31, 6, -17, -30, -54, 70, 44, 14, -43, 64, 64, -11, 10, -79, -30, 25, -41, -43, -84, -60, -61, 45, -40, 95, 23, 0, 29, 35, 12, -60, 44, 23, 8, 15, 28, 55, -29, 21, -52, -12, -39, -81, 58, -94, 2, 2, -35, -70, -31, 97, -118, -31, -8, 18, -76, -76, -61, 2, 16, 12, -14, -3, -29, 35, 42, -24, -33, 51, 21, 15, 21, 16, 16, -18, -63, -40, 42, 50, 9, -11, 57, -16, 56, 33, 8, 37, -24, -45, -55, -42, -73, 40, 19, 20, -3, -1, 42, -27, -4, 4, 43, 43, -54, 28, -50, 40, -61, 42, 72, -52, -10, 54, 14, -58, 6, -27, 80, 43, 1, -56, 65, 10, -34, 76, 9, -8, 8, -5, -9, -46, 34, -24, -30, -6, 12, 69, -57, -34, -25, -55, -58, -58, 22, -86, 30, 14, 21, 5, 66, 28, -17, -23, -1, -15, -23, -33, 19, 67, -27, -32, -23, 1, 30, -15, -37, 33, 3, 36, 109, -9, 63, 65, 83, 78, -46, -47, 38, 6, 36, -57, 3, -59, 61, -22, 12, -54, -7, 28, 52, 60, 38, -67, 6, 19, 62, 50, 21, 16, -55, -27, 29, 19, 43, -54, -50, 26, 55, 16, -44, 54, 19, 47, 1, 21, 23, 10, 4, 66, -20, 42, -12, 4, 8, 33, 0, 12, -25, -1, 16, 21, 28, 11, 2, -14, -65, 27, -39, -37, 68, -54, 51, 29, -1, 15, -49, -23, -17, -30, 50, 23, -38, 3, 53, 25, -53, 36, 6, 71, -7, 32, 40, 42, -32, 6, 13, -91, 65, 61, 34, 19, -66, -8, -41, 30, -36, 12, 17, -60, 5, -8, -18, -16, 59, -30, -20, -117, -6, -1, 2, 32, 31, 26, 2, -75, 68, 17, -73, -10, -22, -47, 14, 11, -41, 4, -58, -60, -72, 50, -50, 17, -28, 29, 31, 51, 52, 5, 71, -27, 59, -20, 58, -32, 56, 61, -69, 63, 1, 62, 45, 24, -52, 0, -69, -4, -20, 46, -30, 15, 22, -34, -53, 17, 14, -40, 56, -32, 48, -35, 33, 25, 43, 7, -33, 12, -2, -27, -52, 64, -45, 11, -8, 57, 5, -18, 30, 21, -25, 21, 70, -17, -15, 34, 6, -10, -4, 10, -79, 22, 50, -101, -49, -19, 36, 68, -68, 13, 33, 34, -7, -17, -58, 30, 90, -54, 50, 33, 43, -23, -56, 27, -103, -51, 68, -32, 74, 11, -74, 53, 14, -57, 57, -42, 15, -58, -21, -3, 45, -18, 34, 69, -43, 34, 24, 37, -10, 52, -4, 48, -49, -6, 3, 92, 50, 9, 16, -71, -26, -60, -23, -10, -40, 91, -29, 60, 24, -48, -50, 60, -34, -60, -54, -39, 84, 26, 57, 33, 79, -68, 44, -38, -45, -21, 6, 36, 28, 54, 50, 40, 10, 39, -25, -46, 50, -56, 24, -26, -45, 39, 33, -14, -15, 54, 56, 49, -25, -28, -40, 35, -29, -31, -80, -18, -29, 2, -82, -3, 10, 53, 67, -20, -4, 37, -18, -101, 55, 82, 30, -22, 43, -10, 23, 33, 3, 2, -6, 33, -2, -36, 48, 16, 4, -16, -63, -44, 7, -44, -21, -30, -4, 68, -80, -61, -35, -15, -71, 44, -45, -15, 14, -53, 31, 62, 1, 6, -23, 63, 29, -13, 95, -24, -19, 18, -45, -45, -16, 7, -57, 13, 62, -8, 37, 0, 31, 51, -51, 85, 72, 31, 28, 44, -43, -11, -65, 28, -51, -17, -57, 34, -75, -44, -17, -87, 26, -24, -70, -1, -72, 67, 42, 5, 44, 54, 85, 28, -58, -61, 67, -40, 18, -34, 53, 1, -63, 28, -58, -15, 44, -14, -19, -19, -45, 36, -58, 38, 48, -23, 67, -92, -29, -16, 25, 10, -32, -1, 72, 22, 69, 38, -28, 24, 51, -53, -47, 42, 21, -59, -53, -52, 9, 10, 68, -85, 89, -1, 34, 80, -7, 36, 69, 92, -10, -38, 12, 16, -20, -39, -35, -12, -13, -55, 47, -45, -43, -26, 29, 65, -46, -12, -23, -9, -40, -83, 41, 43, -37, 61, -14, -38, -15, -45, -3, -1, -32, -1, 30, 45, 1, -54, 0, -52, -28, 33, 82, 8, -69, -34, -54, 19, 18, 26, -36, 58, -55, 3, -84, 90, -32, -18, 28, -33, -44, -1, -22, -17, 9, 88, -28, -10, 27, -57, 20, -64, 39, -57, 34, -44, -51, 22, -33, -23, 42, 19, 26, 22, 14, 56, -8, -81, 46, 59, 10, 55, -7, 24, -11, -51, 16, 46, 26, 43, -60, -91, 46, -25, 39, -53, -86, 45, -27, 53, 72, -105, -13, -57, 59, -96, 24, 31, 58, 30, 70, -26, -11, 46, -38, 59, -52, 34, 24, -54, -59, -66, -39, 45, -32, 54, 42, 21, 20, 10, 53, 35, 83, 1, -60, -34, -14, -28, -12, -9, -23, 36, -28, -8, -43, 101, -17, -16, 5, 37, 9, -66, 33, -1, -41, -36, 38, -7, -6, 5, -70, 39, 31, -51, 17, 16, -12, 4, 39, 52, 48, 58, 5, -11, 28, 9, 13, -3, -42, 100, 60, -3, 4, 72, -6, 104, 56, -82, -10, -9, -17, 7, 
  26, -43, 25, 13, -42, -54, -46, -69, 75, 43, -68, 12, 73, 21, -5, 21, -70, 23, 54, -36, -4, -6, -45, -14, 41, 27, 89, -41, 25, -47, 47, -23, 20, -16, -19, 56, -20, -9, 64, 38, -16, 38, -38, 40, -44, 41, -46, -20, 49, -24, 93, -41, 28, -30, -82, -5, 87, -51, -62, 35, -31, -40, -53, 14, -8, -43, 26, -5, 7, -31, 63, 50, -21, 10, -38, 56, 79, 26, 2, -48, -67, -18, 40, 53, -71, 2, 1, -71, 87, -2, 16, -63, 36, 68, 41, -1, -20, -49, 70, -72, -70, -44, 10, 3, -19, -16, -31, -48, -58, 33, 127, 84, -24, -64, -57, -33, -34, -81, -45, -92, 8, -50, -45, -34, -51, -4, -30, -22, -46, 68, 33, -59, -36, -18, 37, -33, -16, -23, 40, -67, -102, 57, 30, -7, 6, 103, 3, 61, 36, 36, -6, -36, -22, 26, -30, 39, 73, -42, -64, 15, 32, -20, -17, 71, 49, -74, 28, -50, 23, 11, 2, -19, -14, 76, 55, 60, -71, 66, 14, 111, 65, -36, -37, -50, 0, 28, 15, 58, -59, -43, -7, 42, -67, 73, -46, -18, -8, 25, -63, 37, -30, 30, -22, -9, -49, 20, -4, -22, -1, 46, -52, 54, -36, -17, -41, -21, 39, -5, -24, -14, 0, 8, 29, 76, -8, -29, -14, -58, -34, -11, 0, -93, -1, 34, -31, -19, 67, 64, -29, -25, -43, -21, 53, -63, 23, -62, -30, 40, 28, -20, -30, -75, -46, 37, -85, -18, 5, -96, -68, -94, 13, -22, 14, -51, 70, 63, -60, -48, -25, -60, -19, 63, 63, -49, 53, -44, 21, -17, 29, 40, -61, -21, -28, 18, 11, 37, -49, -43, 74, 39, -31, -59, -12, 24, -35, 56, -51, 24, 21, 30, -44, -53, -42, -12, -44, 62, 49, 1, -35, -48, -25, -44, -23, 69, 37, -35, -9, 5, 32, -70, 40, 36, 45, 60, -14, -7, -52, 11, 4, -67, -70, -64, 8, -14, -68, -7, -44, -80, 35, 2, -55, -42, 41, 2, -4, -57, 46, -65, -61, 74, -27, 41, 45, 60, -23, -13, 40, -15, 34, -54, 53, 44, -7, 69, -14, -29, 80, 24, -25, 48, 0, -5, -41, 58, 26, -16, 61, -1, -11, 9, -30, 54, 74, -34, -17, -62, 23, -34, -93, -29, -42, 20, -64, 72, 27, 98, 82, 47, -61, 51, 60, 48, -45, 87, 15, 6, -19, -48, -5, 3, -3, -26, 32, -8, 32, 23, 28, 44, 72, -41, -67, 80, 4, -22, -46, 29, 35, -54, 47, 62, -63, 38, 18, 34, 23, -10, 47, 35, 52, -28, 73, 70, -44, 100, 13, 60, -45, -3, 77, 24, -48, 53, -16, -35, -58, -6, 4, -31, -15, -37, 50, -3, -48, 31, 29, 11, -34, 36, 33, 12, -27, -5, 4, 16, -61, 75, 45, -8, -72, -6, -64, 37, 12, -27, -34, 5, -3, -20, -12, -30, 65, -40, -35, 48, -35, 26, -32, 84, 21, -27, 33, 88, -27, -45, 40, -47, -8, 8, 28, 58, 29, -29, -101, -24, 35, 21, -10, -48, -4, -67, -40, 34, -42, -10, 22, 1, 6, -37, 60, 73, 59, -19, 17, 10, 49, -27, 46, -71, -28, 69, -54, -42, 43, 66, 33, -11, -48, 18, 33, 24, 34, -73, 24, 9, 30, -69, 1, 21, -9, 1, -70, 32, 40, -11, -80, -20, -44, 58, -23, -63, 2, -46, 16, 75, 23, 19, 68, 85, -11, 28, 17, -71, 70, 46, -18, -63, 24, -3, -48, 73, 31, -2, 44, -48, -22, -3, 38, -36, -84, 31, -25, 99, -31, -88, 103, 13, 26, 27, -73, -24, 58, 31, 67, 80, 41, 85, 45, 75, 90, -4, 82, 58, -34, -24, -37, -17, 48, -37, 41, 78, 17, 124, -73, -47, -54, 47, 44, -54, 0, 39, -35, -75, -19, 43, -17, -18, 0, 39, 26, 52, 91, -25, 40, -12, -34, 16, 36, -85, 83, -19, 17, -61, 14, 98, 10, 35, -35, -26, -35, 44, -51, 63, 0, -6, -55, -24, -29, -65, -28, -36, -53, 8, 43, -5, 106, -65, -3, -32, 58, -35, 49, 15, 39, 17, -29, -48, -64, -51, 46, -32, 4, 59, 21, 0, 108, -23, -65, 74, -84, -12, 48, -40, -37, 76, -67, -34, -53, -6, -7, 44, 8, 90, -15, 32, 53, 104, 4, -9, -8, 37, -2, -64, -10, 34, 60, -21, -8, 0, -46, 50, -11, 73, 5, -7, 41, 2, 42, -80, -36, 21, -7, -76, -6, -42, 9, 70, -15, -94, 70, 83, -70, -15, -17, -37, -45, 68, -64, -93, 57, -42, -36, 4, 29, 29, 3, 66, -38, 12, 17, 6, -40, -7, 37, -66, -19, 42, 23, -4, -47, -37, 35, 53, -67, 33, 73, -54, 41, -56, 26, 11, 39, 69, 5, -44, -40, 8, -51, -87, 69, -64, 29, -29, 46, 68, 6, -36, -5, -10, 39, 56, -48, -22, -28, 6, 52, 1, -25, 65, 79, -60, 29, 12, 45, 1, 58, -27, -29, -40, 53, -73, 6, 11, 46, 18, 39, 20, -66, 40, 36, -50, 67, 36, -44, -64, -18, 47, -24, -2, -49, 85, -48, 30, -63, -4, 31, -45, 4, 94, -44, -31, -37, -17, 29, 82, 67, 9, -67, -22, 18, -52, -43, -17, -10, -17, 44, -42, -39, 55, 1, -58, -37, -72, 35, 13, 40, -44, -21, -62, -75, -41, -64, 10, 46, -27, 4, -44, 31, 43, 7, 44, 92, 14, 15, -11, -5, -21, 12, 47, 33, -22, 12, -41, 20, 52, 45, -54, -6, 55, -92, 26, 7, 22, -24, 27, 19, -4, -60, 29, -44, 83, -24, -55, 82, 0, -36, 45, 3, -34, 11, -50, 2, -57, 98, 30, 66, 5, -18, -26, -99, 41, 43, 72, 60, -14, 35, 36, -7, -16, -22, 31, -37, -67, 29, 61, -23, -60, 22, 16, 51, 39, -22, 56, 38, 6, -30, -63, 52, 52, 57, 11, -16, 45, 7, -4, 19, 22, 76, 41, -29, -68, 56, -5, -34, 73, 3, -12, -58, 29, -12, 42, 39, -60, -73, -74, 20, 4, 44, 10, -15, -26, 21, 36, 58, -57, 32, 0, -29, -56, 40, -30, -49, -58, 54, 61, 74, -59, 34, 4, -32, -3, -16, -53, 42, -35, -53, -68, 9, 44, 83, -5, 71, 55, -59, 31, 1, -45, 0, 63, 72, 7, -19, 52, -59, 26, -59, -22, -14, -18, -51, -20, 12, -25, 16, 37, -36, 49, -85, -45, 47, -56, 2, 52, -56, 34, -9, -24, -18, 20, 20, 47, -2, 16, 44, 24, 44, -65, 63, 6, 34, 20, -27, -18, 7, 14, 80, 18, -49, 32, 72, 51, -44, -65, 6, -5, 62, 2, -50, 35, -24, -32, -24, -32, 63, -44, -59, -51, 28, -58, 57, -73, 44, 6, -72, 43, -17, -12, 2, 6, 22, -32, 10, -38, 11, -27, -26, -13, 0, -72, 70, 31, 10, -19, -59, -3, 2, -76, 51, -38, -8, -55, 48, 30, 10, -50, 43, -66, -11, 4, 36, -43, -19, 49, -28, -57, 29, -80, -7, 58, 12, 21, -12, -67, 51, 38, 2, -64, -45, 25, 36, 1, 51, -59, -57, 35, 27, 54, 43, -11, -8, 0, -8, -76, -25, -15, -5, -41, 29, 55, -28, -3, 31, 48, 79, 44, 40, -33, -53, 21, -44, 4, -17, -17, 7, 21, -66, -82, -89, 38, -17, 21, 44, 29, 61, -28, -53, 31, -89, -55, -9, -76, 22, 27, -2, 35, -33, 27, -59, 21, 43, -18, -43, -32, 32, -47, 12, -16, -75, -10, 59, -15, -53, -69, 83, 44, 99, 4, 81, 51, -19, 30, 10, 45, 47, -27, 7, 31, 37, -14, -26, 64, 
  85, 11, 48, 52, 39, -9, -50, -62, 9, -17, -29, 29, 25, 65, 6, 60, -43, 62, 66, 7, 73, -31, -83, 45, -37, 55, 8, -26, 5, 1, -33, -57, 72, 55, 29, -8, -19, -1, -86, -7, -75, -11, 63, -23, -2, 31, 37, -58, 46, 90, 18, 54, -21, -40, -57, -78, 47, -13, 24, -27, 16, -74, -40, 82, 18, 57, 7, -39, 22, 1, -42, -75, 7, -55, -49, 33, 115, 44, 61, 22, 0, 53, 24, 44, 79, 26, -50, -6, -34, 5, 62, -32, 19, 74, 7, 60, -60, 61, 7, 21, 104, 39, -10, -55, 7, 31, 73, 51, 35, 94, 38, -19, -58, 37, 36, -15, 80, 39, 19, -21, -32, 43, 28, 50, 5, -59, -67, 80, 19, 38, -29, 21, 16, -19, -10, 7, 41, -26, 5, -50, 23, -7, 12, 28, -63, -44, 57, 66, 30, 38, 7, -29, -13, 57, -76, -33, -28, -36, 6, -62, 64, 28, -41, 51, -36, 47, 3, 11, 45, -66, 28, -40, 33, -26, -36, 42, 32, 18, -67, 31, 24, -25, -63, -27, 84, -11, 75, 1, -83, -86, 26, 21, 34, -5, 64, 16, -53, -20, -76, 41, -62, 10, -52, 67, -57, 39, -11, 37, -58, -50, 31, -31, 14, -30, -25, -37, 5, -15, -22, -84, 20, 31, 39, 12, 79, 19, -54, -43, -14, 64, 5, 64, -18, -18, 29, 10, -63, 58, 1, 87, -43, -46, -50, -4, 9, -29, -51, 41, 16, 28, -37, 45, -41, 57, -40, -50, -43, -18, 14, 45, -45, 59, 21, 35, 50, -33, -49, -50, 1, -24, -43, -20, -62, -44, 28, 21, 25, 46, -25, -36, 44, -13, 76, -70, 63, -56, -89, -18, 75, 24, -29, -51, 22, -11, -53, -17, 60, 43, -63, 49, 50, -80, -91, 6, -50, -14, 32, 2, 51, 36, -32, -16, -60, 42, 42, 71, 49, 43, 29, 43, 83, 0, -11, -34, -13, 71, -32, -29, 19, -52, 4, 26, -40, -59, -66, 44, 52, -56, 20, 22, -2, -10, 8, 84, -87, -49, 48, -37, 85, 31, 9, -7, 56, 47, -26, 9, 8, 19, -8, 4, 56, -74, 81, -42, 9, -25, -36, -43, -26, 55, 46, 25, -1, 62, -37, 40, -23, -64, -54, -6, -68, 104, 39, 6, -3, 51, -27, 50, -53, -58, 34, 30, -10, -28, -12, -19, 37, -5, 45, 80, -76, -6, 23, -13, 14, 49, -42, -34, 4, -26, 85, -25, -20, 12, -53, -47, -40, 65, -20, -76, 42, -57, 12, 32, -1, 25, 38, 49, 49, -50, 29, 59, 73, 30, 16, 99, -61, 39, 24, 10, -8, 41, -8, 112, 74, -24, 34, 44, -58, -53, 60, -24, -10, -44, -22, 40, -35, 46, -28, 21, 62, -59, 2, -23, -11, 75, -61, 28, 53, 18, 34, -22, 61, 67, -30, 35, -36, 38, 9, -14, 0, 6, 69, 48, -41, -29, -13, 51, -5, -19, -78, -45, 5, 8, 45, 52, 19, 29, 32, 73, -12, 23, 5, -25, 19, 71, -50, -24, 81, -38, -6, 13, -4, -36, 89, -50, 66, 16, -39, 18, -13, -34, -6, -8, 0, 81, 52, 44, 3, -69, -49, -46, 23, -64, 7, -12, 33, 44, -58, 25, 28, -83, -74, -8, 33, 8, 17, -24, -14, -42, 16, 59, 11, -1, 13, -24, -38, 73, -51, 26, -45, -62, 39, -30, -54, 79, -27, -46, 58, 84, 5, -33, -18, -13, -16, 64, -29, 0, 15, -70, -49, 46, -26, -51, 27, -1, -26, -68, -30, 54, 7, -52, 1, 76, 5, 17, -5, 36, 16, -71, -13, 60, 2, 10, 4, 8, 68, -74, -1, -15, 35, 22, 22, -35, 18, -37, -27, -23, 44, -63, 2, -6, -12, 51, 72, -55, 11, -13, -56, 46, -49, 15, -51, -11, -30, 36, 78, -28, -62, -11, -12, 5, -49, 2, 18, -39, 8, 97, -18, -34, 68, -18, 69, -41, 3, 21, -9, 49, -51, -46, 13, 74, -22, -90, 72, 33, -22, -3, -21, -9, -39, -51, 9, 45, -12, 30, 11, 55, -37, 108, -39, 37, 75, 45, -62, -25, -3, -31, -13, 45, -14, -19, 33, 73, 40, 25, 16, -68, -2, 9, -29, 60, 71, -6, 82, 52, 19, 33, -73, -25, -59, 29, -24, -26, -25, 32, 72, 49, 40, 9, -31, 1, -20, -11, -30, -5, -27, 53, 75, -44, 61, -53, 52, -33, 41, -9, -90, -70, -11, -8, -36, -66, 3, -29, -18, 52, -15, -56, 42, 20, 50, 1, 46, -28, -35, 24, -3, -20, -16, 69, 9, -24, -4, -46, 6, 44, -13, 37, 24, -29, -8, 37, -61, -35, 62, -26, 1, -82, -45, -58, -6, 12, -19, 64, 12, 21, 64, 34, 72, -63, -56, 103, 32, 1, -50, -33, -18, 11, 55, 46, -24, 24, 15, -37, -19, -36, -61, 48, -33, -7, -46, -34, -1, -46, 22, 21, -12, -18, 14, 63, -33, -22, -34, 28, 25, 25, -2, 67, 3, -12, 12, -11, -13, -78, -22, 12, 25, 27, 0, 38, -10, 62, -47, -65, 14, -9, 17, -21, -60, 8, -22, 1, 35, -22, -53, -21, 29, 50, 16, 12, -13, -40, 47, 37, -2, -39, -34, 76, -1, -50, 59, 29, -46, -39, 23, -56, 19, 63, -28, 55, -62, -14, 11, -76, -58, 91, -20, -24, -6, -14, 9, -31, 25, -64, -54, 61, -4, 38, 18, 5, -22, -44, -6, 0, -44, -47, -59, -13, 73, 13, -69, -32, -78, -95, -36, -27, -22, 19, -67, 32, -20, -63, -16, 79, -48, 43, -39, 37, 5, 10, -40, 31, 23, 61, 3, 14, 63, -36, 21, -25, 66, -6, 58, 33, -25, -45, -34, 15, 69, 56, 56, -1, 13, 101, -21, -56, 40, 63, 58, -53, 3, -8, -19, 41, -22, 31, 14, 23, 57, -63, -3, 1, -5, -33, -32, 30, -68, 19, -30, -37, 23, -40, -32, 32, 22, -70, 73, -60, 12, -12, 79, -4, -90, 8, -61, 30, 42, 73, 70, 0, 83, 21, 19, 40, 38, -5, -57, -71, 43, -47, 51, 12, -55, 21, 11, -25, 50, 30, -20, -47, 32, -71, -41, -21, -57, -74, -77, -37, 17, 76, 39, 20, 58, 36, -18, -25, 68, 59, 101, -10, -38, -46, 65, -37, 39, -43, 40, -18, -24, -27, -87, 7, 17, 66, 45, 52, -9, 38, 44, 63, -2, 30, 46, -66, 25, 50, 62, 16, 46, -47, 19, 56, -39, 15, -46, -50, -21, 50, -58, 56, -20, -81, -35, 34, 18, 42, -7, -45, 23, -117, -33, -39, -17, -37, -18, 23, -9, -38, 25, -13, -21, 73, -35, -82, -65, -11, 34, -73, -8, -67, 13, 43, 6, 1, -14, -11, 39, 61, -37, 42, 46, 0, -19, 35, 31, -34, -73, 50, 87, -52, -34, -39, 19, -69, 10, -3, 41, -13, 40, -11, -12, 32, 29, -17, 10, 4, -24, 74, 46, 20, 19, -29, 72, 76, -9, -2, 43, 47, 16, 15, 64, 5, -19, -48, 48, 34, 63, 55, -11, 72, 36, -41, -17, -17, 13, 57, 2, -21, 30, -30, -12, -3, -32, -15, 52, -56, 72, -55, -28, -6, 71, -44, -21, 26, -50, -32, -18, 29, 34, 14, -1, -52, -41, -47, 12, 28, 87, -75, -13, 85, -32, 28, -78, 60, 46, 26, 9, -12, 9, -17, 3, -45, -18, -27, -39, 58, -22, 2, -7, 17, 45, 12, -8, -73, 1, 41, -25, -57, 18, -35, 55, -54, -58, -55, 21, 22, -79, -27, -6, 13, -38, -27, -2, 68, 13, 59, -6, 16, -110, -113, 44, -54, 2, -70, -18, 55, -9, 69, -24, 14, 6, -23, -19, 76, 76, 12, -11, 60, 30, 42, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 8,1280 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0010095128091052175, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[1280] = { -1306, -235, -796, -896, -2678, -1069, -1845, -1460, -1267, -2415, -2253, -1096, -1949, 130, -1162, -1058, -546, -980, -1114, -1025, -1158, -1195, -1226, -462, -1604, -1458, -1079, -545, -1732, -2157, 87, -1824, -1217, -1189, -1184, -1671, -1008, -303, -446, -1285, -1458, -861, -2398, -2149, -678, -720, -817, -2077, -1746, -1458, -44, -1288, -1481, -1911, -1709, 102, 282, 374, -691, -811, -2605, -2461, -1194, -1529, -1632, -255, -1434, -1066, -444, -2587, -1870, -1751, -1178, -1602, 369, -342, -571, -141, -1099, -1226, -1971, -851, -383, -2359, -1346, -1570, -1738, -359, -741, -1070, -3157, -991, -637, -3152, -583, -290, -1889, -280, -609, -1759, -735, -1920, -1664, -973, -1896, -1156, -459, -263, -2387, -497, -624, -1645, -1305, -488, -1000, -544, -1615, -282, -1108, -1439, -584, -1383, -1511, -1063, -1867, -409, -1316, -714, -1998, -910, -2325, -1859, -1288, -1608, -2918, -813, -1414, -1300, -1483, -1324, -1801, -504, -157, -1672, -2861, -931, 319, -520, -279, -607, -922, -835, -1053, -2029, -1802, -1187, -868, -1629, -800, -1439, -2343, -2198, -675, -916, -1764, -2093, -1659, -120, -619, -2900, -988, -24, -2480, -1764, -1950, -525, -642, -2808, -1158, -367, -187, -186, -2305, -1151, -507, -773, -1036, -2193, -1914, -1006, -1646, -656, -1089, -1437, -717, -1418, 0, -1041, -2797, 161, -1406, 44, -837, -2653, 30, -1087, -1964, -473, -2477, -368, -2666, -2737, -1560, 32, -2576, -304, -2383, -450, -509, -2004, 47, -1387, -2800, -1624, -1501, -2502, -2193, 285, 301, -1827, -1808, -1965, -2586, -1300, -1109, -429, -1696, -688, -2133, 28, -2232, -1839, -1009, -605, -1655, -1855, -1182, -824, -276, 175, -815, -2723, -1449, -271, -1898, -739, -247, -2615, -1782, -1410, -2540, -1530, -568, 589, -468, -2226, -1884, 371, -1089, -327, -661, -1108, 1385, -3506, -1050, -499, 183, 287, -2570, 1378, 462, -22, -2307, -3376, -2720, -1352, -1710, -1287, -3157, -674, -1061, -588, 242, -1126, -966, -300, -1669, -192, -2313, -1469, 543, -1469, -1648, -1598, -250, -624, -1876, -942, -2714, -1683, -214, -1126, -1966, -442, -1151, -1127, 198, -1694, -1436, -1169, -2270, -419, -1443, 151, -1446, -1126, 16, -721, -3063, -997, -173, -819, -713, -906, -1572, -1535, -1497, -3312, -347, -754, -2252, -795, -2351, -1287, -1869, -2168, -1285, -1478, -554, -1093, 769, -1337, 127, -2112, -423, -1031, -1591, -601, -591, -1619, 4, -177, -1005, -1251, -1312, -1508, 167, -779, -1265, -1370, -1589, -2372, -3011, 486, -1874, 818, -822, -1340, -2380, -2013, -995, -878, -629, -782, -571, -1941, -850, -1725, -1148, -2057, -873, -69, -944, -1252, -280, -1934, -298, 840, -1145, -790, -1471, -1086, -393, -460, -1433, -1037, -2347, -1216, -1074, -613, -2402, -376, -674, -1402, -1596, -1363, -686, -821, -439, -1591, -2523, -3173, -1117, -715, -1670, -639, -3171, -1710, -1774, 122, -3503, -2413, -1561, -1882, 16, -1394, -217, 668, -1554, -2095, -1070, -257, -2431, -1320, -542, -713, -708, -1132, 1352, -413, -1529, -2554, -1868, -878, -722, -3209, -494, -1811, -468, -476, -412, -787, -2285, -806, -2029, -1120, -600, -1757, -1070, -1376, -198, -2077, -1166, -930, -3019, -360, -1807, -711, -1872, -705, -258, 200, -787, -69, -500, -1296, -1679, 120, -1096, -839, -1633, -297, -1603, -805, -1774, -2889, -985, -1384, -594, -585, -601, -429, -1597, -1514, -788, 246, -891, -614, -2448, -1629, -326, -779, -1069, -317, -2096, -650, -1525, -542, -435, -1770, -1100, -1189, 275, -270, -565, -1512, -64, -1457, -1396, -77, 642, -1029, -1101, -684, 105, -1549, -315, -2922, -1139, -2546, -808, -1569, -1776, -1248, -2128, -112, -530, -953, -1928, -436, -1241, 1219, 362, -1460, -1729, -1023, -1109, -772, -974, -975, -1617, 834, -697, -1278, -1813, -1520, -1156, -1962, -1278, 1117, -668, -1626, -2071, -1016, -1136, -1493, -225, -968, -1043, -1601, -1273, -2177, -823, -1411, -1445, -1822, -1251, -1455, -1552, -1520, -1675, -2190, -2352, -657, -1764, -2276, -1156, -792, -2309, -1129, -108, -1669, -1936, -1189, -1739, -1694, -1116, -163, -2677, -533, -888, 214, -2574, -1605, -1996, -901, -1958, -2896, -401, -1374, -1096, -854, -482, -684, -182, -2556, -2212, -807, -751, -461, -784, -1896, -1531, -604, -1657, -1341, -817, -210, -1232, -3350, -3036, -919, -1451, -4732, -1106, -1757, -955, -2511, -922, -1386, -571, -1308, -962, -511, -1832, -739, -911, -831, -1395, -230, -920, -1597, -873, -460, -780, -339, -1029, -1712, -2329, -189, -1805, -2052, -914, -1748, -1329, -1193, -1472, -146, -787, -1983, -1283, -1800, -2208, -1021, -1766, -1408, -2366, -2074, -697, -1318, -628, -2893, 60, -670, -296, -1414, -348, -845, -1398, -1442, -247, -304, -128, -1049, -2081, -3087, -1088, -625, -30, 341, -2915, -3576, -1371, -2334, -936, -648, -1916, -1289, -788, -574, -2753, -1175, -3871, -1228, -627, -921, -425, -1356, -1432, -1334, 149, -1455, -2210, -2228, -1022, 337, -2563, -743, -1373, -729, 591, -199, -388, -1310, 314, -694, -2375, -1956, -2263, 1117, -1442, -1361, -750, -1661, -496, -1532, 185, -488, -1900, 394, -1199, -550, -3437, -960, -142, -2073, -1395, -344, -1684, -820, 323, -493, -1328, -1370, 292, -949, 407, -386, -582, -376, -872, -1943, 69, -1304, -1127, -230, -1108, -2018, -794, -41, -2405, -502, -83, -627, -1021, -1672, -745, -1767, -661, -533, -524, -2433, -729, -2056, -338, -996, -1978, -254, -940, -990, 837, -651, -419, -891, -214, -921, -2331, -860, -1647, -1783, -233, -51, -928, -341, -713, 30, -2303, -1485, -721, -1514, -2179, -1527, 1204, -350, -679, -1514, -1922, -1109, -1566, -1270, -692, -828, -750, -3186, -433, 314, -1869, -346, 279, -615, -1283, -993, -1043, -1011, -3212, -1117, -351, 377, -1546, -564, -935, -2280, -1878, -2735, -109, -1132, -2737, -1897, -1724, -2371, -60, -754, -1148, -1931, -31, -1593, -1657, -3030, -1757, -1504, -894, -1765, -1250, -1161, -1291, 267, -1761, -2439, -1550, -84, -1079, -654, -1185, -721, -808, -680, -804, -2583, -2004, -611, -603, -1304, -670, -1135, -504, -1338, -1491, -2166, -1099, -257, -2210, -111, -2563, -867, -944, -1376, -1622, 1062, -1360, -1453, -1204, -1041, -1773, -1578, -214, -1365, -1253, -1189, -2062, -446, -506, -880, -1381, -663, -438, -1292, -2488, -1774, -963, -2377, -600, -2521, -3342, -469, -2339, -1843, -1639, -2222, -639, -1103, -1603, -1062, -437, -1080, -54, -9, -1748, -609, -1777, -184, -813, -1459, -2198, -84, -1637, -1225, -1650, 897, -857, -1350, -1476, -2783, -814, 461, -1247, -994, -1293, -1199, 62, -786, -1264, -1069, -1211, -1377, -2134, -1807, 514, 133, 1575, -413, -2031, -774, -3282, -2014, -1849, -317, 487, -632, -1130, -54, -2297, -862, -1515, -1288, -802, -1833, -187, -524, -348, -1214, -1187, -101, -1020, -2163, -4189, -322, 1126, 279, -1973, -246, 1611, -1565, -1212, -941, -2467, -729, 86, -1232, -442, -1393, -1238, -44, -826, -1323, -977, -694, -1052, -556, 4049, -1809, -447, -2352, -1281, -1527, -1653, -3046, -1522, -861, -1240, -157, -648, -628, -1019, -2449, -598, -719, -3241, -1972, -1082, -2760, -1698, -1257, -4385, -1805, -2497, -1545, -1576, -1379, -793, -2123, -2238, -525, -1544, -991, -1526, -1425, -1010, 1298, 425, -3402, -2809, -1004, -1547, -912, -2116, 188, -2040, -1205, -2131, -1461, -1814, 35, -1158, 929, -1177, -1976, -2161, -626, -627, -1385, -1229, 219, -348, 106, -544, -2106, -1667, -1410, -603, -924, -431, -1056, -1762, -1996, -1650, -1746, -337, -1098, 242, -2253, -995, -1578, -1699, -1128, -215, -1399, -2032, -1356, -682, -2389, -1093, -2005, -1983, -390, 564, -956, 255, -2925, -846, -816, -2079, -1743, -1669, -2013, -2042, -797, -289, -1947, -166, -652, -2883, -1201, -2353, -788, -2514, -614, -1755, -1219, -851, -879, -207, -337, -1722, -528, 406, -1705, -257, -1012, -1669, -1783, -732, 44, -341, -1039, -1443, -2002, -1156, -1654, -600, -2094, 1413, -1886, -1303, 115, -667, -2494, -446, -73, -2720, -288, -1711, -1144, -386, -1870, -1871, -1734, -1135, -1411, 286, -2263, -2011, -1215, -1684, -2124, 706, -3200, -734, -1301, -485, -1084, -706, -1961, -1838, -1442, -1195, -1359, -1125, -1353, -813, -1519, -438, -436, -1270, -1753, -2444, -2107, -2561, -747, -1954, -562, -1614, -1109, -356, -1873, -2733, -915, -2536, -601, -942, 261, 124, -1017, -986, -439, -63, -557, -873, -834, -3426, -1478, -2242, -1410, -599, -798, 784, 48, -1248, 111, -948, -2145, -758, -1403, -215, -1406, -561, -2058, -440, -431, -2327, -1767, -571, -2056, -2580, -2525, -1239, -1280, -427, -1659, -1162, -1938, };
const TfArray<1, int> tensor_dimension7 = { 1, { 1280 } };
const TfArray<1280, float> quant7_scale = { 1280, { 0.00017171830404549837, 0.00020085717551410198, 0.00016494959709234536, 0.00018081699090544134, 0.00018490510410629213, 0.00021190893312450498, 0.00018624294898472726, 0.00016538692580070347, 0.0001731411466607824, 0.0001844863872975111, 0.00022401531168725342, 0.00015859004633966833, 0.00018644814554136246, 0.00017317700257990509, 0.00017093286442104727, 0.00017498327360954136, 0.00021834038489032537, 0.00022453276324085891, 0.00019857090956065804, 0.00015429309860337526, 0.00026143991271965206, 0.00014290341641753912, 0.00016478191537316889, 0.00017223975737579167, 0.0001924169046105817, 0.00018026200996246189, 0.00024576301802881062, 0.00019185373093932867, 0.00022022782650310546, 0.00023953807249199599, 0.00019501126371324062, 0.00019456584414001554, 0.00020699613378383219, 0.00024988988297991455, 0.00022220183745957911, 0.00022391148377209902, 0.00016535520262550563, 0.00018995316349901259, 0.00017695395217742771, 0.0001922031951835379, 0.00019553664606064558, 0.0001652161154197529, 0.00017274594574701041, 0.00019379882724024355, 0.00019611800962593406, 0.00026900408556684852, 0.00019719745614565909, 0.00014775473391637206, 0.00022875709692016244, 0.00022552088194061071, 0.00015597154560964555, 0.00018516842101234943, 0.00018155133875552565, 0.00017062784172594547, 0.00016362361202482134, 0.00022524116502609104, 0.00020901908283121884, 0.00016892950225155801, 0.00020833977032452822, 0.00021733521134592593, 0.00014671690587420017, 0.00016182157560251653, 0.0002098918630508706, 0.00015903635357972234, 0.00023203747696243227, 0.00026406103279441595, 0.00017563454457558692, 0.00016529485583305359, 0.00019589992007240653, 0.00020602646691258997, 0.00019627159053925425, 0.0001927343982970342, 0.00015072576934471726, 0.00025157246273010969, 0.00021103234030306339, 0.00015931074449326843, 0.00017940091493073851, 0.00023813560255803168, 0.00019167090067639947, 0.00019716176029760391, 0.00014619519060943276, 0.0001601734256837517, 0.00017296824080403894, 0.00018944876501336694, 0.00023759104078635573, 0.00019085622625425458, 0.00017119545373134315, 0.00018988002557307482, 0.00016161377425305545, 0.00020825538376811892, 0.00016997200145851821, 0.00017191728693433106, 0.00023079267702996731, 0.00019385167979635298, 0.00017552143253851682, 0.00018357961380388588, 0.00019650434842333198, 0.00018850543710868806, 0.00023575479281134903, 0.00017531511548440903, 0.00021172971173655242, 0.00018544001795817167, 0.00017479364760220051, 0.00019077805336564779, 0.00016533663438167423, 0.00023725211212877184, 0.00026504413108341396, 0.00016495140152983367, 0.00019403081387281418, 0.00017685318016447127, 0.00018983097106683999, 0.00016707049508113414, 0.00022785665350966156, 0.00024878160911612213, 0.00025994886527769268, 0.00021643211948685348, 0.00017460620438214391, 0.00025183556135743856, 0.00019491802959237248, 0.00021234297310002148, 0.0001678283151704818, 0.00020936626242473722, 0.00023398980556521565, 0.00018174004799220711, 0.00022379435540642589, 0.00016294425586238503, 0.00017126511374954134, 0.00022066567908041179, 0.00015537551371380687, 0.00020264895283617079, 0.00018872933287639171, 0.00021893663506489247, 0.00018500020087230951, 0.00017403377569280565, 0.00019331052317284048, 0.00019799220899585634, 0.00023066133144311607, 0.00016965702525340021, 0.00019651489856187254, 0.00017809357086662203, 0.00022544567764271051, 0.00019727765175048262, 0.0001909961283672601, 0.00019844390044454485, 0.000158308757818304, 0.00018108663789462298, 0.00020886043785139918, 0.0002328916743863374, 0.00019230111502110958, 0.0002042588748736307, 0.00017224710609298199, 0.00016206824511755258, 0.00020580265845637769, 0.00020223819592501968, 0.00017656247655395418, 0.00021592920529656112, 0.00022041553165763617, 0.00018479634309187531, 0.0002157079434255138, 0.00022741603606846184, 0.00015093391994014382, 0.00018483838357497007, 0.00025360743165947497, 0.00019099893688689917, 0.00015546903887297958, 0.00021567624935414642, 0.00023851844889577478, 0.0001956700871232897, 0.00014035134518053383, 0.00017271432443521917, 0.00020491673785727471, 0.00019984458049293607, 0.00015880219871178269, 0.00025013295817188919, 0.00017984594160225242, 0.00017566862516105175, 0.00019663019338622689, 0.00021371935144998133, 0.00023225124459713697, 0.00018723218818195164, 0.00017520539404358715, 0.00029691640520468354, 0.00015335585339926183, 0.00017469846352469176, 0.0001764993357937783, 0.00016624861746095121, 0.00019888895621988922, 0.00017326853412669152, 0.00019321186118759215, 0.00016387662617489696, 0.00017594054224900901, 0.00017121838754974306, 0.00021591404220089316, 0.00017840249347500503, 0.00017472745093982667, 0.00020900937670376152, 0.00014477912918664515, 0.00019482364587020129, 0.00018264871323481202, 0.00025048205861821771, 0.00022532549337483943, 0.00016822869656607509, 0.00018679737695492804, 0.00021445524180307984, 0.00018803808779921383, 0.00018102482135873288, 0.00015165608783718199, 0.00018670517602004111, 0.0001951127196662128, 0.00022116153559181839, 0.00018661761714611202, 0.00013635431241709739, 0.00022061195340938866, 0.00018237486074212939, 0.00021083556930534542, 0.00024280473007820547, 0.0002306447277078405, 0.00021713902242481709, 0.00021773172193206847, 0.00016793105169199407, 0.00026376664754934609, 0.00024872389622032642, 0.00016145758854690939, 0.00018770503811538219, 0.00028178442153148353, 0.00021705096878577024, 0.00015852414071559906, 0.00022195257770363241, 0.00020488086738623679, 0.00022548969718627632, 0.00018361270485911518, 0.00024941188166849315, 0.00020565444719977677, 0.00015520901069976389, 0.0002428023872198537, 0.00022322400764096528, 0.00025060292682610452, 0.00026781699853017926, 0.00021853276120964438, 0.00018085309420712292, 0.00016641881666146219, 0.0001692177465884015, 0.00021320630912669003, 0.00024299115466419607, 0.00020443231915123761, 0.0001875757152447477, 0.00019033192074857652, 0.00024000341363716871, 0.00014446301793213934, 0.00027108291396871209, 0.00016457465244457126, 0.00014885289419908077, 0.00020452080934774131, 0.00019460704061202705, 0.00016910217527765781, 0.0001973754697246477, 0.00020694624981842935, 0.00019007881928700954, 0.00018462548905517906, 0.00020261552708689123, 0.00020002642122562975, 0.00019020744366571307, 0.00019810086814686656, 0.0001634092623135075, 0.00017558757099322975, 0.00014754415315110236, 0.00021614461729768664, 0.00024985737400129437, 0.00015461436123587191, 0.00023557330132462084, 0.00020465945999603719, 0.00019303106819279492, 0.00015522315516136587, 0.00019036250887438655, 0.00018910344806499779, 0.0001874621375463903, 0.00023853460152167827, 0.00018603571515996009, 0.00014191296941135079, 0.00018349866149947047, 0.00019619350496213883, 0.0002169508661609143, 0.00019892021373379976, 0.00016263413999695331, 0.00016369999502785504, 0.00019915861776098609, 0.00014949997421354055, 0.00020916025096084923, 0.00015859671111684293, 0.00017485460557509214, 0.00018927422934211791, 0.00014706142246723175, 0.00018436982645653188, 0.00020736857550218701, 0.00022723070287611336, 0.00017345907690469176, 0.00016464928921777755, 0.00017036560166161507, 0.00027167008374817669, 0.00020405602117534727, 0.00021369478781707585, 0.00017898590886034071, 0.00020715930440928787, 0.00020535524527076632, 0.00016242900164797902, 0.00018376040679868311, 0.00016496023454237729, 0.00017993936489801854, 0.00015417933173011988, 0.00017925807333085686, 0.00016788420907687396, 0.00018542325415182859, 0.00019370215886738151, 0.00022321230790112168, 0.00017882141401059926, 0.00019340381550136954, 0.00017116067465394735, 0.0001865971862571314, 0.00017865763220470399, 0.00030745042022317648, 0.00019617802172433585, 0.00018031358195003122, 0.00017445714911445975, 0.00019054560107178986, 0.00023788509133737534, 0.00016010276158340275, 0.00020837163901887834, 0.00021391747577581555, 0.00015612732386216521, 0.000352488859789446, 0.00020799832418560982, 0.00021777457732241601, 0.00020425634284038097, 0.00019771046936511993, 0.00017281019245274365, 0.00015583644562866539, 0.00022056390298530459, 0.00018605026707518846, 0.00021502914023585618, 0.00015803347923792899, 0.00020278077863622457, 0.00028699231916107237, 0.00017595684039406478, 0.00014951227058190852, 0.00015978520968928933, 0.00015276024350896478, 0.00019430964312050492, 0.00023335855803452432, 0.00021810083126183599, 0.00018619994807522744, 0.00019449993851594627, 0.00019106893159914762, 0.00031527018290944397, 0.00018150053801946342, 0.00020368045079521835, 0.00016569782746955752, 0.00018888288468588144, 0.00018064623873215169, 0.00017154561646748334, 0.0002250668330816552, 0.00017802027286961675, 0.00017336476594209671, 0.00020515240612439811, 0.00017038293299265206, 0.00028209792799316347, 0.00016347391647286713, 0.00016672474157530814, 0.00021144982019905001, 0.00015717378119006753, 0.00022564278333447874, 0.00016062665963545442, 0.00018928601639345288, 0.00018614617874845862, 0.00024285208201035857, 0.0001729692448861897, 0.00025152621674351394, 0.00022934064327273518, 0.00020449829753488302, 0.00016748929920140654, 0.00019625763525255024, 0.00022049415565561503, 0.00020943577692378312, 0.00020376360043883324, 0.00026948179583996534, 0.00020269780361559242, 0.00019895420700777322, 0.00030666033853776753, 0.00015871287905611098, 0.0002018570521613583, 0.00017074440256692469, 0.00019419471209403127, 0.00018583537894301116, 0.00023595558013767004, 0.00023398264602292329, 0.00014604954048991203, 0.00016846392827574164, 0.00020013921312056482, 0.00024760837550275028, 0.00018980899767484516, 0.00017078538076020777, 0.00022542115766555071, 0.00014438865764532238, 0.00019236636580899358, 0.00016403106565121561, 0.00017471509636379778, 0.0002349685673834756, 0.0001694147358648479, 0.00018217061005998403, 0.00021182348427828401, 0.00019547088595572859, 0.00016043067444115877, 0.00020664483599830419, 0.0001837750751292333, 0.00016638504166621715, 0.00019455917936284095, 0.00017631107766646892, 0.00016571255400776863, 0.00018823922437150031, 0.00024950018269009888, 0.00022478876053355634, 0.00016635119391139597, 0.00017398934869561344, 0.00017455589841119945, 0.00021926878252997994, 0.00016785733168944716, 0.00019449619867373258, 0.00017322412168141454, 0.00021294443286024034, 0.00016440091712865978, 0.00027157788281328976, 0.0001770255621522665, 0.00017447178834117949, 0.00017376297910232097, 0.00017064667190425098, 0.00019669807807076722, 0.00019694757065735757, 0.00016263122961390764, 0.00020579135161824524, 0.00018760646344162524, 0.0001664182054810226, 0.00018511034431867301, 0.00020798156037926674, 0.00017892225878313184, 0.00020404811948537827, 0.00019834990962408483, 0.00017717263835947961, 0.00016919718473218381, 0.00023572664940729737, 0.0001607159647392109, 0.00023912574397400022, 0.00016028797836042941, 0.00018105951312463731, 0.00017066573491320014, 0.00020797377510461956, 0.00022065236407797784, 0.00014856933557894081, 0.00019866706861648709, 0.00020446148118935525, 0.00016512880392838269, 0.00017183422460220754, 0.00029801815981045365, 0.00017294294957537204, 0.00018322239338885993, 0.00020923893316648901, 0.00020397623302415013, 0.00018193766300100833, 0.00018313151667825878, 0.00018903492309618741, 0.00020686980860773474, 0.0001664331357460469, 0.00023712063557468355, 0.0001595772773725912, 0.00029437456396408379, 0.00015923011233098805, 0.00018749863374978304, 0.00017071337788365781, 0.00018407608149573207, 0.00019876430451404303, 0.00016473540745209903, 0.00019494317530188709, 0.00020063261035829782, 0.00018234977324027568, 0.00013571194722317159, 0.00020219935686327517, 0.000238890788750723, 0.00021106837084516883, 0.00024021101125981659, 0.00021969695808365941, 0.00021643906075041741, 0.00023371874704025686, 0.0002384163235547021, 0.00021931494120508432, 0.00019261783745605499, 0.00020232812676113099, 0.00017468121950514615, 0.00016553407476749271, 0.00014190106594469398, 0.00018369589815847576, 0.00022169375733938068, 0.00015788761083967984, 0.00019580521620810032, 0.00017358871991746128, 0.00024391869374085218, 0.00023229781072586775, 0.00020571389177348465, 0.00017086835578083992, 0.00014194782124832273, 0.00022025269572623074, 0.00020353637228254229, 0.00018522552272770554, 0.00019485244411043823, 0.00016467610839754343, 0.00025311752688139677, 0.0001943847892107442, 0.00019484115182422101, 0.00019796696142293513, 0.00015540108142886311, 0.00019333425734657794, 0.00024852558271959424, 0.00017131879576481879, 0.00013585468695964664, 0.00017821326036937535, 0.00023537265951745212, 0.00018268816347699612, 0.00019662616250570863, 0.00017458910588175058, 0.00016214814968407154, 0.00020099018001928926, 0.00017113256035372615, 0.0002023649140028283, 0.00019953153969254345, 0.00029039534274488688, 0.00019232425256632268, 0.00015551612887065858, 0.00032472508610226214, 0.00021091997041366994, 0.00019145781698171049, 0.00018332822946831584, 0.00016256427625194192, 0.00017401645891368389, 0.00016541096556466073, 0.00013275857781991363, 0.00013595340715255588, 0.00020571333880070597, 0.00021269588614813983, 0.0002015712670981884, 0.00017724241479299963, 0.00015646281826775521, 0.00015790956967975944, 0.00017585250316187739, 0.000202377894311212, 0.00014688413648400456, 0.00015828997129574418, 0.00020047339785378426, 0.00019873231940437108, 0.00022710503253620118, 0.00017448440485168248, 0.00018552097026258707, 0.00021057267440482974, 0.00020905135897919536, 0.00022968499979469925, 0.0001881304633570835, 0.00019675401563290507, 0.00017647929780650884, 0.00016636404325254261, 0.00026357010938227177, 0.0001458719780202955, 0.00022467759845312685, 0.00020728196250274777, 0.0002071239723591134, 0.00024172454141080379, 0.00020590610802173615, 0.00015828614414203912, 0.00016809001681394875, 0.00016360773588530719, 0.0001558957010274753, 0.00020949974714312702, 0.00014561718853656203, 0.00021282712987158448, 0.00020322579075582325, 0.00023313258134294301, 0.00020166412286926061, 0.00025061023188754916, 0.00024967663921415806, 0.00021426312741823494, 0.00019039328617509454, 0.00029416184406727552, 0.00018235523020848632, 0.0001889633567770943, 0.00017696402210276574, 0.00019802435417659581, 0.0001927519915625453, 0.0001800713362172246, 0.00023884580878075212, 0.00019180559320375323, 0.00020864402176812291, 0.00016689141921233386, 0.00018682020890992135, 0.00020546359883155674, 0.00022823092876933515, 0.00016061037604231387, 0.00015826630988158286, 0.00016315333778038621, 0.00021507346536964178, 0.00017615039541851729, 0.00019136563059873879, 0.00020635355031117797, 0.00016591387975495309, 0.000197350382222794, 0.00023870052245911211, 0.00021988747175782919, 0.00024229350674431771, 0.00018843829457182437, 0.00017953038332052529, 0.00018959728186018765, 0.00012968911323696375, 0.00017449104052502662, 0.00018399313557893038, 0.00018187219393439591, 0.0001891940482892096, 0.00024013646179810166, 0.00016804844199214131, 0.00020514838979579508, 0.00020174830569885671, 0.00016595829220023006, 0.0001656345120863989, 0.00018725142581388354, 0.00022892442939337343, 0.0001754062541294843, 0.00017677129653748125, 0.00016593013424426317, 0.0001609836908755824, 0.00019415325368754566, 0.00017296952137257904, 0.00017179088899865746, 0.00021831042249687016, 0.00023396985488943756, 0.00014774824376218021, 0.00018202119099441916, 0.00015369537868537009, 0.00021985007333569229, 0.00019176815112587065, 0.00023767995298840106, 0.0001618156093172729, 0.00017703640332911164, 0.00017840065993368626, 0.00024635164299979806, 0.00018318257934879512, 0.00019557861378416419, 0.00018274167086929083, 0.00019295435049571097, 0.00017460848903283477, 0.00020803716324735433, 0.00022557609190698713, 0.00013256374222692102, 0.0001678863336564973, 0.00027570288511924446, 0.00018194607400801033, 0.00021455921523738652, 0.00014383594680111855, 0.00016576473717577755, 0.00017824393580667675, 0.00017054997442755848, 0.00017168780323117971, 0.00015694682952016592, 0.00015879416605457664, 0.000198277150047943, 0.00016513896116521209, 0.00017396404291503131, 0.00025438587181270123, 0.00017102735000662506, 0.00023927248548716307, 0.00022033948334865272, 0.0001901677023852244, 0.00018412902136333287, 0.00019639161473605782, 0.00026924454141408205, 0.00021646510867867619, 0.00017433348693884909, 0.0001849539257818833, 0.00016531723667867482, 0.00015446414181496948, 0.00016318565758410841, 0.00015624308434780687, 0.00017905219283420593, 0.00015734256885480136, 0.00020156687241978943, 0.00017469435988459736, 0.00016662053531035781, 0.00023458751093130559, 0.00016279966803267598, 0.0001610593608347699, 0.00020660946029238403, 0.00025752338115125895, 0.00022257404634729028, 0.00023784942459315062, 0.00022380310110747814, 0.00017944085993804038, 0.00016971597506199032, 0.00014944406575523317, 0.00027469030464999378, 0.0001954648905666545, 0.00019475705630611628, 0.00022294068185146898, 0.00020956654043402523, 0.00018052980885840952, 0.00019870391406584531, 0.00016243223217315972, 0.00026160059496760368, 0.00019697948300745338, 0.00016204665007535368, 0.00013602655963040888, 0.00018909892241936177, 0.00019019102910533547, 0.00023418250202666968, 0.00023798135225661099, 0.00018404866568744183, 0.00015784079732839018, 0.00021696806652471423, 0.00016710897034499794, 0.0001943249226314947, 0.00022953987354412675, 0.000177932990482077, 0.00020523318380583078, 0.0001959257060661912, 0.00017243878392037004, 0.00022180660744197667, 0.00018596903828438371, 0.00016990434960462153, 0.00017616410332266241, 0.00017255301645491272, 0.00018166714289691299, 0.00019767286721616983, 0.00015401204291265458, 0.00019599590450525284, 0.00019807819626294076, 0.00016970728756859899, 0.00018339400412514806, 0.00022018690651748329, 0.00018267286941409111, 0.00020126601157244295, 0.00022389479272533208, 0.00016735091048758477, 0.00018387647287454456, 0.00019180751405656338, 0.00016331420920323581, 0.00020636881527025253, 0.00017400828073732555, 0.00016343638708349317, 0.00021305833070073277, 0.00021235219901427627, 0.00017271263641305268, 0.00016232307825703174, 0.00019168491417076439, 0.00021512439707294106, 0.00021150807151570916, 0.00020341879280749708, 0.0001510943693574518, 0.00024159660097211599, 0.00016080927161965519, 0.00016539683565497398, 0.00022085232194513083, 0.00014282026677392423, 0.00021018799452576786, 0.00021088735957164317, 0.00018151123367715627, 0.00021486384503077716, 0.00017074061906896532, 0.00020162439614068717, 0.00022212485782802105, 0.00018972660473082215, 0.00019122491357848048, 0.00022790346702095121, 0.00016688354662619531, 0.000149978615809232, 0.00015950483793858439, 0.00026626870385371149, 0.00018105903291143477, 0.00024502215092070401, 0.00015246575640048832, 0.00022384714975487441, 0.00021477371046785265, 0.00021479872521013021, 0.00024896528339013457, 0.00020890090672764927, 0.00029021408408880234, 0.00021165663201827556, 0.0001789164962247014, 0.00019263660942669958, 0.0001683263253653422, 0.00019843025074806064, 0.0001876332244137302, 0.00023977486125659198, 0.00017457184731028974, 0.00020571021013893187, 0.00018660828936845064, 0.00018425563757773489, 0.00018241010548081249, 0.0001863702927948907, 0.00017298628517892212, 0.00017669179942458868, 0.00018346686556469649, 0.00018396596715319902, 0.00019784146570600569, 0.00020430618315003812, 0.00021871045464649796, 0.00016559945652261376, 0.00014816044131293893, 0.00016742685693316162, 0.00018056541739497334, 0.00023405965475831181, 0.00020386265532579273, 0.00018431400530971587, 0.00023237224377226084, 0.00016175075143110007, 0.00018158482271246612, 0.00016265641897916794, 0.00021920702420175076, 0.00014988642942626029, 0.00016768972272984684, 0.00025156480842269957, 0.00019510657875798643, 0.00020293031411711127, 0.00022216005891095847, 0.00021036424732301384, 0.00020941976981703192, 0.00015582004562020302, 0.00019018132297787815, 0.00019969117420259863, 0.0002595230471342802, 0.00015163156786002219, 0.00017144353478215635, 0.00014779841876588762, 0.00018575065769255161, 0.00020223059982527047, 0.00024803381529636681, 0.00022224061831366271, 0.00021491324878297746, 0.00015606069064233452, 0.00022125102987047285, 0.00023262576723936945, 0.00026826170505955815, 0.00021376812946982682, 0.00017512898193672299, 0.00022068587713874876, 0.0001501471851952374, 0.00014982813445385545, 0.00017857235798146576, 0.00023488250735681504, 0.00023072486510500312, 0.00018587324302643538, 0.00015084630285855383, 0.00018414741498418152, 0.00020972297352273017, 0.00015101845201570541, 0.00018056332191918045, 0.00018898314738180488, 0.00019704496662598103, 0.00024124739866238087, 0.00020458296057768166, 0.00019009869720321149, 0.00015514777624048293, 0.00020373972074594349, 0.00017989502521231771, 0.00024009664775803685, 0.00015117297880351543, 0.00020388036500662565, 0.00019700347911566496, 0.00016498073819093406, 0.00017902762920130044, 0.00023415106988977641, 0.00013152636529412121, 0.00015427263861056417, 0.00019582851382438093, 0.00017978392133954912, 0.00021345163986552507, 0.00017844466492533684, 0.00014972806093282998, 0.0002252936246804893, 0.00016089875134639442, 0.00023048445291351527, 0.0001661032292759046, 0.00018057100533042103, 0.00017206321354024112, 0.00031632592435926199, 0.00017716178263071924, 0.00014703741180710495, 0.0001414404105162248, 0.00014435524644795805, 0.00019514506857376546, 0.00024647958343848586, 0.00019794442050624639, 0.000210867467103526, 0.00014624185860157013, 0.00021442302386276424, 0.00016027817036956549, 0.00020190111536066979, 0.00021030650532338768, 0.00021732575260102749, 0.00020150867931079119, 0.00017234921688213944, 0.00022293305664788932, 0.00019999621144961566, 0.00020080155809409916, 0.0001904814998852089, 0.00017492090410087258, 0.00022490281844511628, 0.00019561719091143459, 0.00019794801482930779, 0.00017869743169285357, 0.00021901453146710992, 0.00026261081802658737, 0.00019193039042875171, 0.00015385766164399683, 0.00022742612054571509, 0.00022665437427349389, 0.00017938212840817869, 0.00020606578618753701, 0.00015739306400064379, 0.00019986128609161824, 0.00022081963834352791, 0.0002600632724352181, 0.00020313514687586576, 0.00017749660764820874, 0.00016972685989458114, 0.00017675335402600467, 0.00019012897973880172, 0.00017078840755857527, 0.00016578588110860437, 0.00017821237270254642, 0.00022983583039604127, 0.00020774763834197074, 0.00017470649618189782, 0.00022994961182121187, 0.00028101800126023591, 0.00019374518888071179, 0.00019771892402786762, 0.00016470057016704232, 0.00016461274935863912, 0.00018776528304442763, 0.00020004381076432765, 0.00024589739041402936, 0.00015785673167556524, 0.00019210451864637434, 0.00022196094505488873, 0.00024144510098267347, 0.00018137338338419795, 0.00018114315753336996, 0.0002142534067388624, 0.00018195215670857579, 0.00019615625205915421, 0.00017452237079851329, 0.0002054720971500501, 0.00019999394135084003, 0.0001794909912860021, 0.0002335690805921331, 0.00014923709386494011, 0.00023789303668309003, 0.00019191531464457512, 0.00021097558783367276, 0.0002095196396112442, 0.00024841900449246168, 0.00019901499035768211, 0.00019936481839977205, 0.0001875044108601287, 0.00015243759844452143, 0.00025613378966227174, 0.00022703642025589943, 0.00019269280892331153, 0.00014431164890993387, 0.00017850987205747515, 0.00016894334112294018, 0.0001963585673365742, 0.00014502152043860406, 0.00016511842841282487, 0.0001512954622739926, 0.00026243890170007944, 0.00014652078971266747, 0.00019570601580198854, 0.00024087198835331947, 0.00014309499238152057, 0.00017581450811121613, 0.00021582918998319656, 0.00022868765518069267, 0.00014241445751395077, 0.00019776981207542121, 0.00017597147962078452, 0.00016180465172510594, 0.00016748467169236392, 0.0002771557483356446, 0.00021654085139743984, 0.00023531282204203308, 0.00016051909187808633, 0.00018045326578430831, 0.00015776700456626713, 0.00014134071534499526, 0.00023861951194703579, 0.00015955253911670297, 0.0001932871964527294, 0.00020020161173306406, 0.00020316403242759407, 0.00026478347717784345, 0.00020657954155467451, 0.00018545176135376096, 0.0002464371791575104, 0.0001874800946097821, 0.00023028992291074246, 0.00024795476929284632, 0.00017572270007804036, 0.0001484268723288551, 0.00015925230400171131, 0.00020157897961325943, 0.00023952311312314123, 0.00022508771508000791, 0.00015716494817752391, 0.00017142198339570314, 0.00016174984921235591, 0.00017169934289995581, 0.00017002045933622867, 0.0001999567321036011, 0.00019314767268951982, 0.00017972962814383209, 0.00023217880516313016, 0.00019036610319744796, 0.00017681796452961862, 0.00016752607189118862, 0.00020925025455653667, 0.00018164445646107197, 0.00016224305727519095, 0.0001957322092493996, 0.00016388604126404971, 0.00020421513181645423, 0.00020998799300286919, 0.00016872734704520553, 0.00020426808623597026, 0.00021106725034769624, 0.00023159371630754322, 0.00017732284322846681, 0.00016699254047125578, 0.00019161995442118496, 0.0002123172307619825, 0.00018588961393106729, 0.00019390069064684212, 0.00023405604588333517, 0.00023748676176182926, 0.00018308080325368792, 0.0001866316597443074, 0.00022129876015242189, 0.00014932859630789608, 0.00018556739087216556, 0.00020586054597515613, 0.00022350445215124637, 0.00017461844254285097, 0.00020697762374766171, 0.00017376498726662248, 0.00027332134777680039, 0.00021476023539435118, 0.00019216601504012942, 0.00021222027135081589, 0.00020550335466396064, 0.0001615355140529573, 0.00018363572598900646, 0.00018020810966845602, 0.00018546315550338477, 0.00015676439215894789, 0.00016215919458772987, 0.00020375744497869164, 0.00019811821402981877, 0.00022139959037303925, 0.00017114623915404081, 0.00024224570370279253, 0.00017843805835582316, 0.00018742957036010921, 0.00020166857575532049, 0.00023098195379134268, 0.00023291680554393679, 0.00022161199012771249, 0.00019076290482189506, 0.00019861181499436498, 0.00017643989122007042, 0.00019166892161592841, 0.00022676162188872695, 0.0001708139170659706, 0.00017094805662054569, 0.00019422800687607378, 0.00022291448840405792, 0.00015682786761317402, 0.00021819653920829296, 0.00020428172138053924, 0.00017494546773377806, 0.00012478392454795539, 0.00018904889293480664, 0.00015658765914849937, 0.00014153415395412594, 0.00017457561625633389, 0.00018021637515630573, 0.00016004531062208116, 0.00018115280545316637, 0.00016720891289878637, 0.00021253654267638922, 0.0001682398869888857, 0.00022828149667475373, 0.00016173256153706461, 0.00023457106726709753, 0.00017859748913906515, 0.00017977038805838674, 0.00021027798356954008, 0.00015363513375632465, 0.00016893120482563972, 0.00016920940834097564, 0.00019523232185747474, 0.00024234967713709921, 0.00023327983217313886, 0.00016429438255727291, 0.00017505900177638978, 0.00017380286590196192, 0.00020531714835669845, 0.00026674149557948112, 0.00025619586813263595, 0.00020351189596112818, 0.00018934191029984504, 0.00020902424876112491, 0.00017095512885134667, 0.00023652783420402557, 0.00017848490097094327, 0.0001670003985054791, 0.0002008529263548553, 0.00019549955322872847, 0.00026415966567583382, 0.00017292222764808685, 0.00024233221483882517, 0.0002169679501093924, 0.00022087550314608961, 0.0002073350187856704, 0.00017028114234562963, 0.00018301936506759375, 0.00019626473658718169, 0.00025106119574047625, 0.00018734487821348011, 0.00020572578068822622, 0.00017617872799746692, 0.00018421368440613151, 0.00014950994227547199, 0.00018354119674768299, 0.00016857094306033105, 0.00025318469852209091, 0.00020121475972700864, 0.00022235266806092113, 0.00018190930131822824, 0.00019687712483573705, 0.00017405893595423549, 0.00017084996215999126, 0.00016670784680172801, 0.00021531661332119256, 0.00021815103536937386, 0.00019441923359408975, 0.00017061423568520695, 0.00023479829542338848, 0.0001979273947654292, 0.00024987343931570649, 0.00020138987747486681, 0.00019437876471783966, 0.00016335328109562397, 0.00022493932920042425, 0.00024683313677087426, 0.00018740621453616768, 0.00016043247887864709, 0.00017398378986399621, 0.00017172736988868564, 0.00016440368199255317, 0.00018142786575481296, 0.00016208131273742765, 0.00013134874461684376, 0.00017858472710940987, 0.00019379286095499992, 0.00022090734273660928, 0.0001704612368484959, 0.00021136239229235798, 0.00021334867051336914, 0.000148606370203197, 0.00018695827748160809, 0.0001954105100594461, 0.00019427634833846241, 0.00027254407177679241, 0.0001728748029563576, 0.00015384951257146895, 0.00020190462237223983, 0.00019846303621307015, 0.00016730579955037683, 0.00015632662689313293, 0.0001877546455943957, 0.00021793853375129402, 0.00021589957759715617, 0.00016920715279411525, 0.00017829754506237805, 0.00014874870248604566, 0.0001986612769542262, 0.00020830243011005223, 0.00019551884906832129, 0.0001710852375254035, 0.00015253605670295656, 0.00020453738397918642, 0.00019162212265655398, 0.00017837894847616553, 0.00018534742412157357, 0.0001402670459356159, 0.00018658215412870049, 0.00019898382015526295, 0.0001643349532969296, 0.00016503848019056022, 0.00022455024009104818, 0.00015766189608257264, 0.00016982525994535536, 0.00020800557103939354, 0.0001893556909635663, 0.00016056357708293945, 0.00024412067432422191, 0.00015164124488364905, 0.00015836312377359718, 0.00019585916015785187, 0.00018230307614430785, 0.00022785065812058747, 0.00024116455460898578, 0.0002408159343758598, 0.00014851571177132428, 0.00015290563169401139, 0.00016864021017681807, 0.0002059030084637925, 0.00020247908832971007, 0.00024201867927331477, 0.00025309112970717251, 0.0002020572719629854, 0.0001673541555646807, 0.00019584475376177579, 0.00016732169024180621, 0.00019278541731182486, 0.00014729269605595618, 0.0002101049612974748, 0.00018886102770920843, 0.00027146871434524655, 0.00013391610991675407, 0.00021314542391337454, 0.0001516784104751423, 0.00024857470998540521, 0.00017014853074215353, 0.00016832977416925132, 0.00015133290435187519, 0.00019862329645548016, 0.00019619401427917182, 0.00015300400264095515, 0.00018357639783062041, 0.00019400370365474373, 0.0001777550351107493, 0.00018166728841606528, 0.00013915718591306359, 0.00022001288016326725, 0.00021508603822439909, 0.00017496608779765666, 0.00019257712119724602, 0.00018956448184326291, 0.00018176913727074862, 0.00019940856145694852, 0.00021153929992578924, 0.00020076354849152267, 0.0001729663199512288, 0.00019405664352234453, 0.00017710762040223926, 0.00025781287695281208, 0.00020706540090031922, 0.00014941283734515309, 0.00022436415019910783, 0.00021010238560847938, 0.0002311857242602855, 0.00022280635312199593, 0.00020998161926399916, 0.00021131359972059727, 0.00023319781757891178, 0.00017635799304116517, 0.00019221240654587746, 0.00021493040549103171, } };
const TfArray<1280, int> quant7_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[1280*1*1*32] = { 
  /* [0][0][][] */ 69,-46,-48,-34,-93,-40,90,112,19,108,78,-26,-16,11,33,21,22,-3,32,77,51,98,-16,35,-24,-36,-11,98,-30,93,-127,38, 
  /* [1][0][][] */ -22,50,5,127,-71,-40,3,23,5,56,-11,-29,-12,-38,-19,-48,-21,-1,23,-124,-23,-51,31,-34,-36,-57,34,67,-16,-44,17,-57, 
  /* [2][0][][] */ 49,-102,-76,-127,-3,97,-5,-35,-15,-15,62,-36,12,-98,-68,-73,-118,2,-29,121,-1,61,25,-58,42,49,-56,-5,-42,41,-43,123, 
  /* [3][0][][] */ 14,-39,43,-23,-41,-71,41,21,18,-117,-122,-15,-6,-58,-78,-65,37,-5,0,14,33,33,-12,-27,-12,32,-44,64,-65,64,127,-19, 
  /* [4][0][][] */ 113,35,-8,-36,-77,75,-48,-15,7,-1,20,-44,39,40,6,-64,56,54,23,21,50,27,3,-26,-127,-48,9,57,-30,123,28,-28, 
  /* [5][0][][] */ 45,25,-76,-20,-6,35,-1,18,-28,62,-127,-14,28,2,46,10,18,-19,-4,52,57,-40,5,-87,-23,-39,32,40,33,29,9,55, 
  /* [6][0][][] */ 39,-35,-81,-15,48,118,3,-94,-57,-77,-8,-89,-86,23,-127,-71,-50,54,24,77,20,0,18,63,-58,-19,11,-20,6,28,36,7, 
  /* [7][0][][] */ 53,-35,4,90,-99,34,-61,2,70,2,-78,122,-127,-46,10,-24,77,-55,-30,-45,58,6,-5,17,-35,59,-16,98,45,-4,91,-52, 
  /* [8][0][][] */ 43,-7,19,-31,-32,82,67,41,2,-65,41,-127,-17,-49,-57,-50,-91,-91,-91,34,92,70,79,-36,-10,-42,8,16,-34,-121,94,-4, 
  /* [9][0][][] */ -19,35,-111,-58,-64,-11,105,-127,-99,-39,37,-3,-1,-8,-10,-33,-38,-91,89,42,94,-20,-25,-64,-8,-18,-61,99,-2,55,16,7, 
  /* [10][0][][] */ -8,17,-112,26,55,9,6,-17,35,64,16,64,-23,25,24,-22,39,-42,31,-100,11,-39,-49,37,-34,38,-80,54,8,18,-127,-43, 
  /* [11][0][][] */ 28,51,77,7,-46,-28,106,-74,69,118,14,23,67,-5,20,-13,77,11,-118,15,127,-78,-35,2,57,101,-56,-13,56,-18,18,31, 
  /* [12][0][][] */ 85,-92,41,-46,-85,-22,78,-56,-4,36,-50,28,-49,47,-6,-41,-23,-127,-100,90,31,-5,-31,55,38,0,-38,41,8,46,21,-20, 
  /* [13][0][][] */ 23,95,-22,-104,78,127,24,-30,-24,-27,-20,-41,-26,124,3,-10,50,-52,9,35,55,-21,-29,-60,18,-12,-33,-80,26,-69,62,-105, 
  /* [14][0][][] */ 15,-35,44,-11,-74,61,-56,-77,-17,84,-28,127,-124,63,85,12,-39,9,-35,5,-16,123,56,0,-59,112,60,13,-32,-43,-3,46, 
  /* [15][0][][] */ -41,58,-10,-10,75,-4,0,-127,-25,-28,46,-7,12,-18,-26,16,3,34,80,40,40,60,-41,18,118,31,-62,-22,-74,-100,-27,-22, 
  /* [16][0][][] */ -9,-70,22,-33,31,-55,-127,-30,-52,70,36,-24,-29,-47,32,43,9,19,7,-52,-14,15,-68,-9,24,-49,-52,23,-45,78,-43,19, 
  /* [17][0][][] */ -32,9,-10,-61,-17,-4,9,39,12,-87,28,16,-32,44,31,-58,127,-9,-54,-15,-66,49,-16,-9,9,65,-50,32,57,1,18,-14, 
  /* [18][0][][] */ 29,25,-7,-28,59,40,-24,29,-46,47,-77,-55,-1,25,-11,-12,21,-32,7,14,-30,0,96,-4,-53,46,12,-38,125,4,31,127, 
  /* [19][0][][] */ -49,16,-83,91,-1,20,-9,106,5,8,37,-69,122,-73,5,-51,35,-60,-117,17,-127,-114,-31,15,52,-1,9,7,-78,-101,5,77, 
  /* [20][0][][] */ -15,-13,-1,-127,-40,59,-23,-21,44,23,31,11,43,-6,-24,42,42,-19,-11,-5,50,40,-64,30,35,-47,43,-2,-4,20,17,3, 
  /* [21][0][][] */ 77,69,-84,8,111,-81,63,23,-2,-100,127,-68,-49,92,-58,102,63,-88,-12,112,36,-108,-116,-9,-4,-39,-16,42,19,-109,-44,-37, 
  /* [22][0][][] */ -55,-10,-14,33,57,118,52,71,-10,-73,50,34,-20,7,39,27,-65,65,-75,-127,-58,31,54,-106,33,-60,65,117,-61,105,-56,-33, 
  /* [23][0][][] */ 117,19,127,-17,-60,-8,-68,-48,-83,6,-5,59,-61,45,-6,-95,12,-14,-34,-59,12,12,25,70,-19,-6,-83,9,-79,-4,39,-65, 
  /* [24][0][][] */ -48,87,15,-51,-4,-31,-85,-127,21,25,60,-23,7,38,30,3,-104,-37,-36,48,63,85,8,6,30,-8,-69,-37,22,65,-15,2, 
  /* [25][0][][] */ -19,-67,90,17,45,127,17,15,-5,18,67,-31,11,29,-5,12,-127,-46,-6,-58,75,-122,-10,-3,29,43,30,125,-98,1,-121,-4, 
  /* [26][0][][] */ -57,-80,-21,42,26,-43,-32,30,-52,-94,-49,-33,-3,3,26,110,11,-5,37,14,-10,-11,-127,14,-18,-7,6,-69,1,-25,15,18, 
  /* [27][0][][] */ 40,-90,-65,-62,58,-6,3,-39,-12,7,-53,-19,-49,78,-11,50,-100,9,-5,14,85,-44,7,-67,-58,-15,-12,-127,-1,73,22,81, 
  /* [28][0][][] */ -8,-37,-54,-25,-1,46,7,45,-52,35,-113,9,67,-8,-32,-72,-36,-9,53,-4,53,1,-36,23,-54,-72,-22,-32,-21,99,127,-11, 
  /* [29][0][][] */ 0,-74,57,-64,-17,8,45,27,-94,-56,-57,53,35,-18,-4,-54,54,-24,127,32,21,-22,35,38,-20,21,40,5,12,-18,-1,15, 
  /* [30][0][][] */ -6,49,-21,84,46,-49,10,-5,-12,88,-37,0,-17,107,51,-125,-74,-17,-82,-14,-3,91,-36,-7,-127,111,-24,-6,-56,-53,-30,15, 
  /* [31][0][][] */ -76,-34,127,-32,-26,63,-10,-25,-99,-37,55,-41,-21,26,0,-24,-87,79,-2,-22,13,-76,-34,-55,-28,-113,18,24,4,81,-47,88, 
  /* [32][0][][] */ 13,46,67,-10,-32,43,-100,-27,26,-89,3,-70,-10,65,-10,-122,-42,-23,-54,34,-46,-23,-40,-4,-72,-19,-49,68,-40,-127,-42,70, 
  /* [33][0][][] */ -27,-9,-34,-4,-13,28,-41,19,-8,44,-6,-56,-32,-28,-34,-45,72,35,48,-39,-48,25,-32,57,-8,-15,-39,-3,10,-127,78,-12, 
  /* [34][0][][] */ 54,59,18,-54,-3,77,-27,-2,-63,119,127,7,-12,40,22,2,-52,-14,37,-8,-12,49,-34,51,36,23,0,42,-9,-11,-7,-4, 
  /* [35][0][][] */ -127,-1,-25,29,7,8,2,67,-111,21,-55,-62,-51,-37,4,-20,-7,10,68,11,-61,-26,47,-1,15,43,-18,-17,62,12,102,10, 
  /* [36][0][][] */ -57,-47,86,53,-110,46,-25,96,-17,48,-35,-80,-3,21,-1,-111,-55,-30,22,-38,4,36,-16,-47,-127,35,87,60,101,-67,37,-9, 
  /* [37][0][][] */ -44,-12,77,-127,82,-40,-45,-39,-6,20,69,37,-82,-1,-52,8,52,-48,52,-102,-76,42,5,-51,40,3,20,12,72,81,-81,-22, 
  /* [38][0][][] */ 52,127,-19,91,11,-22,53,6,-35,0,-16,-71,12,-110,-32,-56,44,9,29,-10,-74,-61,-2,62,-30,22,77,-38,65,21,69,102, 
  /* [39][0][][] */ -51,5,127,-46,34,-13,-20,-29,8,-17,-1,26,-27,24,-31,46,-74,-100,-66,-36,-27,125,-91,-27,7,18,-55,17,-48,-99,-15,47, 
  /* [40][0][][] */ -45,47,-118,12,-83,75,21,22,-39,-51,-108,24,48,-44,23,4,74,56,-24,44,64,127,5,80,48,6,-21,32,-82,78,-8,21, 
  /* [41][0][][] */ 80,-127,84,66,3,95,17,-103,-49,-45,63,-2,-57,-32,-26,-43,35,-18,-36,21,19,6,-31,-21,14,74,62,-96,120,-38,-75,-53, 
  /* [42][0][][] */ -36,-14,75,97,2,89,75,-47,7,62,15,-88,-105,-31,-97,-93,-87,-33,6,95,-28,2,30,-58,-7,-15,-75,65,51,17,-57,-127, 
  /* [43][0][][] */ 119,61,80,-26,7,8,29,-2,5,28,31,27,106,-84,81,30,-32,127,7,-26,-34,-71,26,-55,0,44,-43,41,-12,-50,3,-8, 
  /* [44][0][][] */ -7,17,20,23,-10,10,56,30,-24,-42,15,24,125,-5,-127,-29,84,-19,26,-4,37,-34,77,18,-35,-20,-117,30,-25,48,86,-111, 
  /* [45][0][][] */ -10,-14,-5,-10,-18,28,6,-7,-127,-44,20,-1,53,12,37,-3,-16,-21,51,-49,48,-62,-14,13,-58,-19,-63,-11,-6,-30,-25,-12, 
  /* [46][0][][] */ -51,20,37,8,51,-40,-17,-64,8,-16,-13,-79,-41,122,-45,-38,18,-35,3,127,-31,6,60,-41,-32,-27,8,83,-81,9,51,38, 
  /* [47][0][][] */ -70,-62,8,98,-35,-72,127,-96,40,18,-55,15,14,32,43,-58,101,7,51,54,4,75,60,-59,-9,28,-125,48,50,87,20,-66, 
  /* [48][0][][] */ -3,-8,-30,-127,5,-7,57,20,-17,63,-31,19,-19,-100,51,-71,23,-19,-50,-56,-25,-18,0,-4,24,-70,37,-4,-6,29,-16,9, 
  /* [49][0][][] */ 39,25,-55,-30,15,24,-33,-2,-14,4,-76,-49,-5,-62,22,42,-21,73,-127,-40,-67,-11,-19,-57,-11,-12,-17,-56,56,-103,-10,-19, 
  /* [50][0][][] */ 86,-42,27,13,-81,-97,-67,104,-13,127,48,21,76,-96,-14,109,38,3,49,20,-24,-11,41,65,25,4,41,43,81,65,-44,22, 
  /* [51][0][][] */ -83,-33,-26,104,-127,-47,28,-19,-17,-36,6,-79,-4,-6,-32,-39,-91,27,53,-97,10,58,-59,-17,-60,-11,-4,-13,-8,-41,107,26, 
  /* [52][0][][] */ 7,-4,11,-95,3,15,0,118,-42,29,12,10,-19,46,55,65,21,-105,-50,42,89,127,47,-39,-107,3,27,-46,-9,60,-9,-45, 
  /* [53][0][][] */ -44,-27,4,9,19,51,-29,-16,109,-39,115,-74,21,-4,24,-101,22,-51,82,49,-83,-124,-6,33,111,-119,-10,7,-19,9,-127,2, 
  /* [54][0][][] */ -58,-41,-78,-90,73,-18,58,52,-93,-83,6,-10,-55,-66,-101,10,55,-73,79,-1,14,120,-69,65,-63,47,9,-46,66,51,-21,127, 
  /* [55][0][][] */ -12,-73,-127,1,-27,-7,-51,-104,-28,-59,-46,-34,46,-46,-2,-12,18,34,25,-35,53,16,46,-32,-37,21,-26,-24,50,-7,14,83, 
  /* [56][0][][] */ 49,35,49,17,10,-1,-64,-88,-5,127,-52,-61,-7,20,-35,-58,-23,57,3,58,10,4,56,-60,10,18,69,-21,-96,-48,-17,66, 
  /* [57][0][][] */ 110,-35,11,7,105,-58,0,50,-97,104,86,-4,61,-14,-87,40,39,-127,7,24,37,-83,25,19,-33,-43,66,9,-24,55,53,4, 
  /* [58][0][][] */ -84,16,-37,69,32,-9,47,42,14,71,-12,28,12,14,27,-78,-61,25,-67,127,16,61,17,-45,20,-15,101,53,20,-65,20,-88, 
  /* [59][0][][] */ -21,22,-41,18,-44,10,-44,-52,1,-91,-8,-34,19,-5,-9,39,-7,-25,-70,-11,68,-26,73,43,-59,55,-51,-68,-127,11,67,-38, 
  /* [60][0][][] */ 22,17,-44,-127,51,84,-5,-51,-19,94,29,-10,-64,-24,70,51,-5,53,77,-35,24,102,-115,2,-74,-35,31,27,70,-96,126,52, 
  /* [61][0][][] */ -102,65,62,-62,18,89,-10,-101,-36,-89,-70,59,50,127,-13,111,49,-17,-2,2,-52,-7,-53,-26,-8,-39,-39,-64,-82,24,42,46, 
  /* [62][0][][] */ -47,2,13,32,-29,-11,29,38,10,-18,76,105,11,-25,127,-1,-22,-119,-57,-40,36,15,49,3,-12,-106,-30,50,-68,11,-6,26, 
  /* [63][0][][] */ -31,-120,-8,-44,-13,21,-121,-24,-52,-48,8,-62,-47,-80,-52,-111,-90,-85,-114,3,19,-127,-30,-124,65,63,-5,-61,77,-42,27,97, 
  /* [64][0][][] */ -29,-44,-56,30,31,47,-27,-46,-10,-127,-49,-30,-54,-17,-6,39,23,18,-24,-1,55,67,2,8,-43,41,56,54,-8,47,64,1, 
  /* [65][0][][] */ 3,23,18,22,10,23,29,24,-23,26,-12,73,29,-10,-64,-75,-39,-1,-30,54,-60,2,-34,23,-31,-60,-18,127,8,-109,38,-8, 
  /* [66][0][][] */ -19,-21,-30,82,-121,-58,73,62,21,-72,76,-79,20,-43,127,72,-17,-29,47,18,43,90,-44,22,69,-44,52,64,-1,-102,3,8, 
  /* [67][0][][] */ 50,55,114,-66,58,20,-120,-71,-32,32,-38,120,-127,116,6,39,16,-67,9,6,1,-35,1,-38,-73,-60,-20,-49,2,-39,40,105, 
  /* [68][0][][] */ 2,-101,82,-9,66,-46,-11,-27,67,-69,-45,8,-32,19,60,-7,43,-1,42,5,-6,-34,-7,-89,40,13,86,1,127,-9,18,37, 
  /* [69][0][][] */ 40,-20,-117,-61,-98,18,41,-7,29,-33,72,13,45,-12,-15,8,-11,24,82,-26,-38,13,96,9,-22,-127,39,25,-99,26,20,53, 
  /* [70][0][][] */ -52,48,-45,-64,41,26,-16,-70,-56,-18,-46,36,54,-89,115,72,-59,-20,8,-36,51,54,-127,-51,56,27,-32,-56,45,25,-49,24, 
  /* [71][0][][] */ -28,53,-27,-34,-16,99,-127,-4,72,69,-49,39,66,13,50,-64,-116,-48,-76,-54,-48,-70,5,-42,20,-51,-12,-6,-68,80,-43,83, 
  /* [72][0][][] */ 53,-111,-97,22,4,9,-127,87,-53,44,-9,2,-24,13,39,-94,126,-35,-40,-49,-63,39,-55,-101,101,4,18,2,30,-17,127,127, 
  /* [73][0][][] */ 26,52,-47,-30,-63,22,37,1,-10,-52,37,-4,7,10,-9,-49,-16,44,-42,-50,7,-10,-30,-34,-127,21,-32,-9,21,-53,-65,18, 
  /* [74][0][][] */ 40,83,34,14,-12,34,-93,-80,38,21,13,-49,-27,21,-67,36,22,18,-75,-34,30,-41,3,-20,42,37,-2,79,-1,-127,-34,40, 
  /* [75][0][][] */ 11,-47,41,37,50,16,-30,82,38,101,-48,63,-120,48,-125,4,10,-15,68,68,80,127,9,-23,-103,34,-33,-15,75,43,-50,39, 
  /* [76][0][][] */ -5,69,39,-25,127,-27,-43,59,68,95,30,6,-22,-110,-109,61,82,70,81,108,-57,91,21,35,-22,28,18,-30,-21,-19,-12,-29, 
  /* [77][0][][] */ 57,-27,-23,-22,-70,8,-26,-25,-17,93,54,-16,-2,-6,-25,-127,68,9,-70,-1,-9,21,-25,42,-26,67,-20,-48,-1,-56,0,-22, 
  /* [78][0][][] */ 35,-15,25,-28,-29,79,-42,67,46,46,52,-88,7,-85,-18,-21,-59,118,75,16,-53,3,1,-9,41,-72,22,34,29,-42,127,-59, 
  /* [79][0][][] */ -89,62,-12,-38,-96,44,77,-53,-21,4,87,1,100,-25,-94,-38,23,-21,-127,4,-27,46,-3,-28,-40,46,-53,-17,30,29,82,-10, 
  /* [80][0][][] */ 20,-56,-62,67,11,-83,-105,17,36,-101,60,94,24,58,91,10,-9,79,-109,48,118,2,-127,-60,30,47,-8,75,113,85,13,-59, 
  /* [81][0][][] */ -28,-80,-14,96,-109,-122,-64,61,23,-3,-44,11,26,-66,-37,23,-64,-31,-127,-50,76,-17,61,45,-47,86,-49,31,-45,110,7,-10, 
  /* [82][0][][] */ 4,-100,-127,-1,100,62,64,-57,103,-27,87,-18,-34,80,67,-45,-48,-14,26,20,11,-8,-21,-109,21,-23,54,-79,19,19,21,47, 
  /* [83][0][][] */ 6,80,6,-4,-35,32,14,-53,-127,-5,9,-4,-5,83,4,43,75,19,14,-109,7,5,-2,-11,-18,-125,-42,18,-9,-74,63,-108, 
  /* [84][0][][] */ -7,-24,23,34,-7,5,-2,19,-81,30,-49,35,-58,-27,-23,-62,-38,-33,49,23,60,0,-6,-10,6,34,-127,-9,8,-62,19,16, 
  /* [85][0][][] */ 31,-73,13,-11,-91,2,57,-63,-88,103,46,-19,62,41,-23,57,45,-37,-22,-35,5,127,51,-59,-24,-4,-16,5,-3,49,78,-78, 
  /* [86][0][][] */ 77,-34,117,-81,-37,41,5,-19,4,-84,-50,-41,-94,-15,32,74,-53,0,-6,-31,-127,-18,29,27,90,109,23,10,3,-18,-4,-70, 
  /* [87][0][][] */ -43,26,54,58,-127,87,107,84,-26,-31,14,22,-41,-27,20,38,82,-42,-33,12,4,-28,40,51,-33,-53,-19,-72,9,20,59,-9, 
  /* [88][0][][] */ 26,81,-107,-55,-20,4,-33,50,32,84,57,-56,51,27,80,-100,46,126,4,-25,-108,-127,-86,-63,51,-16,-42,26,-115,-58,7,-78, 
  /* [89][0][][] */ -92,16,14,-27,-52,22,36,-37,49,-43,70,3,-55,11,-95,13,30,-82,16,48,-16,-127,2,-61,1,-59,62,17,25,-14,-99,-28, 
  /* [90][0][][] */ 42,-17,-65,-8,-23,12,2,-23,-2,41,-47,7,-53,-31,-29,31,6,28,42,48,-30,-41,-100,127,70,-126,127,14,-17,-46,13,-111, 
  /* [91][0][][] */ -45,40,52,11,-45,41,28,-29,100,-9,-36,-39,-92,-22,88,1,11,86,-32,-34,62,-60,7,-117,-122,56,59,-56,13,8,-16,-127, 
  /* [92][0][][] */ 39,9,7,75,-37,-24,1,7,-56,-13,-39,-64,13,37,127,-16,0,47,-16,14,-12,-4,37,54,-43,24,27,-34,-32,110,32,67, 
  /* [93][0][][] */ -11,94,-3,10,-24,26,-4,62,127,41,-16,-31,-81,-61,1,-23,-35,3,79,4,-15,115,26,-13,54,-27,99,67,-35,34,-18,-65, 
  /* [94][0][][] */ -48,-103,63,-43,64,35,127,21,-37,30,-73,-5,115,85,-14,15,-15,11,31,-79,58,45,-98,108,112,27,27,57,73,-12,-27,70, 
  /* [95][0][][] */ 73,-13,-44,37,-60,36,-59,-48,-64,27,62,10,72,1,-22,24,-127,-10,63,-99,53,-47,-1,69,-97,-24,20,-40,5,19,-71,48, 
  /* [96][0][][] */ -28,2,-41,-59,15,-19,19,64,127,25,27,23,-6,-17,-17,-20,-87,-37,69,126,-86,-57,-25,-18,-54,34,42,-21,25,63,-121,50, 
  /* [97][0][][] */ -73,1,64,-31,29,-77,-60,-127,-40,55,37,95,13,-10,-23,26,-10,63,-50,-28,-42,14,-60,18,-56,26,5,6,-45,-28,-83,-91, 
  /* [98][0][][] */ 95,-38,37,-17,-10,6,1,-2,63,91,40,-19,-36,7,-2,17,-15,-27,33,46,46,-74,3,-59,-6,84,12,-57,-3,127,54,32, 
  /* [99][0][][] */ -14,42,-29,10,-61,5,39,-10,-40,-10,2,-114,-71,39,-12,-114,-41,101,-86,-44,0,-24,-51,-109,18,-31,-24,-26,-127,93,-85,-72, 
  /* [100][0][][] */ 13,-64,-11,127,24,-75,21,-11,115,8,-43,-79,-42,-46,-42,-33,-61,-34,-62,26,87,95,-37,70,-4,16,-22,5,-1,82,80,-16, 
  /* [101][0][][] */ -64,-5,-37,-44,10,41,-36,27,-10,-34,12,14,38,-31,50,33,-95,16,32,-71,-21,-56,-4,127,-93,55,-97,13,-24,-16,24,-50, 
  /* [102][0][][] */ 97,-105,5,16,16,-8,44,-17,67,-17,90,-92,-43,17,62,-44,-7,16,-7,15,101,-16,-51,-43,37,111,-64,79,-10,-65,127,71, 
  /* [103][0][][] */ -127,-53,-63,105,-76,-61,-56,35,16,-14,-99,-69,-45,-16,-45,-15,7,44,-1,-22,25,-7,-33,76,-30,18,47,1,-29,11,22,-1, 
  /* [104][0][][] */ 60,44,-33,54,83,81,53,-49,-118,-88,-49,-62,69,-71,-13,22,29,-49,13,38,-4,-43,68,-22,21,27,37,-127,-2,-21,98,52, 
  /* [105][0][][] */ 10,47,-3,-103,7,-27,-39,-34,-27,-11,-36,5,65,15,4,-60,58,13,15,-10,3,-16,-8,-17,-13,8,37,107,69,-64,-127,50, 
  /* [106][0][][] */ 8,-71,-14,11,-29,42,-10,-2,-10,34,51,-7,2,33,127,37,-8,13,-19,3,13,32,1,-51,72,-60,-56,33,52,-36,-61,44, 
  /* [107][0][][] */ -94,54,86,31,-62,-17,-14,-12,-88,-68,46,-17,-48,-58,-127,32,-39,-74,54,125,-13,47,-27,-12,43,-26,-82,-87,12,85,20,-18, 
  /* [108][0][][] */ -76,-59,-53,42,-27,-51,28,-80,32,-25,24,9,-14,127,-32,80,-6,-95,62,6,-66,-12,-47,48,19,3,4,102,-24,-61,-9,1, 
  /* [109][0][][] */ 86,-127,41,-35,-22,-25,82,-66,-21,-5,31,45,-52,-62,16,-20,-7,-23,-63,2,68,-126,-83,73,-30,-4,-38,-21,101,9,28,21, 
  /* [110][0][][] */ -45,-29,56,43,-63,-126,-15,9,14,49,92,-8,21,-109,-48,29,-10,46,4,-59,-127,6,-32,7,-48,59,-25,36,44,0,-9,110, 
  /* [111][0][][] */ 7,50,-37,26,-41,66,55,-26,2,27,-52,-79,122,-3,44,54,-92,25,46,-23,-55,23,19,-32,110,-66,127,7,-23,69,30,16, 
  /* [112][0][][] */ -21,0,-36,55,-9,-33,-28,-38,-38,-32,-6,-25,-33,78,17,-31,17,-24,1,-17,-51,-127,-38,-47,-92,-45,-71,-10,11,14,-16,-38, 
  /* [113][0][][] */ -41,-75,90,19,42,4,7,-66,51,-17,-47,-44,-49,-33,-21,-17,46,-50,-127,24,8,10,28,-31,96,-20,11,-21,-12,21,41,1, 
  /* [114][0][][] */ 28,6,-58,13,27,8,-21,72,6,6,51,-13,-52,-19,-2,-19,-17,-7,-55,32,-18,-20,-61,-17,-38,-34,9,39,-79,28,127,-51, 
  /* [115][0][][] */ -4,-88,1,-8,-37,127,-44,-6,-28,16,-74,2,-17,10,19,-18,72,-27,-116,18,27,83,-25,6,31,-21,32,-20,-17,-6,0,14, 
  /* [116][0][][] */ 25,-127,-3,32,-97,77,-9,-21,-13,-126,26,-12,34,-56,79,95,-10,25,48,12,-12,-3,35,22,-70,-26,49,109,-62,-57,-45,0, 
  /* [117][0][][] */ 79,6,5,-4,-27,8,61,17,33,20,-36,20,24,11,-6,-79,-45,52,23,-24,-16,34,26,9,-21,-127,-39,-17,42,52,40,-19, 
  /* [118][0][][] */ -13,-3,-82,-50,-42,56,0,61,88,-11,10,-19,-65,-37,48,-26,71,112,2,11,71,-74,33,11,-10,-127,-30,107,30,40,-55,-13, 
  /* [119][0][][] */ -19,22,43,100,-127,-24,1,4,69,22,-7,-80,15,-13,65,-65,18,-17,7,-43,-55,32,19,38,23,-13,50,-9,-4,44,62,-11, 
  /* [120][0][][] */ 39,40,-20,74,-20,-64,113,-32,41,-79,-52,-66,-45,2,-32,-69,127,59,-57,-10,-10,62,-64,42,10,-63,99,-96,-51,58,25,-15, 
  /* [121][0][][] */ -53,-56,7,-44,40,81,-15,8,-94,-17,-36,6,-17,16,-13,57,-3,28,31,-6,61,50,46,-36,28,18,2,127,18,83,3,44, 
  /* [122][0][][] */ -55,-27,-20,-6,-83,127,11,69,-1,7,56,-8,33,22,-21,0,-11,38,72,8,-6,29,12,-73,77,50,90,1,-41,-26,5,52, 
  /* [123][0][][] */ 20,61,-86,-9,-92,53,-24,47,-74,-36,19,-119,-25,37,-47,18,-127,64,86,-44,-1,-50,8,66,-22,27,-72,80,-15,-99,2,7, 
  /* [124][0][][] */ 43,-15,-3,-4,-35,-21,-37,-127,19,-38,-89,-20,22,-42,-6,-6,7,-8,-8,49,-72,-35,-3,37,-49,-86,-29,-42,4,26,53,-30, 
  /* [125][0][][] */ -70,-31,1,-81,-44,-74,-42,6,-86,-83,16,60,-91,21,-127,27,33,63,-115,-8,13,53,-90,-50,10,102,2,62,-8,-4,37,-37, 
  /* [126][0][][] */ -127,-3,-83,-7,57,57,37,-3,-4,-48,-113,125,-53,79,3,37,-96,-87,-5,-20,-47,11,-89,59,-20,-4,84,68,-7,23,-48,102, 
  /* [127][0][][] */ 36,-42,14,-48,35,70,39,16,51,-78,-67,52,47,-23,19,-18,-3,-43,16,-84,35,31,33,59,-23,-31,32,-4,127,-12,1,-55, 
  /* [128][0][][] */ -27,63,-53,-122,116,48,70,127,27,10,-14,25,18,-81,48,-6,-50,126,-44,56,27,-15,66,10,-87,5,-87,67,-44,48,-114,84, 
  /* [129][0][][] */ -14,2,-19,-31,23,11,-51,-7,18,-60,25,41,-21,107,-10,-5,-54,-52,67,67,-50,-18,-62,-5,-66,2,-127,-56,27,-37,-78,-26, 
  /* [130][0][][] */ 15,-6,-127,-51,-20,34,-92,11,-84,-11,19,-36,88,-5,-3,7,-86,10,-65,33,73,9,48,-9,-15,-84,-64,95,-71,81,18,114, 
  /* [131][0][][] */ -60,-16,-79,-16,-1,-30,116,-53,-50,13,6,-11,-78,14,9,-10,30,-14,35,7,45,41,66,67,53,127,-39,32,74,-33,-35,17, 
  /* [132][0][][] */ -51,-18,20,-53,-19,45,46,-101,79,23,77,-15,-13,-2,-50,48,-95,127,-56,23,-108,-56,-44,17,-16,12,5,-42,-71,5,20,83, 
  /* [133][0][][] */ -41,102,99,25,127,18,-40,-84,-70,49,59,10,-48,50,-8,-85,-11,69,-85,-17,-72,-73,24,14,6,21,84,-18,-20,-47,-12,61, 
  /* [134][0][][] */ -124,79,-16,-32,-62,74,17,-40,61,109,-25,-1,10,-15,22,-50,-9,-127,-27,-117,-52,1,-27,41,3,28,-23,20,-102,19,4,-40, 
  /* [135][0][][] */ 26,24,-31,-72,-22,-66,32,15,16,-98,-75,-92,-53,22,16,10,78,46,-12,-51,-23,-20,-2,5,-100,22,-12,-18,-127,8,73,90, 
  /* [136][0][][] */ 49,72,-57,-51,-17,-45,-6,-14,15,-55,34,34,-9,18,14,9,-13,-53,-84,28,-127,52,21,1,-43,-85,-17,-26,44,0,42,-92, 
  /* [137][0][][] */ 43,14,-5,-104,-96,81,77,-99,-83,-103,60,102,127,-51,-69,44,-120,39,11,-21,12,64,20,54,-50,94,-30,-31,-17,-28,-19,-20, 
  /* [138][0][][] */ -44,39,15,40,63,-2,21,25,-4,-37,53,-65,-58,-53,71,63,-45,-31,83,127,-26,-2,98,30,43,-70,25,110,-34,6,-49,34, 
  /* [139][0][][] */ -72,-56,1,31,13,-43,0,-77,0,4,23,-16,18,3,20,127,-36,63,63,-87,-25,119,-10,-38,8,-83,-90,-61,6,-102,-44,-6, 
  /* [140][0][][] */ -13,-31,-11,69,-96,-12,18,24,11,3,-55,-1,-13,26,29,-1,78,-63,73,9,18,-54,15,43,13,10,22,53,42,0,127,3, 
  /* [141][0][][] */ -127,17,50,31,-40,-61,-77,7,37,4,-16,-23,-24,-93,-30,-49,-12,-7,-9,-51,-26,79,3,37,-1,-3,-14,59,25,-60,55,40, 
  /* [142][0][][] */ 107,6,-25,-29,-25,-33,-14,59,89,8,-123,-32,-22,44,38,4,-37,39,-48,27,-75,49,18,-18,-22,-127,15,82,38,15,76,-25, 
  /* [143][0][][] */ 54,-28,-40,-101,13,-29,17,21,127,4,19,-53,46,7,25,-49,-27,-65,-126,-58,-40,36,-17,114,-17,-84,-51,82,7,0,69,-47, 
  /* [144][0][][] */ -4,55,42,119,19,75,-23,127,-15,-16,-33,14,12,6,13,74,2,-65,-8,70,53,-45,90,-95,-59,24,-74,59,-81,60,107,26, 
  /* [145][0][][] */ 4,42,97,44,19,-46,-48,26,-13,-7,-18,-22,108,-35,-98,64,53,2,14,2,-100,-57,76,49,26,30,-89,104,-127,-32,28,-3, 
  /* [146][0][][] */ -127,-17,-6,-67,12,13,-2,-64,-36,25,-3,12,-82,42,-35,24,-34,-26,10,11,20,63,-3,-11,-11,-39,-5,-32,-5,-19,56,-71, 
  /* [147][0][][] */ -34,42,46,-3,-12,97,55,-53,13,23,-41,23,-60,127,95,18,19,15,11,-35,23,9,-31,-43,-13,-74,-30,-17,5,22,13,7, 
  /* [148][0][][] */ -83,-16,-23,127,-22,-28,-45,55,111,6,9,33,42,-81,-53,-28,-123,-50,-57,37,-36,39,-21,42,-32,-4,36,42,80,41,-40,75, 
  /* [149][0][][] */ 68,59,-26,80,21,12,-7,-22,8,24,-31,45,57,-61,44,-29,49,81,-72,-86,-18,28,22,8,-127,-36,-44,-32,-7,65,31,23, 
  /* [150][0][][] */ 121,-112,90,7,18,46,-32,-30,-37,-15,-74,20,-15,3,-50,-43,-24,18,-60,-25,-73,-96,127,-21,-46,48,-21,-116,-83,-1,-24,-76, 
  /* [151][0][][] */ 48,40,-29,87,-14,-89,9,-114,9,35,-93,32,-38,66,-83,-46,-16,-89,-22,-44,-83,34,127,80,-107,-31,-98,-82,-93,-61,66,37, 
  /* [152][0][][] */ 7,51,15,-63,44,-3,-12,25,27,57,63,-7,-11,18,-2,48,2,41,42,15,-107,14,-20,-41,50,13,-68,34,-62,-127,-22,-69, 
  /* [153][0][][] */ -25,-76,-30,-34,38,6,53,-45,-8,-26,17,-48,-52,-30,-19,-26,127,65,64,20,51,16,-69,72,19,11,-62,-4,-37,52,31,-68, 
  /* [154][0][][] */ -107,76,-74,-51,-127,72,-71,26,18,18,28,-46,68,36,83,77,-61,4,31,3,-98,42,63,87,2,-91,49,-36,67,-32,39,-26, 
  /* [155][0][][] */ -53,-12,-26,29,-63,98,-51,15,60,86,-22,7,-127,38,-49,-45,-5,-24,37,24,-13,-69,-27,-11,11,41,57,-5,18,-89,-28,-6, 
  /* [156][0][][] */ 28,47,-26,-44,-8,2,39,15,22,21,29,5,37,36,24,13,-127,11,-73,67,-21,-91,53,10,78,46,38,53,-41,47,-46,-51, 
  /* [157][0][][] */ -26,-65,-44,26,40,-62,12,79,-62,-67,-85,-25,62,-44,-22,61,-112,34,-41,119,-97,18,10,47,21,37,-20,-52,-77,-11,94,127, 
  /* [158][0][][] */ -87,37,21,-93,9,32,-17,42,31,-51,-53,-10,-67,-20,58,41,18,45,-32,-10,9,-39,-4,66,39,-69,-46,-44,-127,67,14,14, 
  /* [159][0][][] */ 44,8,-21,-20,-12,127,62,-23,7,25,10,-31,2,-76,64,4,16,15,-73,21,57,-62,43,-57,69,18,-5,-24,10,50,-8,-20, 
  /* [160][0][][] */ -101,101,48,1,-27,62,35,83,-2,39,-22,53,-35,28,-70,105,59,6,-34,-62,-111,-27,-126,3,-84,-27,121,127,26,109,56,-82, 
  /* [161][0][][] */ -34,-16,-74,15,-8,27,-11,-10,-112,25,6,34,100,69,-55,-6,78,-31,12,21,127,-47,32,18,46,61,14,1,60,-98,-68,4, 
  /* [162][0][][] */ -127,-9,55,-26,12,11,39,-19,20,33,-26,32,7,60,49,-49,59,-31,-47,18,-51,20,50,57,68,20,-6,8,50,-32,-57,0, 
  /* [163][0][][] */ -79,-53,34,87,-104,-64,-2,21,50,-86,-16,6,-17,64,-1,20,-4,-66,-30,37,65,71,-12,100,-83,-22,-127,64,26,-55,-15,37, 
  /* [164][0][][] */ 35,-45,-66,-32,125,-8,-29,103,79,-3,127,-66,-100,-51,-29,41,-74,-26,13,-83,-73,-28,-95,17,28,67,-27,-12,-79,-63,-43,115, 
  /* [165][0][][] */ -127,-35,26,2,-9,92,-81,6,22,3,-79,-38,-54,50,-23,24,46,-44,-54,-33,21,-7,26,-42,-87,-20,31,-20,-69,38,-65,-41, 
  /* [166][0][][] */ -16,36,-20,16,48,5,1,4,9,48,9,-63,-18,-46,41,36,23,-21,70,5,-22,39,1,127,-35,30,19,41,-24,-52,3,-21, 
  /* [167][0][][] */ 59,-55,38,-27,86,-23,46,48,24,-8,45,73,-9,-61,-39,127,-33,-48,-3,-15,82,-2,18,-47,102,9,-33,36,87,-14,-53,-69, 
  /* [168][0][][] */ -46,47,76,0,-59,-17,-73,-107,37,24,40,6,-86,110,109,-51,-8,127,71,-28,-69,-56,-100,127,-57,-55,-60,19,-100,-54,-17,-18, 
  /* [169][0][][] */ -54,-120,-29,57,-90,-57,8,-51,-45,1,32,-91,18,17,127,54,78,7,47,-4,-45,-16,54,41,-54,-77,-58,22,-39,37,67,24, 
  /* [170][0][][] */ 26,-42,93,-14,-127,-38,8,-12,-66,-26,-30,-84,-35,25,15,-13,71,-62,-63,-47,-31,41,-1,-8,-19,59,61,28,-88,56,23,29, 
  /* [171][0][][] */ -12,-41,-16,6,27,40,12,-97,55,-73,35,-8,36,36,-21,-38,39,-29,79,2,27,15,-3,15,56,-86,-37,-66,0,-65,-41,-127, 
  /* [172][0][][] */ -61,-46,13,73,6,10,-13,-83,51,50,50,47,96,28,108,127,21,33,36,32,-29,21,-83,67,-3,49,-88,-65,-34,-56,38,-94, 
  /* [173][0][][] */ -6,40,-63,-21,43,-20,10,-67,5,127,21,36,-8,39,12,25,0,77,38,14,-18,-23,-25,3,-9,-50,-42,18,14,-21,57,14, 
  /* [174][0][][] */ -51,-56,0,56,-41,-75,46,-127,-69,-19,-58,12,-3,-15,-16,-18,110,-29,44,-64,-10,43,-68,102,-26,72,60,10,-14,30,90,38, 
  /* [175][0][][] */ -26,26,-16,-40,50,17,-41,46,-94,127,23,55,-92,83,-3,17,-9,52,-74,36,57,9,78,-34,-99,-17,-47,37,-37,14,-4,-85, 
  /* [176][0][][] */ 127,-30,-10,63,1,17,66,33,15,-49,-60,-37,5,-66,-81,-2,38,-75,6,-5,31,-67,8,0,-22,-12,106,-40,11,13,-23,10, 
  /* [177][0][][] */ -13,-16,-31,-44,-28,-10,-34,13,-127,19,-2,2,-18,-40,11,80,40,76,-38,126,-20,23,-47,10,-92,46,30,11,-57,-34,-11,-19, 
  /* [178][0][][] */ -88,-33,64,30,-42,25,-23,19,99,-42,18,-66,27,-11,-10,3,127,47,-37,-18,18,57,44,-38,-36,7,36,-26,-36,-17,-3,27, 
  /* [179][0][][] */ -4,75,127,33,-1,-4,13,-120,4,-49,35,27,0,36,-43,26,-26,-44,0,-35,-20,103,44,-37,17,31,92,37,31,-12,20,-110, 
  /* [180][0][][] */ 66,-50,-6,30,-75,72,-34,95,94,-20,22,-18,-81,-71,-100,-28,19,-35,-23,-24,82,22,-84,107,30,127,33,100,83,16,33,4, 
  /* [181][0][][] */ -43,-4,-28,-33,-19,-20,-25,28,-21,-26,61,-8,32,-32,-29,23,8,24,19,36,28,7,-3,38,-26,5,-11,10,10,-19,127,58, 
  /* [182][0][][] */ 73,-73,29,89,60,126,-38,-19,-44,23,-25,13,13,-61,-12,-106,36,-97,115,-22,-52,-36,44,112,127,0,-3,64,-57,19,1,-8, 
  /* [183][0][][] */ -26,-127,20,3,-32,39,-1,-30,-87,-60,4,127,-27,-37,-108,-25,54,-36,-36,-108,79,45,24,-28,4,-103,39,43,27,87,-25,58, 
  /* [184][0][][] */ -28,-54,73,30,62,-19,84,-31,39,10,-36,-27,8,35,-89,-110,52,-8,-40,120,-27,-7,64,78,12,127,-74,79,-83,-31,89,-18, 
  /* [185][0][][] */ 23,-73,-42,52,-52,-18,-57,-29,42,63,66,-7,-31,-98,-106,-102,-33,74,48,-61,39,68,-112,-13,-2,-72,127,45,-46,3,-122,-53, 
  /* [186][0][][] */ -4,-12,-2,7,-111,3,-43,-47,-15,11,1,-21,-13,13,74,-66,-127,15,44,-55,47,-39,-31,41,-14,-17,-20,88,37,16,62,-49, 
  /* [187][0][][] */ 35,-6,43,13,47,-38,-16,9,-48,-91,8,-47,-54,62,26,-43,62,-85,-85,54,-62,84,62,37,49,89,-100,14,-23,-4,-62,-127, 
  /* [188][0][][] */ -43,-127,-124,84,58,28,46,-17,43,63,-23,17,44,27,-14,-36,-57,-75,0,-82,-61,27,41,-12,-6,3,-34,-16,-39,-2,105,-109, 
  /* [189][0][][] */ -56,35,-23,-105,21,-22,-25,-55,4,6,58,-72,-127,11,-6,-15,43,75,-30,80,-108,-8,-78,6,104,32,44,98,1,-4,29,31, 
  /* [190][0][][] */ 23,-29,-29,-63,88,-3,-124,19,64,-42,23,-60,-32,-84,90,-33,-18,21,-111,44,16,23,-23,19,127,61,79,-2,-4,-69,5,-44, 
  /* [191][0][][] */ 52,-1,30,-52,27,-55,-63,10,-45,-55,-68,-10,5,122,81,-112,55,-127,55,-51,-14,66,29,62,-116,-70,28,-3,37,-34,-92,106, 
  /* [192][0][][] */ 29,-58,38,84,31,34,3,31,24,-6,-37,-14,-15,-127,43,51,44,4,24,-33,16,9,30,-18,-24,-37,67,-79,77,-18,-43,2, 
  /* [193][0][][] */ 14,98,-22,7,-15,49,66,70,-12,-29,-65,-39,-24,-18,-30,-53,-51,19,-69,25,9,20,40,-88,-47,44,-33,38,98,35,127,75, 
  /* [194][0][][] */ -92,120,-29,101,23,12,-5,18,-54,-39,-15,92,6,-41,2,26,-85,39,-25,4,41,-26,-40,0,-1,13,-90,127,-17,47,-43,-80, 
  /* [195][0][][] */ 13,54,-37,44,-2,-17,111,-22,23,27,5,11,25,-46,4,34,-81,64,38,31,12,127,-9,-82,58,37,49,86,25,-16,76,-17, 
  /* [196][0][][] */ 122,-68,-23,113,9,-127,32,14,-88,-117,11,121,-99,55,-8,-21,-4,7,33,87,34,-96,-81,-5,11,34,-38,82,116,-32,2,27, 
  /* [197][0][][] */ -11,-8,23,5,61,-42,-11,-82,16,3,-105,21,-94,5,5,-9,-37,-17,-9,105,84,29,18,-4,-94,44,-127,27,-15,72,61,15, 
  /* [198][0][][] */ 15,5,-82,78,61,-3,56,-67,-27,46,2,66,-69,-77,-50,85,34,66,-19,-53,53,-22,-19,-44,-56,127,6,114,-84,37,-49,-3, 
  /* [199][0][][] */ -43,-20,18,-34,29,13,-127,-12,-32,-31,25,-23,17,35,-54,-68,-36,-82,-31,-24,27,37,-6,-68,5,-6,-14,-4,44,40,30,-85, 
  /* [200][0][][] */ -40,-65,2,31,-73,18,-35,13,-53,25,17,-7,-14,-21,34,-12,-6,-46,19,2,49,38,100,-19,62,-52,62,-81,3,127,2,22, 
  /* [201][0][][] */ 32,127,11,-12,117,65,37,72,-28,37,-111,-34,36,-56,68,-98,37,-13,-8,-80,-20,92,42,-34,-40,102,-26,-54,-34,-11,75,74, 
  /* [202][0][][] */ -47,43,33,54,19,91,-93,23,5,-8,55,-34,62,-39,12,103,-117,53,127,-1,65,5,-4,36,-37,33,22,-75,-9,26,-51,26, 
  /* [203][0][][] */ -27,29,-47,-36,-42,127,30,47,61,-75,29,-16,-38,-69,-61,-10,63,9,63,-82,50,83,19,19,22,89,-63,25,-11,-30,6,-17, 
  /* [204][0][][] */ 29,-3,-37,36,20,-52,-30,-17,-69,-60,127,-2,11,25,-18,-63,-26,53,-37,-42,21,92,9,67,-35,2,-59,1,6,88,-52,12, 
  /* [205][0][][] */ -27,-16,77,-19,16,65,-44,-1,-6,40,22,13,28,-25,-49,0,80,4,-127,54,-43,55,-65,-49,-19,-3,-76,67,57,26,16,117, 
  /* [206][0][][] */ -67,-6,120,7,-87,19,-94,40,-127,-32,-90,-29,-54,94,98,55,72,-79,-48,62,-48,47,29,78,-14,-126,-57,-3,37,-20,113,79, 
  /* [207][0][][] */ 69,53,21,-15,-92,-75,12,-101,-5,85,-47,-105,-7,-23,4,-3,53,-114,26,50,122,54,59,39,24,36,-92,85,-9,-84,-66,127, 
  /* [208][0][][] */ -105,-127,-72,37,-9,39,17,8,5,58,39,-26,109,10,-3,52,103,65,-18,2,-13,9,-10,-25,-60,38,24,11,46,45,-54,3, 
  /* [209][0][][] */ 17,35,-19,-47,46,-25,-30,7,-30,-46,-4,-41,9,-7,-127,54,19,-39,45,23,-24,18,120,0,-2,-53,31,8,38,33,-38,-81, 
  /* [210][0][][] */ -69,29,-47,-1,77,72,92,-30,-74,9,-17,-24,-24,-54,-32,-83,21,-32,-13,-127,30,-59,-47,-17,-51,73,12,33,54,83,-58,2, 
  /* [211][0][][] */ -116,-67,98,-41,-127,95,-28,-125,-117,48,33,53,-125,-67,-2,4,41,-20,-23,15,113,55,48,85,-60,54,-88,25,-57,-5,-91,-38, 
  /* [212][0][][] */ -49,16,-124,40,-22,59,-17,-64,82,20,127,-1,25,-41,-50,66,54,30,-80,-46,-36,16,56,-57,-9,13,32,5,-55,13,18,-45, 
  /* [213][0][][] */ 77,-57,-65,12,-47,26,61,-28,-35,8,-63,-60,-59,-117,21,88,-71,-103,-22,-41,-35,15,35,125,25,11,-127,19,76,-41,12,-56, 
  /* [214][0][][] */ 5,-36,8,-20,-22,5,73,22,9,13,33,37,5,-22,42,-98,16,-61,-88,-23,-31,33,-18,86,-29,28,9,27,-41,127,93,-72, 
  /* [215][0][][] */ 1,102,60,44,-16,-12,-62,-4,50,-33,-38,127,14,-8,-46,-12,-33,1,34,41,-14,-52,-76,17,3,-49,7,49,8,80,62,3, 
  /* [216][0][][] */ -11,-64,-77,21,-38,21,-21,-54,-69,-2,-4,-40,-62,-26,-68,-35,6,-21,12,-4,5,-21,-12,-8,4,127,-36,15,-85,91,-7,-68, 
  /* [217][0][][] */ -64,8,20,-51,-127,-32,54,41,-71,-14,-65,-10,-29,-39,8,-65,-36,-9,-37,-37,-57,-10,-37,91,39,-12,-60,37,24,10,-54,0, 
  /* [218][0][][] */ -51,107,-12,22,30,7,50,-40,-24,14,75,54,0,21,15,15,12,-28,-3,11,-11,-24,-9,-41,4,25,83,127,-68,35,5,-91, 
  /* [219][0][][] */ 104,16,-118,127,33,-69,78,-119,55,6,-89,-58,6,-88,18,-75,-73,-84,-49,-9,12,76,14,80,58,32,-32,-3,-1,-16,-34,-78, 
  /* [220][0][][] */ 28,18,-35,10,-10,-21,15,80,7,-16,-3,2,39,-51,-48,13,40,-1,-39,-4,23,3,-37,-25,56,-1,-6,127,-27,-26,71,9, 
  /* [221][0][][] */ -29,-67,-22,-26,-47,16,-44,-77,28,-1,72,-2,-15,-49,75,-7,23,-2,33,-20,127,-54,-40,-12,9,-16,24,19,-45,40,-31,56, 
  /* [222][0][][] */ 9,10,61,-88,-47,81,15,-86,77,48,-56,25,127,5,34,16,95,21,-13,10,51,48,2,30,23,-36,-23,6,-114,-122,-17,97, 
  /* [223][0][][] */ 116,-25,29,18,90,-39,-53,63,23,-41,20,32,12,61,54,34,-55,-43,7,127,-42,74,6,10,-43,-35,51,53,-5,59,20,-27, 
  /* [224][0][][] */ 0,-54,6,-23,48,-13,19,69,-56,-75,-37,46,43,5,8,-11,-19,47,6,4,8,-11,-10,-20,16,23,8,30,127,-18,-13,-27, 
  /* [225][0][][] */ 80,37,-87,-27,-25,-16,-62,21,18,-21,-44,12,-11,3,98,-5,19,-28,24,-105,-35,-61,-127,-28,17,67,13,-4,21,-112,-27,-34, 
  /* [226][0][][] */ -28,-127,-40,23,-48,83,83,6,-66,49,-99,-69,77,-52,-41,11,85,-47,90,23,-17,-20,56,41,-25,78,-85,-60,-40,40,16,-70, 
  /* [227][0][][] */ 39,-27,41,64,127,-62,-40,-50,-117,17,-91,-35,-50,-36,-19,-32,-66,0,61,24,84,-92,-38,-40,-8,3,-9,17,-20,-23,-76,8, 
  /* [228][0][][] */ -58,-24,42,76,23,-36,-46,-15,60,64,-112,8,-33,36,43,0,83,-87,-23,63,-19,51,-20,-37,127,-51,21,51,9,26,100,0, 
  /* [229][0][][] */ -23,-74,73,1,-64,17,50,41,-88,-78,47,-3,37,23,-24,-23,-31,127,51,44,26,24,-57,-10,-104,39,-3,-24,71,24,31,17, 
  /* [230][0][][] */ -60,1,-4,87,-127,28,-43,-79,-43,-31,-88,-3,34,26,-35,52,-20,-24,-16,39,-61,-74,63,-7,26,56,24,-8,18,78,87,-58, 
  /* [231][0][][] */ 66,-15,75,-9,15,29,34,-35,-127,18,23,65,69,4,5,47,39,-2,-35,-29,46,27,2,-2,12,-2,12,34,-22,1,25,3, 
  /* [232][0][][] */ 42,33,30,55,-36,-13,6,-1,3,-127,53,-17,2,-40,17,23,-16,2,-100,23,-80,-7,92,107,-63,64,-2,3,-68,-21,-18,31, 
  /* [233][0][][] */ 19,27,-106,-123,-56,58,111,-121,-31,10,68,7,19,-52,-118,37,-5,13,64,-106,-88,-4,-11,119,-127,33,-62,-69,35,-20,36,-70, 
  /* [234][0][][] */ -43,-127,30,-12,39,18,-14,-54,-25,-96,21,-54,-8,44,-55,-18,19,30,-26,27,-46,-3,19,-26,4,3,58,13,-52,47,-3,-14, 
  /* [235][0][][] */ -24,-32,-13,22,12,1,-27,-13,20,-110,-24,-73,17,-10,-23,-3,-45,56,-42,-24,-5,-28,35,39,6,-73,-127,38,0,-90,38,62, 
  /* [236][0][][] */ 96,0,25,7,18,20,-1,-5,-44,2,21,-2,28,-10,23,127,38,32,33,8,-38,-57,14,12,11,-31,7,-27,12,-73,20,-17, 
  /* [237][0][][] */ 26,-17,-25,21,-40,9,-10,9,3,69,-14,53,13,-4,-36,9,7,-60,-18,27,3,5,-12,-1,-40,18,127,5,-1,27,-55,0, 
  /* [238][0][][] */ -29,7,48,19,-46,8,13,-27,-18,-127,115,50,0,55,-80,18,43,71,74,39,43,33,59,-61,-29,91,-28,48,-36,8,-20,81, 
  /* [239][0][][] */ -68,16,-25,-68,21,96,-24,75,87,7,47,-10,-98,92,-75,39,-27,-127,-45,70,99,9,-23,2,-41,-8,-46,-12,-21,-26,-64,6, 
  /* [240][0][][] */ -6,-25,-46,-79,86,-51,-93,-34,-12,-97,2,23,120,115,44,-6,-10,-34,-11,-84,-59,60,37,62,-51,25,127,89,45,40,-42,-24, 
  /* [241][0][][] */ 49,31,-17,47,17,3,63,-38,20,28,61,-38,-40,2,-24,-102,0,1,10,-35,-57,-3,-25,-9,-26,-21,35,-127,100,64,-121,31, 
  /* [242][0][][] */ 73,-11,-53,97,44,33,-40,1,94,19,60,-9,46,-24,10,10,-17,-24,-39,-79,96,67,-5,16,-61,69,-59,55,-127,-24,-8,16, 
  /* [243][0][][] */ -6,27,14,-48,-76,-42,-29,-13,-127,-13,-61,-46,8,-10,-11,-35,5,96,-22,39,8,15,-37,-55,44,66,5,-5,116,-30,-53,2, 
  /* [244][0][][] */ -9,-95,-18,-89,46,-8,-26,30,6,-54,68,-35,127,74,-44,19,-15,56,61,21,13,42,43,44,46,-9,3,73,-68,23,-10,-11, 
  /* [245][0][][] */ -53,19,-27,84,-46,-1,112,-31,97,-8,-23,-33,-40,127,39,-102,-56,2,52,0,42,-38,-8,51,-73,39,48,-20,17,60,44,-118, 
  /* [246][0][][] */ -56,39,40,-77,50,-11,-60,26,29,-29,-82,-47,68,-19,-27,-18,127,-48,-31,30,-63,17,-82,-8,86,93,-66,7,-8,24,80,-40, 
  /* [247][0][][] */ 46,-41,56,48,-17,-11,-15,5,68,54,29,52,-33,-45,-13,-58,2,-33,10,57,23,1,8,52,-127,-28,37,52,-38,-30,-29,56, 
  /* [248][0][][] */ -6,-49,-87,113,24,24,-98,-58,0,127,-77,-59,-122,-7,-92,124,14,77,-49,80,41,-81,-12,31,-49,-103,-95,27,50,14,89,54, 
  /* [249][0][][] */ 49,4,4,-78,48,-24,53,-36,-14,-24,-33,-33,15,22,-23,70,7,22,46,-1,-14,4,43,-41,2,-10,-68,-127,-20,-13,-9,19, 
  /* [250][0][][] */ 86,82,10,-16,-127,8,30,-32,-52,23,-28,27,98,97,-55,49,-48,11,45,-18,70,-78,74,41,-79,4,57,83,47,56,32,7, 
  /* [251][0][][] */ -50,6,25,-3,56,98,-12,-68,-108,-84,36,-80,27,-116,43,-118,20,-20,-60,-69,-32,16,-23,33,-127,56,30,-106,-104,60,-4,32, 
  /* [252][0][][] */ 41,-22,44,52,8,20,-14,-111,-6,51,-20,6,28,3,-66,-43,27,-30,58,19,-39,51,-25,5,-2,75,-115,-127,-51,21,-50,-44, 
  /* [253][0][][] */ -21,-58,-127,-28,-3,21,44,-19,13,47,68,34,-3,42,-29,-77,82,-1,-77,56,6,-6,97,-41,34,-90,-39,6,9,30,9,-10, 
  /* [254][0][][] */ -13,5,-4,17,39,-50,-75,23,6,13,13,67,96,120,-127,-64,36,65,-38,10,-124,3,-79,24,13,-89,-63,24,20,-4,-2,-46, 
  /* [255][0][][] */ -127,-14,-1,40,33,-80,51,-19,-28,-89,79,7,-12,-6,-89,11,32,-15,11,35,96,100,-10,-28,-14,-27,-22,1,96,-43,-26,-84, 
  /* [256][0][][] */ 10,39,-4,-3,-73,25,33,-40,32,4,52,-61,-2,34,-59,16,1,108,90,-2,-6,49,-40,19,-76,48,-2,28,-60,-127,17,14, 
  /* [257][0][][] */ -27,-123,12,95,-6,86,-47,60,12,-3,79,8,6,41,8,-22,49,21,0,-22,2,-32,-72,-40,56,127,102,-94,-92,73,19,-48, 
  /* [258][0][][] */ -127,-95,4,22,32,36,52,-42,-8,69,53,26,61,20,11,55,82,-41,52,38,25,116,-20,-49,-2,-8,-29,3,15,-74,-18,-55, 
  /* [259][0][][] */ -24,-39,42,-2,127,2,36,33,11,48,-18,-18,-11,26,-42,74,97,-90,53,65,7,1,62,-44,-21,11,-9,-57,51,16,36,-34, 
  /* [260][0][][] */ -89,-90,18,-34,28,-3,63,47,58,-6,-36,-31,-11,58,-11,104,67,127,-9,28,7,-5,84,-3,-1,-13,-16,31,-47,-13,-14,-62, 
  /* [261][0][][] */ -1,-35,72,-10,-44,-62,25,43,-22,58,-56,23,-44,40,21,-47,107,-30,-11,-14,-63,-127,-40,-8,-19,23,-94,-97,-34,53,41,-114, 
  /* [262][0][][] */ -3,3,-31,-35,-26,-73,-35,30,-9,47,-14,81,37,-50,-87,-22,-2,48,-86,-8,43,20,-1,-43,-16,-59,101,127,-47,73,35,1, 
  /* [263][0][][] */ -72,4,10,114,-81,-44,52,-20,-33,-45,-15,-40,28,-75,90,-62,48,46,-58,-21,-81,19,10,65,-40,-2,-39,-125,38,51,123,127, 
  /* [264][0][][] */ 93,-13,-12,-27,-83,-41,3,77,22,-15,-9,22,-82,-15,-13,30,-37,25,37,-18,-10,54,39,116,-69,113,127,-29,14,-25,-79,59, 
  /* [265][0][][] */ 13,-8,39,62,-123,30,46,24,-43,12,36,-104,-47,-82,-119,-35,32,90,-94,66,-61,-99,33,7,-76,91,-2,3,20,94,5,127, 
  /* [266][0][][] */ 44,29,31,55,-20,9,-54,-14,-99,-62,40,-127,19,-58,-42,10,-37,3,1,79,-3,-29,-83,-97,-9,23,5,57,-48,-39,21,17, 
  /* [267][0][][] */ -25,42,-8,18,-2,-16,30,-32,-21,1,-9,47,0,26,-86,1,46,-30,-31,21,18,21,-23,4,21,-3,109,127,50,94,23,13, 
  /* [268][0][][] */ -24,-31,21,35,-35,-37,39,71,33,-40,9,32,-107,-75,23,-7,39,-109,-56,-38,-97,-56,123,14,-12,42,127,10,15,106,71,90, 
  /* [269][0][][] */ -19,23,-34,-14,10,19,-55,54,41,-64,27,-27,38,-8,4,28,6,127,-37,44,25,-3,-20,-80,-20,51,67,41,-46,-37,39,19, 
  /* [270][0][][] */ -43,-39,-1,-49,-25,24,-36,54,74,23,-47,52,-109,-127,9,-28,-79,31,38,43,34,49,-3,-4,-84,12,59,27,-47,59,-56,21, 
  /* [271][0][][] */ 39,46,35,-21,-16,26,45,74,-48,-45,5,10,-53,23,60,68,1,-36,-11,16,-61,38,41,4,36,119,87,104,17,-127,1,-45, 
  /* [272][0][][] */ -63,118,-3,57,-119,-49,-77,25,10,11,-127,-71,76,-35,-34,-101,-92,-85,9,-29,106,36,2,-30,110,-34,-26,-8,8,-22,65,-36, 
  /* [273][0][][] */ 46,30,8,37,-49,5,17,-39,-100,44,-1,10,16,-16,66,63,126,80,45,-32,23,41,5,127,29,-92,22,23,-51,-3,9,-19, 
  /* [274][0][][] */ 0,-25,58,-29,63,50,-17,-88,55,24,-31,-25,-59,-26,-49,-112,-78,-85,7,-30,-48,2,15,-65,29,-125,24,36,-21,127,17,-41, 
  /* [275][0][][] */ 64,28,-55,80,43,75,-36,-18,41,-14,-19,6,-31,-45,-4,-43,-15,3,-13,-49,3,-99,62,-29,-20,-55,-24,-75,27,75,98,127, 
  /* [276][0][][] */ 6,28,38,-5,-10,14,34,-10,-3,-33,-11,20,5,-5,127,-72,-39,-33,40,54,46,-12,-117,-18,-10,5,1,45,-11,6,-29,-66, 
  /* [277][0][][] */ -64,-63,-27,2,10,-124,-27,43,127,26,43,-37,31,-68,-40,-42,-62,-41,45,79,-90,-6,-9,-23,-15,42,-87,13,-4,-24,-72,26, 
  /* [278][0][][] */ 42,-18,69,127,-107,42,17,-102,-75,-43,96,-23,97,-32,-68,-63,-51,-52,0,-96,15,-25,26,57,-126,-2,95,-68,5,10,-117,-126, 
  /* [279][0][][] */ 49,60,50,-22,113,127,-24,50,-1,-69,-15,-29,21,-94,-83,22,-10,-87,64,39,112,110,13,-40,14,-22,25,-56,19,-21,-5,-96, 
  /* [280][0][][] */ 21,16,-6,-30,-37,-11,104,-3,56,127,-14,31,1,-44,-35,-93,55,-22,37,-73,90,-60,-13,39,-108,-3,-35,29,-24,-2,-28,-29, 
  /* [281][0][][] */ -47,63,-49,127,-34,-80,87,-55,6,-74,48,-48,24,49,62,-47,7,-69,41,9,-62,-52,13,20,18,-12,3,20,1,-21,20,27, 
  /* [282][0][][] */ 26,-19,-14,12,-33,3,-32,-11,-7,63,-61,54,-13,18,-63,41,127,-24,-66,0,73,61,27,66,29,18,84,-10,-92,45,67,-6, 
  /* [283][0][][] */ -4,-32,-88,52,-25,26,0,19,-18,29,-56,-69,-8,61,24,-32,120,105,110,-12,55,3,-44,-104,-14,89,7,127,-83,-68,-5,15, 
  /* [284][0][][] */ -18,-37,51,9,46,78,92,75,-6,61,7,-58,-127,2,18,-7,46,-59,11,-27,-107,71,-32,-76,-29,97,-31,-26,-45,37,78,79, 
  /* [285][0][][] */ -74,-86,-12,26,-112,40,33,-45,-8,-12,-82,33,-55,-51,-83,127,-10,22,36,1,30,-15,74,-40,79,96,22,28,56,-5,-48,-21, 
  /* [286][0][][] */ 53,127,-13,1,13,-8,-79,41,-121,-50,12,60,8,-42,-6,4,71,114,-43,-97,-88,98,-19,-53,12,-88,17,-63,31,36,90,-125, 
  /* [287][0][][] */ -11,-12,-98,14,70,-15,-127,14,-30,-24,62,80,47,47,-4,-8,30,-20,-54,27,-16,-6,40,-10,-26,-34,15,-63,-88,55,-17,41, 
  /* [288][0][][] */ 23,41,104,34,1,-77,-15,51,-112,68,4,9,13,-109,62,46,69,26,69,-100,-124,28,24,15,-58,62,41,3,35,74,127,42, 
  /* [289][0][][] */ -45,-80,-8,-103,-82,-55,-68,-37,88,59,-33,45,-99,5,-10,51,-127,22,-19,35,-33,22,-53,-2,-43,64,-30,-3,39,51,-115,27, 
  /* [290][0][][] */ 34,-27,-21,72,4,77,-42,127,12,3,44,-12,-18,100,-12,9,50,57,-11,18,-125,-79,37,-50,20,52,16,-8,30,12,71,-24, 
  /* [291][0][][] */ -3,-127,36,96,-34,-83,82,31,7,-52,-24,59,42,79,20,44,48,-114,-39,65,46,23,125,-5,-85,123,60,-39,28,71,13,-53, 
  /* [292][0][][] */ 1,-12,14,-12,46,-9,-71,36,5,-13,-8,14,-23,91,49,-11,-44,-62,57,-16,91,74,-16,-29,-28,-14,54,-49,-91,-127,98,49, 
  /* [293][0][][] */ 10,37,-97,-53,-26,-10,15,-46,-43,37,-127,49,-62,-126,17,7,16,-6,40,-15,56,-57,60,21,3,33,-4,1,46,64,-69,-37, 
  /* [294][0][][] */ -127,44,-44,0,-21,68,37,49,-97,-43,-20,40,-77,-44,8,81,12,14,-21,30,-116,-10,42,12,-13,12,15,-62,22,-21,-37,-20, 
  /* [295][0][][] */ -57,91,14,-61,18,18,31,5,-95,19,-69,-60,-35,-26,-25,7,20,-86,-19,23,48,-119,-29,52,8,-114,-75,-69,28,-127,7,21, 
  /* [296][0][][] */ 43,-16,-25,-28,-5,1,62,15,-24,-65,-113,77,78,-23,-121,69,8,-76,-41,84,87,104,1,-28,31,127,-96,105,-84,-6,64,-47, 
  /* [297][0][][] */ 66,-24,20,14,33,57,41,-60,23,-64,49,-7,-1,-43,-5,94,13,-121,-23,-4,44,86,-21,-55,-23,54,98,-49,-2,-5,-127,-20, 
  /* [298][0][][] */ 21,1,9,-1,33,127,7,-22,3,17,-52,65,3,99,-5,48,17,-1,25,68,25,-41,7,7,-12,-3,-3,-53,1,-21,31,12, 
  /* [299][0][][] */ -1,2,72,42,-53,55,4,-84,0,67,-71,42,11,-59,-54,-45,58,-51,14,-25,-1,31,9,90,-6,5,127,53,-19,46,45,22, 
  /* [300][0][][] */ -84,-42,-7,59,-8,28,-28,-34,12,10,46,-24,23,-30,-20,-82,-31,-22,-42,-13,-5,24,-127,54,2,8,-66,60,9,-92,12,-29, 
  /* [301][0][][] */ 9,-32,21,-46,46,-127,-59,1,-32,-49,-28,26,102,-13,-55,16,30,18,71,-96,32,-11,51,-27,-2,-33,30,52,99,123,-73,76, 
  /* [302][0][][] */ 78,71,4,11,-2,49,-12,-80,-39,-76,21,-20,10,-17,2,-42,72,1,44,-41,-6,-127,63,19,83,-81,-8,-15,-14,44,110,3, 
  /* [303][0][][] */ 118,34,33,-41,-36,-16,-8,-57,39,42,17,-91,33,127,-11,-72,-43,-44,-40,-24,-56,86,43,24,41,-2,-4,5,-44,-4,-2,80, 
  /* [304][0][][] */ -55,-40,16,-73,26,110,2,-59,46,-119,28,6,-97,-8,-93,49,47,3,17,-14,-84,41,-58,5,92,-80,-20,-127,8,-60,-41,123, 
  /* [305][0][][] */ -4,127,-32,-63,-110,-49,14,23,8,-16,-14,-53,107,-32,34,22,-28,-55,-4,65,25,22,-15,33,-47,95,93,51,-22,34,1,-37, 
  /* [306][0][][] */ -18,-69,5,-123,4,31,-68,-10,117,56,52,103,42,14,9,-81,-68,35,-47,57,-26,80,-32,-66,-106,64,16,19,83,77,-127,-49, 
  /* [307][0][][] */ -5,-86,21,-12,-81,-55,-55,17,4,-2,-50,-58,-57,5,-32,-13,79,-12,-9,108,-89,19,110,27,0,6,48,38,-2,-127,-74,44, 
  /* [308][0][][] */ -40,-73,68,6,56,75,34,9,-114,113,51,37,87,17,30,88,48,-29,127,106,-89,-40,-29,-2,-28,-46,-49,-70,30,-36,-32,-66, 
  /* [309][0][][] */ -2,-31,27,-20,-54,-120,67,75,103,-21,-36,-38,-19,-85,9,-28,27,-127,22,23,-61,19,24,-7,-69,37,-36,-1,-52,-6,46,96, 
  /* [310][0][][] */ -7,77,-10,-1,92,21,108,-64,-25,-86,-78,-6,125,98,-70,-3,-22,77,-30,52,7,-22,-31,-57,-6,-127,10,24,-39,-82,45,-27, 
  /* [311][0][][] */ -1,-21,-74,-124,-107,18,68,-67,-7,-28,14,60,-20,-61,120,8,-72,-127,-34,-38,-29,-30,95,50,-15,-98,2,4,71,-20,-2,-26, 
  /* [312][0][][] */ 9,40,-105,-84,89,-15,-4,-25,70,-8,26,49,63,24,53,-1,6,-76,-35,-5,7,-11,127,31,-5,-40,-26,51,58,-6,42,56, 
  /* [313][0][][] */ -127,37,32,26,4,-70,-6,3,47,1,-29,33,27,-18,-52,-26,37,-38,32,1,-50,-12,-60,11,-80,81,-41,8,0,55,49,36, 
  /* [314][0][][] */ -5,-69,24,-2,64,80,-45,-127,9,-38,20,57,75,-106,-91,-107,91,-20,-61,-32,-5,-105,-22,1,-12,-24,-73,-14,-16,7,-54,-61, 
  /* [315][0][][] */ 22,-52,8,78,-28,-114,-5,56,-29,-47,-11,-78,14,-127,-124,17,61,72,-10,30,24,21,26,26,39,-30,-49,-45,23,-65,27,-41, 
  /* [316][0][][] */ 74,23,16,-48,-31,-94,-41,69,127,-16,-102,17,-2,52,-1,-85,46,0,-108,-86,20,-25,51,-62,94,-6,-30,-39,-41,-18,50,-97, 
  /* [317][0][][] */ 20,-12,-5,87,76,-15,-59,-72,70,-13,13,-70,-43,0,-46,-9,63,-43,-83,-127,-64,10,57,-81,-23,71,-66,-49,-71,36,73,-64, 
  /* [318][0][][] */ 11,22,-111,122,-25,-22,43,-55,-70,-54,61,-42,-29,-127,26,-56,-34,21,-12,-12,-51,-102,55,53,-11,-54,25,-40,-94,104,-20,-31, 
  /* [319][0][][] */ -7,11,36,-5,-31,-9,-14,-2,-28,-7,9,48,-28,12,-3,51,14,-42,-3,-43,32,5,8,63,22,47,32,6,-11,127,-47,-2, 
  /* [320][0][][] */ -28,-79,-16,36,77,32,-2,-32,45,77,12,28,69,38,12,9,-13,65,49,120,-1,23,-39,72,-42,-127,-4,-20,-36,-84,42,44, 
  /* [321][0][][] */ -26,23,13,-24,-43,-68,11,28,-47,-26,-57,-40,-49,-36,-127,-68,-40,43,9,62,31,-102,-58,4,-35,83,-109,29,-68,18,67,-42, 
  /* [322][0][][] */ 103,25,-47,77,15,-72,76,45,-47,90,20,114,127,-99,-29,-87,-10,25,-34,81,-31,61,35,69,60,56,52,-7,-57,-45,-38,-86, 
  /* [323][0][][] */ 56,47,91,84,-29,18,-37,73,17,-10,31,-14,54,-54,2,-127,-69,-68,35,56,44,-21,6,61,18,-8,-62,112,100,-54,61,-81, 
  /* [324][0][][] */ -23,26,62,54,29,11,-56,21,-28,-8,41,-52,-54,10,-28,-11,18,90,72,25,16,-56,127,61,-64,21,-33,40,50,8,-67,-13, 
  /* [325][0][][] */ -127,-9,54,40,83,38,49,20,-105,14,-20,-97,-68,50,-75,7,31,-71,-36,72,24,109,1,58,85,-10,-56,21,-118,-2,-57,19, 
  /* [326][0][][] */ -32,5,56,-45,-23,-55,-22,-46,43,-55,14,68,-78,56,-127,-67,27,22,-53,-28,-8,-85,27,37,32,0,32,-51,-41,58,35,17, 
  /* [327][0][][] */ 39,13,2,24,-43,-110,82,-19,-12,32,37,-13,11,-19,-18,61,-8,-46,87,-33,-8,28,32,9,-24,3,68,-14,36,127,75,77, 
  /* [328][0][][] */ -86,-96,-24,80,10,3,90,-5,62,43,-127,-100,12,14,28,59,94,-12,72,100,-24,109,-36,-119,49,-50,77,-47,-64,-20,42,51, 
  /* [329][0][][] */ 1,24,-16,-12,9,29,4,127,-15,-10,10,-55,-31,0,6,-2,23,63,-1,17,-22,9,-20,3,-39,-35,19,-3,-35,-14,17,30, 
  /* [330][0][][] */ 19,-38,40,28,61,-9,-89,-24,-47,14,-69,8,9,-12,-127,40,0,-23,-60,-21,-64,-72,-35,103,26,11,2,-84,43,4,-8,42, 
  /* [331][0][][] */ 115,68,-72,-99,4,-50,52,-14,35,-13,17,7,-42,17,2,-3,21,84,127,24,36,-16,10,39,45,82,16,-48,-3,89,-40,-33, 
  /* [332][0][][] */ 38,-28,-25,-61,-127,-49,-121,50,1,-18,-23,-13,-52,8,-33,-26,-50,-48,-1,-44,0,-47,-14,83,37,31,38,22,29,86,79,0, 
  /* [333][0][][] */ 49,-39,-13,113,-32,-56,-84,-72,127,35,-19,-7,-28,-80,-22,-21,-49,47,98,68,8,12,-10,-34,-9,55,-23,-24,40,-74,40,39, 
  /* [334][0][][] */ 4,25,-67,-103,45,80,-34,36,-68,-35,-29,68,-32,-2,78,-52,-82,25,-127,-31,30,-11,16,-53,72,27,-8,22,-20,45,33,116, 
  /* [335][0][][] */ -43,14,37,-65,-15,79,97,-97,127,63,-44,-25,-9,-51,13,-59,-73,-32,4,-33,46,61,35,-52,88,126,31,-32,-77,94,34,-19, 
  /* [336][0][][] */ -71,-27,59,46,54,-44,-59,13,30,-63,-27,18,-67,-27,57,-24,52,23,-16,-46,127,-22,-56,10,58,48,-101,-48,100,13,-73,25, 
  /* [337][0][][] */ -57,1,-85,7,-21,-2,4,-89,24,-27,-7,5,-53,-87,121,127,-22,20,-23,38,13,-5,-32,75,-82,-35,25,54,3,-18,-69,-3, 
  /* [338][0][][] */ -29,15,33,5,20,-2,89,-44,9,-127,-32,-11,17,-26,-55,23,89,-67,-13,29,-39,19,4,25,-28,-15,29,-28,-12,27,-63,-39, 
  /* [339][0][][] */ -62,12,63,20,-127,17,45,14,-81,-102,29,57,3,101,71,80,-90,-49,39,55,-88,59,45,-8,-27,30,51,51,58,7,-108,-98, 
  /* [340][0][][] */ 1,35,-57,18,-36,-8,-94,-27,28,-85,45,-44,69,76,4,25,-1,13,-81,18,8,81,-66,-85,-127,-21,45,-47,6,71,26,27, 
  /* [341][0][][] */ 11,4,31,-3,-18,46,32,47,-57,14,-11,4,3,41,-8,-4,-127,-11,22,-41,-35,18,12,-44,-10,-13,-23,-25,61,25,29,4, 
  /* [342][0][][] */ 70,-100,-59,-51,48,8,13,71,-127,-19,47,-33,42,1,7,67,35,47,-85,40,-64,17,28,-12,22,9,43,-69,31,60,66,51, 
  /* [343][0][][] */ 41,31,-40,-98,92,97,26,33,9,24,-27,41,34,19,-126,89,-12,-34,58,48,100,127,21,-86,2,-73,27,-21,-5,-82,-98,-60, 
  /* [344][0][][] */ 58,-77,-33,3,76,33,16,5,-59,37,3,-54,83,-39,127,14,-94,-7,-13,-48,-21,-46,-79,-26,53,-27,-9,-53,-69,-97,118,-11, 
  /* [345][0][][] */ -51,48,-70,105,-67,-23,-7,119,14,52,-23,-127,-38,6,-33,33,-16,-69,-17,-32,90,-15,36,8,-74,-30,-23,56,70,43,-53,68, 
  /* [346][0][][] */ -68,-16,-28,65,-29,65,42,-20,54,-2,-57,-7,-31,-39,55,11,-72,-34,-25,-21,28,127,95,35,69,-33,12,107,-82,-22,49,103, 
  /* [347][0][][] */ 60,-29,65,11,-32,1,59,3,-7,-1,42,17,23,-20,-37,23,26,9,-2,53,37,-3,14,-14,-70,79,127,25,42,63,-29,-26, 
  /* [348][0][][] */ 24,27,65,1,4,5,44,-93,-51,-32,65,65,-16,72,6,-51,32,27,13,-57,11,2,15,-4,-58,39,-127,29,23,-61,-15,-46, 
  /* [349][0][][] */ 115,33,-60,17,-18,15,50,-9,36,6,46,-94,12,11,-9,-81,-27,53,-27,59,127,-40,4,-9,-55,-20,-77,37,63,2,14,51, 
  /* [350][0][][] */ -26,11,54,76,-102,14,-69,-33,-9,-12,5,80,-81,-13,-22,-72,-35,3,83,-2,9,30,-37,7,49,16,34,-34,127,7,-100,10, 
  /* [351][0][][] */ 32,-86,-86,-4,-71,8,18,2,0,-124,56,54,49,79,-7,-3,3,-2,127,43,29,41,-23,3,-35,75,-37,27,72,-47,48,48, 
  /* [352][0][][] */ -1,12,-25,52,-26,38,-36,-15,21,16,-1,34,50,33,11,-88,-38,6,-22,6,-26,37,-10,31,-28,-22,21,35,31,-127,41,-24, 
  /* [353][0][][] */ 22,97,23,-47,-5,20,46,-21,-18,-86,-35,-16,-99,-16,-67,-17,109,80,-33,-2,-127,82,-5,-59,52,30,36,48,-22,5,-18,57, 
  /* [354][0][][] */ -40,-78,71,29,-95,23,-36,54,-46,-23,64,8,-20,-67,-127,-3,4,-35,-12,-67,20,124,-41,5,93,38,3,6,24,5,104,7, 
  /* [355][0][][] */ -21,-113,5,55,6,68,34,14,62,-55,-20,-37,-13,45,56,14,-53,-54,-127,79,42,-62,20,-22,-127,26,7,-9,42,58,-71,92, 
  /* [356][0][][] */ 38,-42,-127,-80,4,-50,-36,-17,-4,-63,-22,20,2,-62,44,25,26,22,-21,6,52,48,-2,20,-65,-43,25,16,-98,122,57,-114, 
  /* [357][0][][] */ -5,55,24,59,-45,13,127,-33,-49,-56,-47,73,70,-15,76,-65,17,66,-92,-34,81,32,0,-21,-88,37,85,45,45,69,-27,-1, 
  /* [358][0][][] */ -121,-16,83,74,-24,18,4,-59,-89,-62,37,34,-44,38,54,12,111,87,-34,-98,69,90,-5,18,35,-92,-25,38,-5,-36,127,25, 
  /* [359][0][][] */ 51,-3,-25,-8,29,75,-13,-43,36,35,58,27,20,12,-127,5,-8,-65,38,20,72,-18,-54,-28,63,-59,-21,-7,-21,32,1,-89, 
  /* [360][0][][] */ 8,-17,-127,50,41,-28,-122,93,110,109,13,-108,-10,-41,-90,-54,16,55,-16,-14,54,0,28,-1,-4,-45,14,2,73,4,-10,-54, 
  /* [361][0][][] */ 14,44,-11,-22,69,25,107,54,105,-17,127,23,30,24,-54,-44,25,-37,26,-97,7,78,8,2,-100,17,43,-25,71,-22,37,-14, 
  /* [362][0][][] */ 50,-28,33,21,-51,53,-85,-9,-25,-28,-28,-93,-4,6,-65,25,-127,27,11,40,-22,3,28,37,-60,22,-75,20,12,-12,-23,-37, 
  /* [363][0][][] */ -3,9,48,-9,-32,-42,127,-8,-16,-6,-83,-23,-22,69,-80,58,-4,-74,-93,56,-50,-34,10,-74,-54,108,27,43,-91,-24,-7,59, 
  /* [364][0][][] */ 13,66,61,-57,35,-20,29,-40,-127,-68,-5,18,28,33,11,23,69,21,12,-75,-15,8,23,-18,44,-35,-62,-2,-53,-3,28,-40, 
  /* [365][0][][] */ -104,36,-58,-21,-95,85,14,16,-34,0,-6,71,109,-29,26,-2,-20,81,41,-65,52,-98,127,68,-37,19,-32,39,-81,-10,-63,77, 
  /* [366][0][][] */ 39,4,47,87,-18,-106,34,18,84,-10,-13,86,15,-4,-27,127,116,-49,93,-15,-101,-34,-27,54,-38,97,8,-105,-13,47,-20,33, 
  /* [367][0][][] */ -29,55,-92,-27,2,8,-77,-33,34,-13,-48,-101,-4,6,-48,-58,67,6,56,-37,42,13,18,3,-127,-55,12,-13,-52,-63,-40,19, 
  /* [368][0][][] */ 50,0,13,13,-90,109,-60,28,-103,-7,-50,97,-89,-24,-17,-7,2,-5,-127,-9,-11,-111,55,-9,-48,-52,-53,60,-3,31,-33,103, 
  /* [369][0][][] */ 70,54,42,-83,49,71,32,32,-127,38,-5,-33,-7,-1,-32,20,-39,1,6,-8,0,-34,31,16,4,29,-7,-50,10,77,-23,28, 
  /* [370][0][][] */ 25,34,-38,19,46,93,67,6,-92,-59,127,9,32,-33,-102,-11,-92,56,23,-75,-57,-106,108,-58,14,-63,-119,-10,-122,7,-3,-106, 
  /* [371][0][][] */ 24,-52,-57,1,52,-20,-73,-75,68,109,-7,-84,68,127,17,40,-1,80,4,-66,-11,17,0,87,-55,-28,31,-29,-62,43,48,-7, 
  /* [372][0][][] */ -3,-127,33,-20,32,26,-37,-58,79,-59,11,-4,-111,-53,-76,26,116,85,-53,9,-44,-68,-7,97,12,11,33,2,-23,94,26,47, 
  /* [373][0][][] */ -24,52,-26,-14,37,-5,-14,47,4,84,21,-19,17,-7,15,28,94,2,8,-12,28,-47,-9,-85,-21,-127,58,-49,-12,-12,-2,-16, 
  /* [374][0][][] */ 57,35,9,-59,-89,25,-14,29,-65,-50,-33,-41,-21,47,-51,-34,-106,-44,12,-91,-56,-127,41,-6,-89,91,34,13,-103,6,49,25, 
  /* [375][0][][] */ 18,17,22,2,-2,13,-24,-16,-5,-37,-26,32,-25,23,34,-56,-30,40,24,-36,-11,-61,57,-7,60,-127,23,-41,37,2,-76,26, 
  /* [376][0][][] */ 34,95,-22,-62,-54,-31,-45,102,11,-40,-48,17,-16,-32,-30,3,65,-3,32,-29,12,-85,-13,57,42,85,55,-18,-11,37,127,-50, 
  /* [377][0][][] */ -1,40,24,-46,-52,-52,58,64,-70,39,-24,-19,52,-95,-35,42,60,-12,21,-61,-127,48,2,31,-36,23,5,-54,-17,23,-23,-5, 
  /* [378][0][][] */ -69,69,3,-9,-71,127,50,-120,-17,-79,92,63,18,13,-15,-6,-44,-21,-77,-8,-26,61,107,-121,24,-11,32,74,14,-105,-68,69, 
  /* [379][0][][] */ -119,-25,77,-15,-25,-54,52,83,-6,-34,8,-127,108,29,-35,-75,-65,11,27,-1,-14,-70,-10,73,51,-22,85,-7,71,2,5,5, 
  /* [380][0][][] */ -14,57,21,-25,5,-4,45,-78,-81,-127,0,-24,-34,-65,24,4,-47,4,24,-15,18,-41,5,-7,28,-11,77,-12,105,-4,29,56, 
  /* [381][0][][] */ -30,-32,19,-26,-10,-12,-10,-6,-37,9,51,-60,-32,-53,2,-90,-5,-60,90,-17,44,80,-19,-24,-47,41,20,-34,15,88,127,-19, 
  /* [382][0][][] */ -41,-23,99,2,-20,15,11,52,-30,19,-55,-41,-33,-26,-26,6,90,27,4,-38,13,-127,-62,-9,-12,16,56,44,1,-76,-119,52, 
  /* [383][0][][] */ 17,-29,-16,-43,17,-57,30,21,-34,-36,-5,3,-43,19,127,1,40,-23,-57,14,47,-15,-12,58,5,-30,-4,30,80,-29,-70,-30, 
  /* [384][0][][] */ -47,31,-49,-24,24,-25,-75,10,-112,12,47,-38,18,44,8,-95,-30,-39,3,23,-23,-34,28,-69,-36,40,25,-4,46,58,127,55, 
  /* [385][0][][] */ -33,69,37,-1,-8,47,5,-69,-127,22,33,-10,76,98,-19,38,-12,-19,-28,-56,-10,-96,-4,75,-12,17,-38,-15,-45,-20,-45,-74, 
  /* [386][0][][] */ 50,11,4,-28,30,33,13,-9,32,-66,29,-5,-17,-127,-7,-27,-15,36,-26,48,-9,-8,-42,-13,-1,-40,-49,-13,20,-21,45,26, 
  /* [387][0][][] */ -75,-126,8,91,-127,-64,66,-49,61,-50,-48,-65,-53,99,-34,35,25,-29,-3,-115,-90,36,-35,39,36,88,-72,-19,-38,-111,21,-17, 
  /* [388][0][][] */ -79,0,35,54,-28,-53,-61,-112,-25,-76,29,0,-11,-127,13,-73,62,-13,-4,-104,33,-10,23,-23,-16,-13,-42,74,-7,93,30,58, 
  /* [389][0][][] */ -72,-7,-11,-31,-108,-56,53,79,9,57,-31,-29,39,-16,13,46,3,54,127,-90,-79,10,-114,22,-115,-16,-58,-83,-8,-46,-6,-22, 
  /* [390][0][][] */ -38,-30,-44,-11,67,-55,4,32,114,13,-127,35,-7,-23,-28,-59,67,64,-32,80,-44,72,-45,-24,77,40,-54,-39,-17,-58,-36,95, 
  /* [391][0][][] */ -2,79,106,5,102,127,-63,11,40,2,-33,24,-86,-43,-21,-37,-117,44,-19,57,-45,19,-57,-4,1,21,-3,75,64,-94,-2,20, 
  /* [392][0][][] */ 4,-85,-17,-37,42,11,6,2,-56,50,89,-28,-41,-11,20,6,-37,-5,-19,11,-3,-21,13,-1,2,-50,-29,-127,12,-15,-16,-45, 
  /* [393][0][][] */ -22,44,28,-86,-58,-20,9,34,-52,31,33,-44,-15,-127,35,86,31,30,-12,28,-19,-59,-3,-41,40,-17,-35,9,109,-9,-18,15, 
  /* [394][0][][] */ 15,-11,5,65,-96,-95,-64,-25,32,-106,127,85,58,14,-40,27,38,-112,-76,2,7,-50,-89,72,-9,111,17,100,-98,-16,45,19, 
  /* [395][0][][] */ -45,-44,24,-109,-93,-7,-18,-33,10,-77,20,23,116,79,33,-9,11,66,-22,28,-37,-49,19,125,-127,-23,21,-6,6,21,-33,-8, 
  /* [396][0][][] */ -62,39,35,-23,-118,-46,-13,-40,26,24,38,11,35,-49,-36,-38,127,22,-22,90,37,39,-39,6,25,27,22,62,-57,41,-17,-8, 
  /* [397][0][][] */ 50,18,12,-13,90,24,1,-48,31,-12,-11,8,20,-127,-13,-80,-37,51,-25,-27,64,-12,43,2,42,-29,21,-46,22,-6,-9,-30, 
  /* [398][0][][] */ 32,-54,14,-24,4,-30,-36,40,31,-3,-26,-21,-43,-26,-28,-40,127,110,-21,-49,47,-125,-70,-80,-33,107,-12,-52,49,-36,24,-9, 
  /* [399][0][][] */ -91,-107,118,86,37,-24,102,88,23,38,6,79,-48,-64,-39,-19,-122,-36,16,33,-73,-58,-99,81,18,3,68,-40,-38,56,1,-127, 
  /* [400][0][][] */ -39,12,-15,50,-49,-16,-8,-49,1,127,-12,32,65,-74,32,-58,-16,20,55,24,6,-3,12,-9,-2,-31,27,42,2,74,-88,-43, 
  /* [401][0][][] */ -86,45,54,-16,26,93,103,78,-42,-115,-119,17,-14,-13,-99,0,-90,-10,-37,-102,-97,4,-110,-40,-105,-6,9,-115,-72,-127,-18,-22, 
  /* [402][0][][] */ -52,45,-39,-25,39,61,-60,-76,127,-79,-43,1,33,50,-5,90,28,104,0,-76,41,10,7,-22,27,10,54,27,111,24,-101,15, 
  /* [403][0][][] */ -46,52,-9,-37,16,-11,-39,-99,127,-47,-115,63,-105,-24,46,-40,-47,49,18,-30,-33,21,-8,29,-29,94,5,-46,-104,18,0,-97, 
  /* [404][0][][] */ -16,115,-19,-16,5,125,-24,-11,-64,2,-98,6,-47,-10,-127,-18,-13,-41,-20,-33,110,81,24,-22,-46,-15,1,-19,95,-33,85,-44, 
  /* [405][0][][] */ 10,-45,26,-1,13,6,-49,13,23,-5,43,68,-4,-28,-17,10,-17,-58,33,127,4,22,-61,49,23,58,78,83,24,-31,-7,-5, 
  /* [406][0][][] */ 56,-35,-20,-29,12,51,51,-15,35,-43,-10,-2,-12,-28,-39,127,-110,26,84,50,-41,103,-113,74,21,82,103,-33,-4,-16,61,100, 
  /* [407][0][][] */ -12,-8,-19,71,-103,-21,-48,127,-7,39,-20,-69,-84,28,95,68,6,26,45,-20,-6,0,-60,-12,71,59,8,57,-68,67,78,-34, 
  /* [408][0][][] */ -38,-55,12,-97,-3,-90,13,-2,-47,17,48,127,-3,3,37,16,-71,23,11,50,-6,24,2,-20,30,73,60,13,-22,-27,-54,22, 
  /* [409][0][][] */ 48,17,59,2,11,22,27,27,9,-57,-73,-43,-13,70,37,100,-8,-127,70,4,76,38,13,-57,84,-28,60,-42,43,-45,-62,17, 
  /* [410][0][][] */ 2,67,34,-95,-126,-58,-26,37,-32,24,88,-49,29,47,28,29,108,-91,36,65,118,-37,10,42,2,127,87,-50,68,61,-60,53, 
  /* [411][0][][] */ -74,-72,-114,17,-30,-97,57,-30,91,77,-10,0,-47,-30,-20,-14,-9,-24,13,67,-9,127,-5,-16,-21,28,43,-43,19,62,4,38, 
  /* [412][0][][] */ -26,-57,56,-6,-65,62,41,-59,112,-127,-72,0,17,9,79,-36,-86,13,-12,86,-8,-36,4,58,36,44,-7,51,-14,85,-72,10, 
  /* [413][0][][] */ -5,-67,-46,69,-10,122,4,-122,109,33,61,28,-17,4,-29,-47,-46,14,42,50,6,-45,71,44,73,-52,74,-33,-127,44,-33,-59, 
  /* [414][0][][] */ 59,23,-12,-30,36,-5,20,71,-32,53,0,51,-41,13,-27,20,-14,-7,-22,-124,-98,-29,-127,74,15,-29,-28,-86,-9,24,109,-34, 
  /* [415][0][][] */ 42,-11,41,-98,9,-39,88,-64,-36,-58,-100,54,-44,72,97,-127,51,-79,55,33,-5,34,-16,41,-82,-74,100,3,-20,1,30,-22, 
  /* [416][0][][] */ 29,-49,92,15,-24,-50,83,108,-59,92,43,-67,20,116,39,52,-43,-14,-52,-29,-71,-112,-92,26,-6,-49,72,-2,-70,-19,127,32, 
  /* [417][0][][] */ -68,-30,6,54,-27,-127,-42,94,81,19,30,34,27,-88,-32,17,-19,-25,21,76,-8,61,-13,15,-25,49,44,98,-17,77,-97,-2, 
  /* [418][0][][] */ -38,74,-19,-77,-118,23,6,-4,7,-42,17,53,31,5,5,-14,67,48,20,67,-31,38,24,-1,56,24,20,-18,127,-45,-44,-9, 
  /* [419][0][][] */ -39,4,1,-5,-20,52,3,-16,3,-11,-33,16,69,50,4,-27,-6,19,-8,-8,-28,-52,38,-11,-68,127,1,47,36,-30,25,64, 
  /* [420][0][][] */ -9,-8,16,-6,-11,-59,-53,-127,21,-97,90,-40,52,0,-112,27,93,7,107,63,80,-6,-100,-51,-35,-98,59,21,-59,71,-4,41, 
  /* [421][0][][] */ 7,6,28,-10,-70,-19,-31,52,97,52,23,-7,-62,37,55,-57,-52,-61,-42,71,15,-57,-23,-25,-94,127,90,99,42,17,-116,-112, 
  /* [422][0][][] */ 48,-57,-68,65,0,68,43,23,90,72,-44,-3,13,118,99,-44,50,6,-32,67,36,-59,11,40,65,27,127,25,27,31,12,-39, 
  /* [423][0][][] */ 21,-46,-21,29,12,-34,-2,-6,77,14,10,65,79,23,-21,31,-53,-9,35,41,8,-32,-26,19,11,-45,-31,37,-115,-89,-127,-43, 
  /* [424][0][][] */ -42,-57,40,3,-17,-5,-8,-12,-81,81,-37,79,-1,-55,81,61,-5,30,-51,-50,30,48,42,-49,-70,7,-104,39,-58,16,86,127, 
  /* [425][0][][] */ -61,63,34,-48,-37,-60,-37,-67,-23,-11,-91,58,97,7,-71,-31,3,-6,-4,15,-19,-2,-16,-65,-10,38,-74,-1,-56,44,127,47, 
  /* [426][0][][] */ -13,-72,-40,127,-126,7,-53,79,-21,115,22,-66,49,-41,45,54,-81,-35,22,-32,-64,6,5,10,-18,77,-12,9,-15,-49,37,-1, 
  /* [427][0][][] */ -31,22,-41,-14,-79,50,39,-42,54,-6,-52,-14,-22,14,-53,-62,-25,3,-24,26,46,25,-31,-127,3,13,-92,17,29,59,21,2, 
  /* [428][0][][] */ 7,-127,23,-24,2,45,25,-104,115,53,-47,-10,70,69,-5,-12,-13,-38,-43,-31,114,-23,31,-34,-81,-120,-21,12,-52,-45,-20,-78, 
  /* [429][0][][] */ 13,-58,-16,-9,-36,-13,-29,65,32,43,-35,-15,30,-61,5,3,25,-6,6,-5,33,-7,-8,-9,-11,17,29,-42,-4,127,4,51, 
  /* [430][0][][] */ -87,-45,-42,-57,15,20,110,-122,65,8,-49,-24,62,-59,46,16,25,-48,-31,-8,28,40,-35,40,-4,-12,-127,-4,22,23,38,15, 
  /* [431][0][][] */ 16,-59,-118,-75,-78,-10,102,21,-62,22,-9,50,127,-55,-23,27,-101,-12,-9,-49,-34,-35,-43,-61,3,37,-21,106,-80,12,74,48, 
  /* [432][0][][] */ 41,102,35,-9,0,11,127,8,-16,-50,32,-97,43,-118,27,-24,-37,-70,44,-59,37,50,-64,-62,-40,-4,16,-20,32,-9,-71,-32, 
  /* [433][0][][] */ 37,47,44,-87,-106,-19,-2,-127,-16,37,-67,-35,40,-7,91,-15,-74,1,-54,9,-73,50,-33,8,-36,103,-41,-74,81,-9,61,28, 
  /* [434][0][][] */ -24,-68,-64,1,-10,2,9,-4,-39,6,-42,-91,10,29,58,124,-6,2,78,-108,79,34,52,45,69,-68,-95,-127,-74,14,-80,-28, 
  /* [435][0][][] */ -50,29,-11,35,50,-20,-63,35,7,51,-112,-26,115,26,7,27,-50,-127,27,4,-5,36,-3,79,-110,48,-51,-46,-48,6,-50,-38, 
  /* [436][0][][] */ -121,40,-73,-46,-66,-41,120,-10,-73,32,96,54,76,-22,-69,-25,-102,46,70,-38,73,33,-19,-37,-127,-55,-72,-3,9,57,37,-27, 
  /* [437][0][][] */ -22,-16,47,37,-76,-20,-64,17,-15,49,-49,100,107,-28,53,-11,-43,-40,10,9,68,-14,-127,-45,68,9,45,-38,107,-15,82,19, 
  /* [438][0][][] */ -50,21,53,22,-25,-10,25,26,-127,-77,22,-68,56,-12,-67,44,-9,-29,16,-95,-33,83,50,64,13,18,-110,-54,-56,-108,-41,-40, 
  /* [439][0][][] */ -60,85,25,-25,91,-12,110,94,-36,90,-4,-127,-82,-1,61,-80,-21,-2,47,53,62,-17,-60,0,-48,2,32,40,51,-24,40,54, 
  /* [440][0][][] */ 55,-53,-37,55,61,-73,61,-95,48,-94,54,-107,-30,2,11,125,24,11,31,-59,21,127,83,48,-30,-38,-44,-59,0,-80,-34,-17, 
  /* [441][0][][] */ 33,21,-38,44,-50,51,-70,53,72,-17,-58,-13,12,-73,-74,-127,-27,67,-38,52,-7,42,-17,54,-54,66,-15,85,-40,-54,56,36, 
  /* [442][0][][] */ 25,-19,-127,-27,-3,13,62,-94,89,29,-26,30,-60,3,-64,-71,-83,-5,-16,35,-100,-85,-45,18,-79,-10,3,-66,7,17,-19,106, 
  /* [443][0][][] */ -30,107,37,27,-103,9,32,-25,-38,37,46,-86,-83,-25,-33,127,32,16,-99,107,18,-7,-119,-26,-2,22,-31,-25,-8,-35,-44,53, 
  /* [444][0][][] */ 9,-34,-41,34,-29,-52,31,48,4,13,-65,-15,11,-84,-2,-111,-73,-13,25,-61,127,41,10,-10,-36,-61,42,56,-113,41,48,58, 
  /* [445][0][][] */ 110,-75,-72,-56,88,-109,31,-14,77,-35,-127,-105,26,-53,-18,64,-71,44,-71,3,61,-2,-46,-4,-41,-5,79,64,-19,69,-35,30, 
  /* [446][0][][] */ 19,-52,54,21,-86,96,-72,9,19,-87,-47,6,-37,-97,-127,-13,98,-63,11,15,46,-6,11,65,-27,-66,15,-10,-56,-32,-10,-35, 
  /* [447][0][][] */ 47,10,-15,5,-11,28,75,-127,-20,-10,27,23,-38,5,11,61,47,75,-66,1,47,25,25,-32,-4,34,-19,-9,19,82,1,24, 
  /* [448][0][][] */ -41,50,39,-12,-87,-54,27,64,31,31,-90,-60,-97,121,47,-50,-20,-13,27,24,-127,-16,78,-6,8,10,-48,-15,-82,28,101,-58, 
  /* [449][0][][] */ 32,-34,1,45,-10,-19,-7,15,-5,30,-43,-12,-56,0,-31,27,60,3,-36,-1,62,-3,-21,30,-87,-17,127,-1,62,60,19,-9, 
  /* [450][0][][] */ -16,23,122,117,-56,-42,-12,55,20,91,49,-9,4,-44,91,83,40,-64,127,-72,-32,6,-64,8,-42,-11,72,19,26,45,-52,-70, 
  /* [451][0][][] */ -114,-73,-55,23,63,23,-32,-31,-11,44,61,-77,28,-5,2,-92,-21,-48,1,127,-124,34,29,29,28,-41,44,2,57,-68,-2,117, 
  /* [452][0][][] */ -97,23,-104,-101,70,-12,-3,3,57,-38,97,-21,12,-49,-40,24,-70,-54,77,-24,-19,-28,-41,-44,52,-72,-31,-28,-26,26,-127,-77, 
  /* [453][0][][] */ 10,50,28,31,38,-7,42,3,-6,-87,-89,-59,76,47,42,-20,127,-27,50,-46,-47,-103,-24,60,25,-47,24,-37,12,37,-15,57, 
  /* [454][0][][] */ -53,19,18,3,-20,0,-23,-71,-39,-43,64,50,36,66,-13,51,-127,-30,8,-9,34,12,39,43,39,-28,-70,30,-30,-13,50,19, 
  /* [455][0][][] */ -73,1,6,-24,-118,77,19,61,-90,-95,114,-73,-105,-42,68,-64,6,9,-94,106,-54,-125,39,-56,-71,7,-127,-18,0,84,92,43, 
  /* [456][0][][] */ 26,36,-40,-31,-82,23,-6,-9,41,-47,21,0,97,127,-14,10,-4,-14,71,0,-10,-39,-91,-110,-90,26,31,-5,-76,16,18,-63, 
  /* [457][0][][] */ -19,-87,57,-3,-34,10,-84,30,-5,13,-34,23,2,19,38,23,45,-3,-87,-18,-53,-28,-70,127,-12,74,-30,44,-66,-8,-41,-41, 
  /* [458][0][][] */ -44,21,-109,39,-26,-14,-5,39,127,15,-5,-50,-31,-65,-18,-28,53,-87,56,-15,-87,-91,-60,47,-4,39,69,53,47,29,76,99, 
  /* [459][0][][] */ -55,35,25,-48,-70,-41,-32,-127,-98,71,12,42,102,-86,-28,-12,62,-79,70,72,4,59,5,-46,-62,-2,38,-24,84,-72,-73,87, 
  /* [460][0][][] */ -29,16,-5,-15,15,-73,23,-39,42,24,-40,-21,-27,52,11,8,19,-37,0,37,7,-35,-8,-54,-8,-7,27,-20,-28,127,-12,-22, 
  /* [461][0][][] */ -13,-61,15,-12,19,84,2,-50,27,55,-120,40,-5,36,-71,-106,-56,40,85,-89,-7,-20,90,1,78,112,-19,127,4,47,-17,35, 
  /* [462][0][][] */ -79,106,-112,-41,-60,94,-6,-61,-10,64,-56,4,67,-21,32,-44,-40,44,61,127,13,15,-49,89,72,21,-73,-12,54,-37,44,27, 
  /* [463][0][][] */ 12,-12,11,29,2,-50,-34,127,69,-24,11,-4,-18,-94,-37,55,0,-32,89,-38,-43,30,-24,-55,100,35,0,-20,5,40,-10,57, 
  /* [464][0][][] */ 79,-82,97,42,57,59,30,26,-19,-23,-63,-16,7,-40,-18,28,22,1,-19,19,-39,127,36,-39,-11,25,39,-30,-50,-109,-22,-21, 
  /* [465][0][][] */ 22,13,12,110,-8,10,-28,69,-45,-5,23,107,51,67,-41,-53,-124,-42,-85,-11,-28,-49,-127,-50,-15,73,18,29,26,12,8,-74, 
  /* [466][0][][] */ 33,96,38,-17,-52,23,-10,60,8,45,17,24,41,0,-37,-67,15,-67,-2,-85,103,-64,-106,-59,-127,-12,34,88,-9,-122,52,16, 
  /* [467][0][][] */ 24,-61,32,-38,-1,62,-10,77,-27,-34,-38,51,58,-73,-21,-126,36,79,-16,52,-8,-127,44,57,58,-66,40,-47,-12,77,45,63, 
  /* [468][0][][] */ 42,-53,15,-16,69,-58,-15,63,59,-16,-3,15,18,127,62,-3,-26,-86,27,-53,-36,48,15,69,-12,-22,44,24,-47,26,66,-95, 
  /* [469][0][][] */ -21,-7,125,-56,-93,75,16,7,93,91,-17,-12,119,-58,16,32,-25,-108,29,14,-24,43,127,2,77,-73,25,18,-3,6,-9,-34, 
  /* [470][0][][] */ 35,18,-41,-51,32,-11,-13,-127,9,-12,-35,29,29,-4,-36,33,-46,-63,22,-74,40,-5,40,94,11,11,16,73,-37,16,-45,-15, 
  /* [471][0][][] */ -113,-92,125,13,-89,12,-5,-127,33,-2,61,25,109,0,-47,-73,18,-43,-1,3,93,-93,81,-92,0,-26,-55,-81,-123,44,57,46, 
  /* [472][0][][] */ 1,-20,-29,-11,67,70,23,16,18,25,5,-25,-35,21,-9,-4,2,18,20,7,36,-28,16,37,4,20,42,14,-6,18,32,127, 
  /* [473][0][][] */ -36,-78,127,-77,-4,-60,41,-119,29,-45,82,-18,-61,48,38,-12,51,49,-21,84,36,-14,69,18,53,-55,-16,67,10,62,73,-49, 
  /* [474][0][][] */ 68,42,-8,25,5,4,-45,-64,-62,-45,-17,22,-3,63,-23,19,69,55,64,-66,-10,67,63,91,57,99,37,-60,33,-33,127,80, 
  /* [475][0][][] */ 38,-90,8,-2,-86,16,-43,-77,-9,58,-84,74,-26,-40,-88,21,-37,-10,-2,-4,-121,37,-99,31,3,0,127,-34,-45,43,33,78, 
  /* [476][0][][] */ 127,39,95,3,64,-76,18,54,-47,-4,-25,24,14,46,44,48,114,-42,-44,-28,-71,-93,54,2,12,66,-9,0,14,1,-72,-43, 
  /* [477][0][][] */ -48,-11,-5,29,-68,-111,25,-55,-12,59,54,51,-127,45,32,17,-15,42,35,-4,15,15,-27,-33,-41,-19,17,68,49,-1,52,-100, 
  /* [478][0][][] */ 53,-1,19,94,-62,68,2,-64,23,-84,-58,-27,29,-38,36,127,-25,89,-62,-28,-55,78,-20,-95,28,81,-99,-49,-24,28,116,-18, 
  /* [479][0][][] */ 25,4,13,-7,42,-61,40,-34,28,-111,13,93,9,82,49,33,58,36,16,27,25,6,42,74,-49,12,-74,20,-127,-71,-1,-14, 
  /* [480][0][][] */ -81,-48,55,53,-52,-109,-25,-30,-1,56,41,7,-73,72,22,-1,14,45,-45,36,-40,48,-24,31,-36,74,-18,-32,36,127,-47,11, 
  /* [481][0][][] */ 19,86,-37,7,-101,-47,82,36,-39,44,-127,4,56,-28,80,13,13,-45,-14,77,-2,88,-10,42,21,53,24,2,94,35,-117,-14, 
  /* [482][0][][] */ 60,-55,1,37,114,61,121,116,81,-48,-79,118,-29,66,91,-39,-72,-127,35,104,-13,-49,104,11,-37,-79,-107,31,-21,-40,-88,-19, 
  /* [483][0][][] */ -54,81,31,-44,-13,78,-77,2,-40,-54,-38,76,85,29,-23,-51,7,0,0,-92,30,-27,-43,-1,16,-77,-127,71,-32,-54,69,-43, 
  /* [484][0][][] */ -15,-10,28,66,-9,30,12,-51,-4,19,84,57,38,-18,44,-90,-40,48,-27,35,38,28,6,46,71,9,-12,127,-27,-24,-24,-38, 
  /* [485][0][][] */ -19,-30,-50,-58,108,-55,26,-19,-58,-6,12,-10,-30,29,-4,22,36,9,32,-43,-45,38,-3,-7,42,127,28,38,-50,27,72,2, 
  /* [486][0][][] */ 4,-56,-59,-32,43,-32,-26,-77,10,-22,-63,66,-65,61,-14,-37,43,2,1,-37,-47,-28,127,-38,-19,-11,24,-36,-15,-53,-47,-11, 
  /* [487][0][][] */ 6,-40,58,19,8,58,53,-4,52,127,-37,106,21,-61,-55,-74,17,22,-21,-11,-40,-57,22,-67,9,10,-30,-59,54,-40,13,-32, 
  /* [488][0][][] */ 39,-9,7,-12,-53,34,56,2,6,84,-64,15,-21,67,38,-43,-20,-83,98,-70,16,14,-52,63,15,20,-14,-45,31,-127,-13,-16, 
  /* [489][0][][] */ 53,13,19,32,36,16,9,11,26,-52,-18,-4,1,2,4,0,10,56,63,41,-41,10,10,-106,127,71,57,-6,-42,-43,23,4, 
  /* [490][0][][] */ 15,-58,11,50,4,-9,13,3,31,-37,-53,60,-34,-77,35,39,53,-27,19,26,-7,-21,-10,10,19,5,-66,-43,-127,-52,63,12, 
  /* [491][0][][] */ -35,-33,-44,-17,28,-43,34,36,-8,29,-96,-14,8,-42,-7,-18,-16,-37,-7,97,36,-22,-22,94,8,-19,20,127,56,45,-28,57, 
  /* [492][0][][] */ 63,-36,-28,37,0,56,-37,-40,7,-7,-127,82,71,12,21,81,-80,22,81,-52,-52,48,57,2,17,17,-24,-23,58,-4,49,-53, 
  /* [493][0][][] */ 4,106,-91,80,10,59,60,19,-22,-45,-2,-45,-5,-22,-23,-127,29,-99,67,5,-33,-83,-19,32,29,12,28,-45,-8,-6,50,-107, 
  /* [494][0][][] */ 37,-127,60,58,-41,66,-59,38,-9,85,-76,29,62,29,48,70,-25,59,-26,-21,-24,60,-34,57,-47,-84,-17,15,-60,-44,-115,-36, 
  /* [495][0][][] */ -97,-102,46,-2,-26,-56,34,31,71,101,-65,-3,-17,43,85,-46,-102,17,81,105,-127,-6,11,49,-106,23,16,-55,75,29,-20,76, 
  /* [496][0][][] */ -21,-74,-104,16,-5,-16,95,8,-59,-20,-57,-76,42,58,-43,77,-46,-42,74,-12,-22,-105,127,12,57,-7,-83,-90,-10,61,-28,115, 
  /* [497][0][][] */ -47,40,30,-43,32,2,13,-81,-22,12,-42,-3,11,-127,-70,-73,26,67,8,48,-46,105,-15,8,-68,7,-90,-40,-110,42,39,-69, 
  /* [498][0][][] */ 23,50,7,34,12,80,23,15,22,72,-17,-59,-19,102,37,-20,-8,48,-32,-5,-16,17,58,59,-103,-7,-62,-48,9,-127,33,-51, 
  /* [499][0][][] */ -35,-115,-104,16,50,-37,46,-41,27,5,-120,-14,-70,-32,10,-38,44,-59,-37,55,-80,127,-73,-6,88,-31,44,48,18,-107,105,3, 
  /* [500][0][][] */ -38,-73,27,-19,-64,-35,-7,81,-97,-49,97,-36,3,-60,2,-67,-14,40,-127,21,6,47,-3,95,73,-8,32,116,-57,-13,13,22, 
  /* [501][0][][] */ -69,-48,-81,-24,-31,-59,-24,-29,-15,23,1,6,73,62,38,23,70,-127,63,-8,-70,-7,-23,23,-25,87,33,-73,-84,-54,107,25, 
  /* [502][0][][] */ 42,-84,-10,-26,-44,-1,-28,14,-84,-74,-3,15,42,18,60,36,-64,-62,-31,-29,-5,37,-127,22,-29,30,-49,-7,-28,34,0,26, 
  /* [503][0][][] */ 54,0,72,75,-43,1,23,30,-12,-67,11,-35,-11,5,18,-18,7,60,8,93,-13,-17,-7,-2,-40,-25,-81,-1,-127,-1,-21,-17, 
  /* [504][0][][] */ -35,-104,74,-34,-127,71,118,54,8,-14,-8,-7,-19,63,-17,-70,-16,39,2,41,61,16,19,30,43,49,25,-39,72,39,-9,-40, 
  /* [505][0][][] */ 127,-35,-36,-91,-66,-29,-25,-21,45,-46,-27,28,23,-120,33,0,99,-4,-86,-83,-22,44,15,0,96,60,33,85,97,-7,37,81, 
  /* [506][0][][] */ 40,-98,42,-37,-13,-24,-68,-62,-73,23,18,-80,-98,111,-85,-56,-107,-69,87,-127,92,29,-46,68,114,-96,24,-5,42,-58,-15,-41, 
  /* [507][0][][] */ -49,-74,85,-12,5,15,34,127,-69,-35,9,15,-65,43,37,-78,-48,-53,34,0,18,-39,-87,58,14,17,6,70,-93,8,15,47, 
  /* [508][0][][] */ -43,52,-8,11,-56,34,11,-100,-18,-27,-61,-22,40,-115,2,126,-39,-34,-52,-66,-11,-22,-27,6,-33,6,-127,67,-75,36,-50,29, 
  /* [509][0][][] */ -14,-111,1,67,-20,-22,32,19,-36,86,53,-70,-75,56,-88,19,46,28,6,71,-13,-47,19,-57,81,127,57,32,12,-11,21,48, 
  /* [510][0][][] */ -11,29,-31,14,19,-10,-1,-23,20,-32,49,-38,-127,60,-26,23,-66,4,-36,54,-41,72,94,-34,-55,20,-41,16,1,-59,-17,124, 
  /* [511][0][][] */ 39,-46,120,-63,-44,-28,76,114,49,-66,88,103,18,53,37,-61,32,-85,-43,-24,-91,-16,-79,117,-109,-84,31,-28,71,-31,127,6, 
  /* [512][0][][] */ -40,-15,-12,-43,-52,46,28,-21,21,-11,-2,10,-23,17,-3,-21,127,-16,43,-69,-49,37,-6,-4,63,-16,8,57,-67,-23,6,-7, 
  /* [513][0][][] */ 28,15,55,25,59,36,11,17,-46,-127,-51,47,12,-25,-69,-69,35,-15,-104,2,-26,-44,31,-75,-106,-43,53,-105,15,5,113,29, 
  /* [514][0][][] */ -9,61,48,-127,1,-59,61,-42,-59,-64,-47,40,8,-83,0,84,126,-115,-68,24,-51,24,11,24,-26,-80,0,32,-36,8,40,40, 
  /* [515][0][][] */ 103,31,-29,25,6,32,-50,-18,-41,11,104,-43,-108,20,47,20,-49,10,27,-83,-32,-45,-47,35,63,54,127,-27,71,-95,-92,-92, 
  /* [516][0][][] */ 86,-76,0,-50,39,54,-70,78,-127,81,-74,38,21,73,-80,113,-40,23,26,62,108,122,-14,-6,-78,-33,30,11,10,-75,92,-75, 
  /* [517][0][][] */ 22,-44,2,-18,10,10,-66,94,29,-5,2,-54,-44,-36,-46,17,3,-55,34,-18,44,48,41,-80,-63,-97,-29,127,55,-123,95,-50, 
  /* [518][0][][] */ 37,5,61,38,6,31,3,-3,-45,-85,10,-12,-38,-12,28,9,4,53,-27,-41,-14,3,10,-20,8,26,-13,-32,-19,-104,0,-127, 
  /* [519][0][][] */ 67,-72,-52,16,-62,9,55,61,10,-45,-87,33,-120,-109,32,27,-21,-51,-6,15,-55,-17,-127,76,-102,-4,25,-90,-64,-14,2,-93, 
  /* [520][0][][] */ 14,-76,12,-3,71,-90,25,67,12,-5,-79,-87,-51,-20,23,95,35,-112,-51,60,16,1,11,119,-38,-60,-11,-122,-127,123,-93,108, 
  /* [521][0][][] */ -77,-58,14,-11,53,5,-6,-71,-41,-57,1,6,-66,-9,87,-26,-42,-14,34,56,53,126,-19,84,34,-77,5,-67,64,-21,-4,127, 
  /* [522][0][][] */ -9,8,41,-9,14,-90,57,-3,-7,-120,-14,19,-33,-13,17,11,45,15,-53,22,44,-21,27,-37,-13,28,-34,127,-12,19,5,-51, 
  /* [523][0][][] */ -11,85,-55,-16,-62,27,7,15,-6,-28,-127,-64,-55,117,-9,-9,4,-28,-77,62,21,-18,-89,46,-48,24,17,-88,-33,1,-120,-30, 
  /* [524][0][][] */ 2,-22,54,-46,40,94,-4,-6,50,-40,-127,-37,90,98,-9,-14,12,-31,-8,-36,30,-33,97,-36,48,-26,51,12,-66,52,46,5, 
  /* [525][0][][] */ -127,-20,65,-54,17,0,85,24,-90,-6,-31,111,63,-34,-122,-23,-25,-16,4,92,-18,-18,26,-40,50,8,1,85,-36,-47,-14,85, 
  /* [526][0][][] */ -6,-21,-55,-37,15,-46,67,27,19,-116,-91,44,-24,-14,-35,-40,20,55,-31,43,1,-47,-7,-36,90,33,-82,127,-48,-17,73,10, 
  /* [527][0][][] */ 45,30,-36,4,3,-14,-36,-8,-30,-5,46,29,-10,-1,-116,-17,-24,76,18,-29,-35,70,64,6,-20,4,-24,22,-127,-103,-24,-34, 
  /* [528][0][][] */ -16,14,-5,-108,-68,-33,57,-14,-87,23,83,-31,9,1,-89,-127,-112,-91,18,-25,-71,89,105,98,-58,26,17,-38,-46,-50,-2,-39, 
  /* [529][0][][] */ 65,103,-28,-15,-27,-14,71,37,48,-29,0,-7,-20,16,72,-71,-9,17,-31,8,-75,-127,0,-44,-6,67,78,-13,20,44,-32,24, 
  /* [530][0][][] */ 71,23,-16,72,-60,14,54,25,36,-127,-42,3,107,0,-5,-78,21,-60,-13,-12,-37,45,26,-23,-20,-42,-58,-53,-51,-21,90,32, 
  /* [531][0][][] */ 40,8,-15,-8,-5,31,70,-7,-29,-3,-34,7,-9,82,127,32,-33,16,-28,9,14,-17,-2,13,-16,35,24,-87,-39,10,-83,-45, 
  /* [532][0][][] */ 49,-91,-17,33,82,-39,41,35,-36,-65,43,36,-20,32,-16,-30,-93,-34,74,15,-17,2,18,127,-75,-13,-66,-88,39,25,56,-91, 
  /* [533][0][][] */ -82,-101,-25,-3,-95,127,-90,-29,59,2,-47,-67,-58,-22,29,-101,48,44,-58,-13,-26,-50,14,38,84,98,-90,29,33,-72,46,-19, 
  /* [534][0][][] */ 75,2,5,-111,35,-17,-11,-3,13,-32,-6,5,-42,3,54,34,37,16,15,3,10,-81,18,-33,27,5,-54,-38,-37,127,-14,47, 
  /* [535][0][][] */ -58,-127,24,13,99,10,-20,15,-59,-41,-70,32,0,47,-66,12,13,35,44,-74,42,-50,-56,3,13,66,39,21,-46,13,21,-45, 
  /* [536][0][][] */ -14,24,-52,55,-40,111,38,35,10,6,-18,5,32,109,96,-85,-59,57,-74,69,44,68,-34,127,-4,58,26,-11,-85,-112,-81,-111, 
  /* [537][0][][] */ -80,40,-127,-96,27,-7,2,-69,-56,-37,-9,-66,-7,-118,21,42,115,-37,-81,105,-23,31,-14,-47,-39,15,56,69,28,16,-31,7, 
  /* [538][0][][] */ -98,-80,32,0,81,-58,-27,21,120,55,-4,-42,37,22,74,48,-19,9,65,35,-21,120,31,-97,-63,-88,-84,-127,75,-21,-115,45, 
  /* [539][0][][] */ -127,-124,-35,-10,-20,110,74,-18,-32,-19,35,-89,-54,-33,-27,59,-21,-58,54,-29,-118,21,-50,45,72,70,-25,57,-33,29,-11,-10, 
  /* [540][0][][] */ -63,50,8,106,37,4,8,45,-100,47,14,-38,127,-5,18,-110,-8,23,-65,28,-49,53,47,-15,-114,-21,-96,117,18,-99,-17,-48, 
  /* [541][0][][] */ 7,68,-39,123,-92,-59,-5,67,-86,-3,-85,-39,63,-101,127,-74,78,80,76,-55,14,43,-121,63,-66,-41,-61,53,-36,-100,118,-100, 
  /* [542][0][][] */ -70,87,-21,-108,23,-57,43,93,-72,-8,3,-51,-29,-127,109,-75,37,56,-19,109,-121,-3,-35,-7,38,15,-66,117,-29,-12,112,31, 
  /* [543][0][][] */ 18,11,75,10,-45,-64,-11,-23,24,-73,25,7,59,-8,16,-5,-15,-32,-6,7,103,-25,20,58,-46,20,-127,43,44,73,-6,-65, 
  /* [544][0][][] */ -63,43,-57,-56,9,94,-127,-82,41,-57,-30,23,80,-43,38,-48,14,-24,-11,-22,-24,26,124,-15,33,-22,51,4,3,82,28,-18, 
  /* [545][0][][] */ -41,60,-20,39,1,-22,41,-50,40,-17,-32,-28,-6,-8,43,-127,-14,64,-43,49,-22,-77,50,16,-10,-23,-84,8,-62,6,-22,111, 
  /* [546][0][][] */ 79,-40,1,35,-31,-29,31,-13,27,-46,-16,16,53,-91,-28,7,9,64,-42,7,-43,-65,-3,26,-77,-127,55,-10,-18,14,-93,52, 
  /* [547][0][][] */ -72,-37,54,-121,51,-51,-68,7,77,-28,32,23,-58,-88,-34,15,-13,11,28,-20,-39,-107,-40,-48,71,-71,-124,127,-46,65,43,18, 
  /* [548][0][][] */ -34,-103,-33,18,83,-9,83,76,103,-6,-72,-39,-97,-43,127,39,127,-38,-79,27,-5,24,-18,-84,121,25,-20,114,5,39,-10,-43, 
  /* [549][0][][] */ -30,-119,-36,8,35,18,68,13,-17,66,-15,-73,19,30,120,-127,3,52,-69,70,83,-43,-34,-85,-39,-12,-6,-21,-32,91,6,8, 
  /* [550][0][][] */ 5,32,9,40,52,-46,45,-34,-19,35,-9,-47,88,24,-127,-55,73,-107,49,63,-54,-37,38,-88,3,-34,-28,-41,59,-28,56,-33, 
  /* [551][0][][] */ -26,-17,54,17,-77,32,-68,-61,49,-43,-87,31,10,-30,-10,-83,53,-126,-35,-117,7,-119,17,3,-74,60,127,-51,60,10,-36,-31, 
  /* [552][0][][] */ -26,-67,-40,42,75,-18,39,-73,-36,44,-60,31,-109,127,14,33,122,-12,-67,73,48,49,-24,-75,31,-19,-15,26,-3,-16,93,-44, 
  /* [553][0][][] */ -113,-19,84,94,-55,23,74,-75,-70,-11,56,20,22,12,9,7,30,5,14,27,15,23,-108,-45,22,127,-21,1,13,11,-70,-34, 
  /* [554][0][][] */ 28,-23,-51,37,-1,-1,-34,-44,-120,-16,-12,-39,6,42,-34,12,-89,22,127,-8,-72,29,-43,-37,-26,-1,91,-44,-90,-1,14,53, 
  /* [555][0][][] */ -32,-19,31,43,-11,51,18,-32,-63,-87,-68,-26,-53,-43,12,-44,21,18,-8,-66,-12,-28,127,13,-12,8,-16,40,-4,80,2,-23, 
  /* [556][0][][] */ 26,9,106,-63,-37,7,-6,-41,-19,-78,-124,127,-11,55,27,49,87,72,5,-7,49,85,-58,-60,-120,-29,-8,5,8,-53,-42,55, 
  /* [557][0][][] */ 73,96,28,-63,35,-15,-63,33,-33,9,15,110,-16,-101,-102,-36,-61,-24,-48,84,6,-36,10,94,42,102,127,76,-3,72,16,60, 
  /* [558][0][][] */ -12,-3,-20,7,-93,81,-20,-9,59,37,17,8,41,39,34,-81,-97,-82,15,47,30,50,-85,25,-52,62,127,-24,52,15,72,11, 
  /* [559][0][][] */ -58,-24,89,31,-3,-21,-45,-27,-3,-40,52,-68,-45,-127,-70,21,-7,-9,18,21,-66,28,-14,-15,-54,54,2,25,51,-40,-20,-20, 
  /* [560][0][][] */ -60,9,-53,1,31,49,80,44,26,-1,28,4,54,25,127,-68,21,57,91,-16,2,23,-41,30,-21,-8,15,-38,-15,5,-23,51, 
  /* [561][0][][] */ 68,53,18,-7,-32,-73,8,-30,83,21,-127,1,90,11,-55,59,-32,7,-13,-63,6,-113,31,33,50,90,-63,-61,79,11,34,-29, 
  /* [562][0][][] */ 4,7,-43,15,-23,127,-48,-16,-29,-69,13,-15,11,-25,-23,-49,33,72,-76,-88,52,-12,-30,122,-20,-59,10,-33,-22,-68,73,-45, 
  /* [563][0][][] */ -127,70,-8,21,55,-30,17,1,31,-12,-63,-65,34,18,16,-12,-49,-28,-61,-49,86,72,106,-45,13,-105,-53,-34,35,54,-87,39, 
  /* [564][0][][] */ -69,-110,-98,71,48,-7,109,48,-66,-54,14,-45,25,32,25,34,-22,-35,-2,-16,-87,110,-8,-25,4,-118,-127,-62,-43,-87,-85,34, 
  /* [565][0][][] */ 10,-127,23,-102,-42,10,6,89,17,9,17,14,31,16,38,-31,30,-37,72,-68,8,-6,37,56,51,30,39,-1,48,-14,-3,-3, 
  /* [566][0][][] */ -37,-68,127,69,-60,-51,51,10,-11,-108,-16,-86,-48,98,-6,76,97,-80,-92,60,97,-51,109,43,42,75,105,42,-9,36,29,-66, 
  /* [567][0][][] */ -53,5,-51,127,-55,-3,17,15,-18,10,20,5,48,-114,-80,16,33,-55,57,-60,-48,35,-36,44,-5,3,38,29,-43,15,1,-1, 
  /* [568][0][][] */ 17,-23,-59,20,-57,-28,12,62,64,19,16,86,-32,-8,-1,-68,20,-7,-2,63,70,46,7,-18,-5,106,61,20,49,127,-33,-61, 
  /* [569][0][][] */ 53,2,31,88,-2,-98,-10,-73,23,52,-29,-70,-27,64,-38,-44,44,48,11,-80,16,1,25,-47,22,68,-1,-127,46,-88,-90,-65, 
  /* [570][0][][] */ 18,-20,14,34,-29,74,-10,-72,41,89,-14,-47,-79,30,24,69,-80,-13,-51,-43,127,29,0,-2,-5,-11,18,25,0,41,2,-35, 
  /* [571][0][][] */ -114,49,-19,40,49,27,-64,-3,-27,-8,-55,-78,-63,-5,47,-55,23,-82,-7,1,-51,-14,18,127,-31,40,-105,-48,-4,56,22,61, 
  /* [572][0][][] */ 21,-108,27,-103,42,-12,16,-38,61,13,9,66,-26,-79,-63,127,87,89,-58,6,54,80,-75,-48,-54,-70,3,-45,-43,-31,34,-73, 
  /* [573][0][][] */ 44,-36,64,-14,-112,40,68,45,-51,-43,-51,38,8,-106,65,64,-29,-38,-9,-62,-30,29,-109,-52,65,62,127,-61,-32,-15,95,98, 
  /* [574][0][][] */ -112,-99,11,-76,-12,-55,-98,56,-26,70,5,72,-127,-20,38,22,-19,11,-80,-21,-47,63,-25,-23,-54,24,-67,7,-45,-9,25,50, 
  /* [575][0][][] */ -27,-52,32,117,83,-33,-74,18,-35,-52,54,-86,-42,64,-8,33,15,13,8,-50,55,-30,-125,-127,21,62,-119,-88,-34,-19,-34,100, 
  /* [576][0][][] */ 127,8,-18,52,-61,56,1,17,42,-40,3,39,-35,37,-48,3,4,-39,-108,-25,-22,-39,-8,33,-21,70,98,-10,24,-51,44,13, 
  /* [577][0][][] */ -57,-68,-21,-92,-127,79,-68,-74,36,8,44,89,-58,67,-74,-93,-28,32,62,116,28,-9,-82,96,-54,-45,-54,23,-63,35,67,-53, 
  /* [578][0][][] */ 6,-63,-10,-37,-37,-10,52,2,47,33,-7,-90,-66,-26,26,13,127,-31,-41,23,-95,-15,82,36,16,-49,-19,-13,-23,-24,84,-59, 
  /* [579][0][][] */ -69,-23,45,-59,-18,-107,3,15,-17,-32,18,79,23,-8,-10,91,13,10,33,5,-42,55,-37,58,5,-45,-76,27,-5,100,23,127, 
  /* [580][0][][] */ -2,23,-64,33,-76,5,2,21,-37,23,31,35,-127,-54,42,-5,26,-75,66,67,51,16,-21,-44,-77,-21,-9,24,-25,-50,-40,85, 
  /* [581][0][][] */ -6,-91,-19,16,-28,35,-2,16,-35,74,-18,-74,-20,-4,-9,12,58,7,-19,-121,-61,-37,-20,-9,-90,-20,-41,-39,38,-6,-37,-127, 
  /* [582][0][][] */ -127,-8,21,40,-46,67,-44,-33,-36,-3,-5,8,82,-22,3,-12,-47,-47,-43,-20,74,29,22,21,24,89,28,55,8,64,-48,14, 
  /* [583][0][][] */ -61,-62,4,44,127,-3,22,20,-8,-67,-5,28,-31,-4,-4,19,-13,-30,-40,22,15,-4,53,82,-5,-25,13,82,-32,-28,15,-38, 
  /* [584][0][][] */ -31,-13,-11,-45,30,3,25,-45,-15,9,-46,-17,-3,-5,-44,-25,-2,-1,-13,20,-85,46,-3,-57,69,-18,74,52,-127,-5,93,54, 
  /* [585][0][][] */ 19,64,-47,37,59,-6,-6,-61,56,38,-6,-31,-35,-37,62,33,-6,-34,12,17,98,-47,-10,11,-24,127,15,26,31,125,-28,54, 
  /* [586][0][][] */ -20,53,20,27,47,43,-8,3,39,-85,-5,0,43,-13,-3,-5,18,-127,7,7,-2,-7,3,6,40,-23,4,-20,10,12,-23,-23, 
  /* [587][0][][] */ 53,97,-72,8,37,45,-51,127,-74,-20,-109,81,74,6,-15,65,49,-23,31,13,-14,-23,7,74,-28,-7,58,-17,-54,47,50,68, 
  /* [588][0][][] */ 50,65,16,-75,-12,-43,-46,-39,-104,52,14,-23,-22,-6,-57,74,36,127,15,-57,39,-83,5,-94,24,-19,-71,27,-3,109,67,-55, 
  /* [589][0][][] */ -127,-79,51,-7,-3,2,26,-125,15,-96,58,-3,39,-29,11,-35,-48,37,64,46,-18,39,-90,-15,-70,-86,-31,-62,20,53,44,3, 
  /* [590][0][][] */ -127,-90,50,7,11,24,35,-2,-61,46,47,-97,14,86,110,52,-17,0,-38,1,40,59,18,49,-40,59,26,25,43,-33,76,51, 
  /* [591][0][][] */ 12,58,-29,-91,23,77,-108,-13,-25,4,35,5,-13,-65,8,-28,46,30,-32,-10,5,-127,24,54,-122,-117,36,-38,34,34,-28,-35, 
  /* [592][0][][] */ -30,-71,-57,30,96,-91,15,83,-41,-34,127,3,-18,27,22,26,51,19,5,19,-1,-2,-29,57,-7,55,-117,87,51,4,16,-67, 
  /* [593][0][][] */ 27,0,-37,-12,-38,25,96,-9,38,-6,26,-24,-35,-23,-78,-34,-69,28,57,11,30,-69,47,27,-127,-31,37,49,3,-22,96,-1, 
  /* [594][0][][] */ 19,35,88,-17,14,-73,11,-38,45,65,-79,32,-30,10,-4,73,94,-22,98,-10,3,-48,92,-43,23,-64,15,23,37,32,106,127, 
  /* [595][0][][] */ -48,44,16,95,-101,5,-10,-46,-3,-18,42,-21,-71,-127,45,41,84,14,-33,-7,-100,-19,21,-57,2,10,-12,-51,-94,-15,17,93, 
  /* [596][0][][] */ 66,42,-54,-55,99,119,38,-77,115,64,-5,-47,-50,44,-5,11,-21,-76,-19,127,19,-19,-78,-2,-38,54,-26,-61,15,-22,41,31, 
  /* [597][0][][] */ -119,33,29,-3,-83,-12,10,127,-15,-5,-22,-27,-106,-81,-14,-13,84,-98,22,-42,64,89,-28,24,17,-28,73,-61,50,30,16,-51, 
  /* [598][0][][] */ 13,15,-34,21,-15,38,-26,-19,-1,-21,-57,-23,-33,-90,19,-66,47,76,64,-30,34,27,-127,-7,12,33,87,-91,48,58,121,-17, 
  /* [599][0][][] */ -1,-45,-35,23,-1,-28,-26,30,127,38,-58,45,-18,56,-37,27,-81,-85,30,50,-32,-33,-5,-26,-36,-1,70,-15,-29,10,-53,36, 
  /* [600][0][][] */ 37,-24,10,66,-1,-19,3,-81,127,-46,-24,-19,25,-42,-15,117,-105,-106,-106,-66,11,-3,51,15,-17,44,47,73,1,36,85,-21, 
  /* [601][0][][] */ -77,33,-68,57,-60,-25,-57,25,62,-79,62,-34,44,-32,-115,-23,-120,-127,21,-7,-100,-30,-22,102,-27,47,-90,31,-88,11,28,46, 
  /* [602][0][][] */ -113,-47,100,15,13,1,16,-25,-68,-30,-76,65,62,11,-76,-122,-35,28,5,-91,11,-2,-127,10,-115,-66,-32,-92,63,108,-46,-14, 
  /* [603][0][][] */ -65,51,-53,-37,-1,-23,106,6,-54,24,-87,23,-37,-10,-16,-7,21,-47,1,-54,70,50,-31,-39,22,18,50,24,-127,59,-68,-68, 
  /* [604][0][][] */ -1,-98,19,43,45,-1,51,51,21,-45,-40,-41,-112,59,7,19,66,-1,-43,59,-127,49,-55,72,-67,28,29,64,14,-60,64,25, 
  /* [605][0][][] */ -51,85,-21,24,-14,34,57,-86,20,-8,21,62,-58,127,16,72,-19,21,32,31,-99,15,-1,-6,-30,20,113,-68,-70,20,-125,-58, 
  /* [606][0][][] */ 7,56,18,-55,35,46,-68,14,-20,58,-48,-26,-52,-37,34,-26,87,-40,0,5,-111,62,2,-55,127,-23,45,-16,-44,-30,24,-35, 
  /* [607][0][][] */ 45,-11,28,-48,18,8,96,-59,78,-36,-63,29,-88,-64,82,-62,65,-41,-60,16,4,-58,-14,-46,32,21,40,127,-32,-1,1,7, 
  /* [608][0][][] */ -40,-126,-51,52,35,24,-4,-114,55,-6,-21,58,-70,-26,61,-21,-44,18,58,-127,39,-60,43,-4,-29,26,35,-5,-21,87,-13,21, 
  /* [609][0][][] */ -17,42,21,23,18,-88,-1,45,44,66,-18,43,5,-100,-61,7,20,-38,19,9,30,-1,17,-13,0,64,61,30,20,127,28,-18, 
  /* [610][0][][] */ 35,30,1,-79,-7,54,-31,14,80,1,-12,-21,-16,-48,45,-16,-22,6,-58,-88,44,-63,-99,-127,-7,-34,-68,13,47,17,-2,-26, 
  /* [611][0][][] */ -100,-84,-5,87,73,14,17,-61,-31,45,39,-53,-13,8,45,4,54,-19,-21,-44,14,56,-2,-62,37,-127,-4,-12,42,-4,-99,-2, 
  /* [612][0][][] */ 26,97,29,32,-39,64,30,46,-71,-13,-33,-48,-29,-21,29,-25,44,3,18,70,-127,38,112,-78,-59,-40,31,-19,8,-48,35,50, 
  /* [613][0][][] */ -110,12,69,-113,-106,13,53,17,-34,-76,-95,-127,38,-57,37,25,-28,75,-71,82,-46,64,-15,45,4,-28,31,-75,68,-15,-49,31, 
  /* [614][0][][] */ -28,-72,42,3,41,-1,-10,-90,-26,-1,-87,61,58,-127,-54,70,-54,44,-17,61,-2,9,-13,81,28,-29,14,-60,96,-28,-33,-33, 
  /* [615][0][][] */ -76,117,-70,-102,88,-96,0,-12,67,-104,24,70,69,-12,107,3,-52,127,48,24,2,87,-63,-60,74,-31,-124,47,-21,-18,46,-25, 
  /* [616][0][][] */ -92,27,-78,-31,39,32,50,36,62,-84,-43,-63,-73,31,-72,-101,69,-25,3,89,-127,38,-32,-46,-69,-29,-3,34,-6,-42,1,-10, 
  /* [617][0][][] */ 17,-120,76,52,56,-22,31,-95,-31,18,30,-50,32,13,-15,69,34,-12,127,38,-3,45,-36,-22,47,51,-42,77,-28,-107,-55,25, 
  /* [618][0][][] */ 41,-3,64,44,71,41,64,-23,48,-19,-32,26,-18,95,97,-3,-86,66,24,16,-26,59,-72,22,-34,-12,24,-21,77,-37,60,-127, 
  /* [619][0][][] */ 30,-80,-21,73,43,11,89,-22,-89,-75,19,30,33,-50,127,-1,115,-47,25,19,31,-27,64,5,-21,-77,46,37,-66,7,31,73, 
  /* [620][0][][] */ -26,44,51,-28,-70,-29,39,34,-20,52,5,-47,-2,1,-2,-28,42,-17,24,17,7,7,47,37,-25,-60,36,9,-127,-33,52,-12, 
  /* [621][0][][] */ 71,-82,32,-81,-20,-34,-88,-31,-94,28,63,70,-81,-115,11,44,-4,69,5,-62,100,127,3,-24,15,6,-8,36,-30,-30,60,13, 
  /* [622][0][][] */ 48,9,-93,-14,-52,50,0,-50,15,-18,-116,-14,-88,60,-51,-24,26,0,-19,-36,-4,-79,30,127,-11,35,64,1,45,-1,56,19, 
  /* [623][0][][] */ -27,10,-77,38,3,46,-50,-20,-12,-26,-56,44,-26,-41,-65,-45,10,-70,-39,66,89,-38,-127,59,-45,-47,16,21,54,-82,28,-56, 
  /* [624][0][][] */ -87,-24,99,63,5,-99,-40,-69,34,60,79,-67,-40,-22,-115,-44,-22,-21,16,47,-90,45,40,-38,127,77,97,-12,0,5,-13,-65, 
  /* [625][0][][] */ -17,115,53,3,-75,-4,67,-56,-46,-17,0,-15,127,-8,-11,-5,-43,-19,8,-125,-98,-21,40,-125,-43,-59,28,-27,-39,25,-51,51, 
  /* [626][0][][] */ 126,35,-25,12,21,16,127,7,-65,18,-34,20,-23,16,26,37,26,-30,12,-16,48,4,56,22,15,-10,126,65,-4,85,24,-66, 
  /* [627][0][][] */ -13,0,53,-9,0,33,-8,-41,-3,18,-49,34,5,-53,14,42,-28,56,-64,-90,28,33,51,-13,-127,40,2,-32,-5,-5,-7,74, 
  /* [628][0][][] */ -7,104,-51,6,-109,-1,55,-60,-67,7,-67,81,-109,-83,46,70,23,-12,-101,127,-26,71,29,-8,17,-4,-50,-105,-11,-28,15,-96, 
  /* [629][0][][] */ 67,35,-55,47,-50,23,65,21,2,-94,29,11,127,35,96,30,-30,-42,-43,-72,-63,32,80,24,-35,40,-55,50,-30,-61,-14,-3, 
  /* [630][0][][] */ 3,127,-76,-51,-91,-10,39,122,-19,72,88,-6,17,85,-96,15,-28,54,82,48,-5,50,-5,66,-23,84,25,36,-50,72,64,72, 
  /* [631][0][][] */ 60,3,30,41,127,102,82,79,63,42,96,10,-32,-37,2,-19,-37,63,-22,-61,-44,-70,-29,94,117,93,-49,42,72,2,115,-95, 
  /* [632][0][][] */ -27,-86,127,53,-46,103,15,-39,41,-11,-21,-8,63,-48,-41,25,26,27,-1,-69,-42,-74,-7,48,-56,-1,2,-71,-36,-17,77,23, 
  /* [633][0][][] */ -30,-60,-96,86,22,-36,1,58,-10,10,-127,13,-6,25,-102,10,34,-7,12,51,-10,-98,27,51,-56,3,22,-8,4,65,23,72, 
  /* [634][0][][] */ -40,93,-100,-108,22,15,-51,48,-25,7,-104,-34,62,-98,-43,-43,-127,-23,-1,70,25,15,12,47,-17,106,-61,5,-29,104,80,90, 
  /* [635][0][][] */ 49,9,29,31,-24,31,55,-12,-81,33,-31,-63,-6,31,-127,19,64,50,69,-64,23,-73,17,-42,26,-37,8,24,-20,-74,-24,-26, 
  /* [636][0][][] */ 127,44,14,-40,-39,55,-77,23,1,16,3,-40,3,7,42,40,25,-9,-36,-14,-10,-32,47,7,-47,32,77,-92,-16,-14,-2,-14, 
  /* [637][0][][] */ -6,32,-40,-61,-14,-31,9,92,30,127,50,77,38,47,-81,35,20,53,-53,110,5,-13,69,94,12,-7,-80,-75,7,28,-125,64, 
  /* [638][0][][] */ -18,51,46,5,25,42,75,-121,-117,-34,29,67,-20,127,3,-58,57,6,2,-32,-71,-33,-85,15,23,-68,0,-5,-50,-88,88,-28, 
  /* [639][0][][] */ 72,-29,25,127,16,76,47,35,-75,-39,-59,58,56,-21,11,-114,-26,19,41,15,-68,12,-117,-13,-107,26,-16,78,24,50,78,74, 
  /* [640][0][][] */ -127,15,80,-5,-24,50,-21,-34,-4,63,-36,-48,43,-36,30,89,2,9,40,72,-46,25,-24,23,-10,2,16,-7,-8,-15,14,15, 
  /* [641][0][][] */ 8,-36,74,3,-57,-60,-22,46,-24,23,-4,40,-15,-127,73,22,25,118,-41,-30,18,84,17,3,23,98,-30,50,-16,85,-21,2, 
  /* [642][0][][] */ -57,-26,50,-7,10,-4,20,11,67,-99,-11,50,-86,127,51,9,-2,1,17,-1,30,14,11,-18,-73,27,-29,3,12,30,-3,22, 
  /* [643][0][][] */ -105,4,20,28,-127,120,-98,41,-18,-77,-60,-78,49,38,-99,-7,41,103,27,61,-50,-40,-7,-78,-10,-15,-24,-38,64,12,-29,-4, 
  /* [644][0][][] */ -127,56,-11,-3,61,-21,88,-46,-17,-32,88,38,-23,86,-12,106,10,-52,102,33,-14,27,81,96,-28,-19,-42,59,54,4,-78,-23, 
  /* [645][0][][] */ 55,-109,3,-24,127,-15,-89,61,27,8,-3,79,-3,-87,-4,-33,-51,25,9,-10,-74,59,77,-63,-83,22,-29,0,-18,32,78,8, 
  /* [646][0][][] */ -18,61,-57,-7,-33,9,-58,-63,-10,31,38,16,14,25,-80,-4,3,-15,4,-19,-127,47,12,-13,29,63,45,5,-21,-59,-42,37, 
  /* [647][0][][] */ -60,71,-48,38,-11,55,12,-127,-5,57,44,-52,-99,16,91,-30,-37,56,92,-64,-19,-8,-65,59,-64,-39,20,-56,-27,-6,3,-42, 
  /* [648][0][][] */ 43,-16,-69,-30,-35,-21,55,-59,51,-1,-127,-71,-33,9,-22,-16,21,0,-34,-15,-17,4,-17,-67,55,23,80,30,-82,25,108,-22, 
  /* [649][0][][] */ -21,-16,31,48,19,-60,98,-51,-41,-57,33,5,30,-47,-20,97,-4,-11,72,-66,-21,-32,59,-16,-75,72,-127,-61,32,-2,-31,-28, 
  /* [650][0][][] */ 3,-33,34,-95,-39,-13,13,23,114,99,29,-62,16,67,3,33,-43,19,18,-10,6,51,-47,1,-47,81,-127,-19,-72,78,55,4, 
  /* [651][0][][] */ -57,-49,26,88,101,-10,-47,-69,-46,-66,71,11,-39,7,-127,-120,71,-27,-8,32,6,-27,-45,119,28,35,-23,21,36,16,-54,34, 
  /* [652][0][][] */ 29,70,4,-35,9,-64,32,-18,-24,35,52,31,-9,-24,27,-114,-37,-28,-127,4,6,17,-53,-111,3,-35,-48,26,50,44,15,12, 
  /* [653][0][][] */ 21,-13,-3,-89,-59,39,-16,62,28,-23,60,-3,3,-3,21,-57,58,64,-53,42,37,2,4,-9,-76,-49,21,-15,41,-36,49,127, 
  /* [654][0][][] */ 9,-81,-28,98,-26,-21,94,-14,9,-87,-66,-56,-85,21,-28,89,127,16,110,110,-3,61,-51,-114,-41,63,74,35,50,99,87,57, 
  /* [655][0][][] */ -84,-68,-69,115,78,92,113,66,-102,61,-96,11,-58,-55,-127,78,-53,113,4,-59,-44,-102,-62,51,20,67,-71,-36,0,44,-17,-103, 
  /* [656][0][][] */ 55,-11,27,-28,-9,56,127,-19,11,-4,11,36,9,-9,-35,-22,33,-12,5,19,-53,-10,-22,-36,-55,9,-43,1,0,-41,-49,16, 
  /* [657][0][][] */ -59,-40,48,36,41,-113,30,22,-4,20,-112,-41,-34,3,-55,-60,127,30,-28,43,-57,47,54,-29,30,25,18,78,-108,35,15,-64, 
  /* [658][0][][] */ -23,26,20,59,-6,23,58,-7,-11,-10,-33,-43,9,-56,41,-13,70,16,26,94,-53,36,-41,70,-14,127,-26,18,-47,-74,-17,65, 
  /* [659][0][][] */ 30,-127,-115,111,80,98,66,44,-99,64,-28,79,24,41,6,77,32,28,75,15,-30,75,12,-33,43,-99,81,-72,45,32,-66,51, 
  /* [660][0][][] */ 92,6,-13,-90,-55,16,-10,-25,98,-112,-98,-36,-53,-31,-25,15,54,-45,-8,76,127,-15,-27,24,7,-27,67,44,-29,-121,-10,3, 
  /* [661][0][][] */ -30,31,10,-82,36,101,-54,36,-57,-17,19,13,21,18,-49,-78,-10,-74,-12,-16,106,19,-63,-53,-29,-65,-127,-62,-64,33,-16,61, 
  /* [662][0][][] */ 75,2,7,6,-53,-11,76,-57,-81,55,-49,-74,-126,-37,-107,11,-73,70,127,85,-99,67,68,11,12,-84,24,-18,-19,-83,-42,17, 
  /* [663][0][][] */ -62,84,16,126,-45,-49,99,-42,28,-127,-1,-31,63,-111,5,-42,41,0,35,22,-12,-61,29,-9,32,49,9,34,-44,65,46,-7, 
  /* [664][0][][] */ -4,-67,50,-23,23,42,59,-1,13,-48,47,-101,51,-57,-8,-20,52,11,-5,1,42,63,-3,17,-127,-120,-74,-100,66,-26,-118,-10, 
  /* [665][0][][] */ 59,-8,-50,-38,76,5,68,52,-85,-75,100,-75,5,-10,-26,-16,10,-94,-107,-29,17,-92,85,-9,-9,11,59,65,40,127,-28,60, 
  /* [666][0][][] */ 10,48,-2,51,-45,127,26,-71,-8,41,-44,13,-68,47,16,-90,-53,-14,-101,-16,66,15,-24,96,-38,8,-59,-32,-54,59,38,88, 
  /* [667][0][][] */ -126,81,14,7,38,32,24,64,-45,1,49,120,13,77,-47,-10,116,92,17,127,-52,-73,-36,107,-51,-30,40,96,-23,-5,69,2, 
  /* [668][0][][] */ -64,-7,-4,-92,-32,-11,-78,27,-108,90,-47,-25,-82,-16,49,-5,-58,111,-74,-59,61,127,12,32,-69,-33,-7,-48,5,37,24,-12, 
  /* [669][0][][] */ -1,82,9,-1,64,12,16,39,0,42,50,-28,30,-66,45,42,4,27,70,36,29,38,-5,10,48,-25,-7,-48,52,42,127,17, 
  /* [670][0][][] */ -34,-13,-72,55,26,12,41,35,-62,16,-69,-112,-9,25,-21,127,13,-8,-31,70,26,28,62,-46,-125,-117,110,5,-74,61,49,55, 
  /* [671][0][][] */ -10,58,39,-24,33,-13,-7,71,39,-21,29,-127,107,78,-21,27,5,3,-31,-2,24,-17,-25,-8,-18,-21,69,-58,18,69,52,-47, 
  /* [672][0][][] */ -29,-12,52,9,-62,34,59,70,-65,-18,-20,3,-49,-67,35,42,-99,22,-105,81,-127,-51,-77,-21,-6,-48,-8,-56,46,-33,69,-5, 
  /* [673][0][][] */ 35,-80,-99,-79,64,21,-34,48,-95,-40,28,-60,-127,17,9,-68,50,-9,13,-39,-39,-83,32,55,29,0,42,102,-71,-36,-21,38, 
  /* [674][0][][] */ -4,-127,10,-46,-20,9,9,-122,-44,-96,53,39,-5,61,2,-51,70,4,-41,18,42,-14,-93,-32,78,65,104,-56,3,-28,-21,8, 
  /* [675][0][][] */ -24,-8,-2,-55,-18,65,-41,51,0,27,25,44,-127,14,75,-12,-29,43,22,-19,-20,30,-84,17,-47,-66,-29,18,26,-107,-10,-93, 
  /* [676][0][][] */ 52,-86,0,6,18,42,4,9,-10,-16,7,-75,-31,-16,-25,-22,-45,-3,-50,55,-23,-14,48,48,-28,50,48,-7,37,-127,-6,57, 
  /* [677][0][][] */ -51,-67,-41,-21,3,-34,-4,-11,-45,-55,8,-31,7,-5,-80,-12,-55,53,30,-27,-36,43,1,83,-127,-18,19,-38,-34,-78,-29,44, 
  /* [678][0][][] */ 56,-26,-19,46,32,-2,-20,52,10,-96,-107,30,-85,1,-12,46,30,17,-82,-40,21,-21,16,-21,-15,89,67,96,-36,-81,-114,127, 
  /* [679][0][][] */ 22,37,-6,-6,-7,-102,42,-31,-76,45,-19,-97,-26,74,-18,10,23,-85,77,-25,-17,39,-86,1,-52,-47,-127,-30,-16,38,109,0, 
  /* [680][0][][] */ -28,-71,8,49,-18,-51,-96,-79,48,127,91,78,-20,14,-13,-3,-85,-74,-55,-16,39,38,91,38,5,86,94,-71,5,68,-35,94, 
  /* [681][0][][] */ -22,7,-57,-97,-63,44,-31,26,-25,51,58,34,-15,-87,-36,46,-9,-98,57,65,-14,54,-100,-43,-66,-20,-117,-70,-127,-79,9,-7, 
  /* [682][0][][] */ -13,-19,40,-97,27,31,-36,127,-45,23,-15,-109,-124,-48,30,69,19,-112,-41,-91,47,-57,-124,30,-17,72,1,-24,-105,5,30,-116, 
  /* [683][0][][] */ 7,-11,121,8,-42,35,-65,-36,51,38,-15,-26,19,-45,10,-54,79,-90,-6,31,-43,-14,-30,127,-56,101,67,-30,24,80,-110,-87, 
  /* [684][0][][] */ 11,-28,-41,40,-127,-90,35,-30,-10,-25,-61,-8,62,112,22,-2,21,-16,25,86,-30,-54,-14,-50,81,-18,-80,85,-84,1,47,1, 
  /* [685][0][][] */ -57,-43,-45,35,-96,27,68,3,-9,-35,-39,39,-8,-84,18,61,100,-22,-124,72,-27,24,-53,73,-105,-10,123,24,72,-127,26,-12, 
  /* [686][0][][] */ 47,67,36,3,-24,-38,-92,-10,-32,111,-42,-87,45,61,-55,-26,-12,-62,37,-38,13,27,-127,54,-28,18,-38,67,-14,-22,28,82, 
  /* [687][0][][] */ 35,127,42,-79,19,117,-17,16,78,66,-81,-113,-20,-86,-57,-25,27,73,7,66,-69,-22,94,-39,16,-47,7,5,-92,88,12,-9, 
  /* [688][0][][] */ -9,1,80,11,-91,82,-47,-61,49,-85,-17,27,-95,-40,-32,-30,-32,-97,5,30,26,-31,-100,-36,-127,30,-4,20,41,110,14,-61, 
  /* [689][0][][] */ -54,-27,19,-25,1,61,-10,1,8,-30,-3,81,92,127,18,19,67,-7,42,-7,-24,59,7,-5,-37,-12,25,60,-10,2,14,10, 
  /* [690][0][][] */ -3,-51,-56,71,45,-64,-78,19,37,-83,109,53,-6,-10,42,-127,15,-127,-83,78,-15,-87,49,-49,89,0,24,-60,26,48,62,-11, 
  /* [691][0][][] */ -61,-109,101,-45,-63,51,38,41,-84,-18,-45,-82,109,127,-93,18,-37,-71,78,-24,-77,16,-84,-3,-6,41,-24,-20,-3,49,-8,12, 
  /* [692][0][][] */ 127,11,-38,-5,13,-116,-32,-78,73,-2,104,-46,-14,60,13,-105,-12,-26,30,-18,49,41,-21,-29,-28,-36,-66,50,-89,-63,8,-17, 
  /* [693][0][][] */ -18,20,127,37,14,29,-3,10,41,2,39,8,-21,6,12,-70,43,33,-3,6,8,-54,-9,-1,-49,-71,14,77,46,45,23,-62, 
  /* [694][0][][] */ 22,-38,28,-10,96,56,-13,8,84,32,17,-14,-127,-10,60,-88,75,42,16,54,-14,40,-69,37,-9,-60,8,17,51,11,-64,8, 
  /* [695][0][][] */ -36,70,-17,-10,-90,16,-2,-43,-46,-42,-18,31,3,5,-53,18,-127,12,-9,-47,51,15,35,-3,0,17,39,42,-70,52,6,41, 
  /* [696][0][][] */ 35,-3,-38,48,-14,-3,15,-113,-14,22,-127,25,32,19,-14,-73,16,-60,35,-78,32,70,21,-17,-29,-12,-31,47,55,-59,-12,66, 
  /* [697][0][][] */ -35,-71,-72,-48,-85,-65,52,53,49,52,-97,-7,41,-66,2,59,-13,-30,25,-69,52,42,-127,-70,72,48,110,32,24,-9,31,-20, 
  /* [698][0][][] */ 36,-27,21,-127,4,9,-3,84,-24,-114,-96,65,84,5,-43,-18,-68,46,113,-27,13,94,-3,-21,-51,-52,85,79,-27,7,112,48, 
  /* [699][0][][] */ 42,-67,-82,-4,-13,-57,-127,-27,-74,113,-19,44,-88,-16,79,-28,-33,124,-58,-105,-38,-127,5,61,52,15,27,-49,-80,-40,-18,-11, 
  /* [700][0][][] */ -74,21,39,-11,-3,1,24,25,8,5,15,67,48,44,61,52,-12,19,4,-31,-10,-62,37,-49,-39,-17,4,-24,7,127,19,-51, 
  /* [701][0][][] */ -39,-55,47,-73,-47,15,-42,-55,-55,-35,51,-45,-46,16,-124,16,-53,-40,8,-37,39,-21,4,24,-127,18,61,-33,-22,4,-37,13, 
  /* [702][0][][] */ -28,-29,14,-86,6,-89,-68,57,35,36,-44,48,23,-40,-127,-30,-13,0,19,20,-117,-20,-9,21,-114,-40,-84,-25,-12,14,-39,-14, 
  /* [703][0][][] */ 2,19,-87,-41,20,24,-1,25,-9,-26,8,116,51,-74,2,-3,26,27,-43,-29,32,-105,-127,-39,48,32,-52,-11,81,-31,-3,41, 
  /* [704][0][][] */ 32,-24,25,91,-8,1,27,-37,-31,66,-20,21,48,17,77,13,9,101,-4,-41,-57,-30,18,26,-8,-34,-42,59,-14,-22,31,127, 
  /* [705][0][][] */ -26,71,18,34,49,40,-27,-29,-127,14,-33,82,49,127,-29,13,95,-96,22,-20,-59,-5,-104,15,-89,-41,-6,-97,-17,-87,-4,13, 
  /* [706][0][][] */ -59,28,-26,40,-58,-59,-73,-10,57,51,16,41,80,-51,-84,5,43,7,58,-81,-33,72,-18,127,55,-41,-72,-45,-5,-34,26,48, 
  /* [707][0][][] */ 127,-50,-35,27,-89,70,-95,36,-31,-102,-43,-100,75,-13,56,42,-127,52,-1,-32,81,-9,9,2,81,125,70,-27,-5,-35,-3,-4, 
  /* [708][0][][] */ -36,21,-1,0,-34,-14,57,-10,-36,1,-57,127,-4,-25,25,17,-43,-86,-5,12,1,-13,-9,54,-52,31,15,-31,58,-40,-17,-1, 
  /* [709][0][][] */ -47,-36,-92,-48,-46,-12,77,17,-35,-18,-81,23,15,70,-63,-48,74,18,-8,64,-37,-16,-30,-67,-3,-34,40,12,-69,20,127,97, 
  /* [710][0][][] */ 6,-66,-116,3,21,4,0,-75,1,116,-11,0,-92,-33,23,45,27,21,-101,124,-85,48,98,-43,-53,94,-127,8,-43,-39,31,72, 
  /* [711][0][][] */ 4,-62,68,-2,-80,68,-127,-62,121,10,28,-19,-16,7,22,121,-8,-11,125,77,91,-88,-73,107,120,-34,24,-27,-41,-10,14,-120, 
  /* [712][0][][] */ 41,-127,-64,-15,-22,39,26,30,-26,-90,-83,-81,-37,-63,-10,-15,74,-13,10,-1,87,-33,11,-87,-40,-43,-26,-48,-29,12,27,-25, 
  /* [713][0][][] */ -24,-72,81,-24,1,13,62,28,-32,-36,52,-17,3,-15,59,-30,-80,-58,-9,39,-63,63,2,97,-24,-74,-127,66,6,59,70,-48, 
  /* [714][0][][] */ 0,25,-16,73,41,-87,-33,-33,41,31,51,-24,9,-12,26,-82,12,-48,43,3,22,-127,2,45,33,-80,-9,-67,-66,34,30,10, 
  /* [715][0][][] */ -35,32,48,29,95,-12,12,-127,-16,73,-27,-79,-31,-3,-32,22,1,-16,31,-21,-37,-11,108,6,-8,1,-35,26,-73,-8,-60,-30, 
  /* [716][0][][] */ -30,-92,19,35,-36,-97,-22,21,22,-5,7,-17,41,-127,-12,-76,-21,103,-13,-31,-74,122,2,-19,31,-18,-60,92,2,-76,-17,16, 
  /* [717][0][][] */ 7,-87,92,38,49,31,-37,-47,-114,20,62,23,-48,126,30,-65,11,-22,-71,-9,127,-25,44,82,-10,34,-33,66,117,64,-20,-40, 
  /* [718][0][][] */ -13,-22,22,-15,-5,10,-20,-74,-113,25,-127,-35,-29,-43,31,-51,-3,-28,8,-15,23,-23,-40,-36,92,116,-22,-22,24,5,-37,-30, 
  /* [719][0][][] */ -11,17,25,38,-127,-106,-28,16,-8,9,-21,116,25,-53,-21,22,-116,-59,82,40,-37,94,61,-12,-69,59,50,64,-33,27,43,-15, 
  /* [720][0][][] */ -69,24,11,8,-13,22,-38,60,-24,-61,-30,-10,-107,-25,6,-19,36,-24,3,91,15,-102,-49,46,115,36,-88,13,3,21,-127,-79, 
  /* [721][0][][] */ 18,-40,54,35,-83,37,-39,-19,-19,-46,5,20,15,-29,7,40,-39,-127,-7,46,-13,-26,-27,-19,32,58,-8,-23,-53,-38,-43,20, 
  /* [722][0][][] */ 82,-54,-27,-34,24,64,-48,-21,-78,24,-45,18,49,-2,-52,27,55,-62,-73,-2,53,74,51,127,-55,113,61,41,0,16,18,47, 
  /* [723][0][][] */ 10,-96,102,21,-51,-34,35,-9,-58,-59,-46,-77,55,62,-33,-5,-91,14,49,10,70,0,-13,-78,-127,21,-20,-4,-90,-15,2,10, 
  /* [724][0][][] */ 48,-13,40,61,-57,-30,4,127,62,50,-50,-83,-30,-43,40,-54,59,-10,-32,37,69,-14,14,-31,-74,48,15,49,60,5,34,-40, 
  /* [725][0][][] */ -39,-60,48,-21,2,-55,29,-123,-27,-127,-40,73,-2,-19,-1,-46,7,1,-53,115,-64,48,-15,-33,44,38,28,101,-29,60,69,-66, 
  /* [726][0][][] */ 19,127,57,-51,-24,53,-50,11,14,25,-43,94,-2,60,-38,-59,1,-11,0,-6,18,-39,-74,65,36,113,58,39,-38,35,53,-50, 
  /* [727][0][][] */ 4,6,75,55,0,-5,21,60,65,-37,-71,-127,5,10,60,18,83,90,15,-8,54,-5,21,59,-82,-52,-114,45,31,13,-29,-101, 
  /* [728][0][][] */ -60,-8,88,88,4,119,-18,-48,65,-18,73,16,55,-60,16,39,-45,-25,66,18,-48,26,-53,-127,-11,-104,52,-33,-68,-81,22,-12, 
  /* [729][0][][] */ 5,-68,60,52,-69,82,-12,-7,40,-102,-18,-29,29,77,-50,50,3,-58,51,-125,-16,64,-33,-21,13,-21,55,-127,-3,6,27,47, 
  /* [730][0][][] */ 41,-68,-81,0,-119,61,71,-56,23,113,-17,-41,47,-35,-47,-21,-127,-47,38,-30,5,21,-66,-44,-55,-55,42,-121,-12,-50,26,-19, 
  /* [731][0][][] */ -125,3,50,33,89,26,24,-64,71,30,-12,-19,16,-61,16,-4,9,50,7,13,-63,94,53,4,-35,127,39,6,-40,64,-70,45, 
  /* [732][0][][] */ 78,-53,-8,-76,-48,87,-20,-12,-15,-10,-61,3,-8,56,-56,-110,0,92,-19,41,46,-127,-34,-31,-27,-23,-14,51,-14,-5,-46,-23, 
  /* [733][0][][] */ -73,127,68,100,15,58,90,30,-60,-47,-18,-49,-69,52,-38,-36,18,-48,106,23,32,70,80,24,-112,40,-21,24,40,78,-78,32, 
  /* [734][0][][] */ 54,61,-21,-44,9,-54,58,29,125,-6,47,-88,-48,-36,-9,75,37,17,-10,-12,127,8,41,-45,-2,-56,-58,31,-13,78,40,-43, 
  /* [735][0][][] */ -120,76,-31,25,83,-65,-44,19,-5,127,88,2,-21,12,16,-120,34,122,25,98,29,14,32,-1,-56,-52,-71,-26,43,68,6,11, 
  /* [736][0][][] */ 119,-56,-29,13,25,37,-92,-11,38,-41,27,24,40,-62,75,-60,96,46,22,20,-8,-37,-52,127,-18,-41,-94,-30,-82,-45,-19,-15, 
  /* [737][0][][] */ 77,-2,56,23,26,11,118,-58,-9,-57,25,28,35,11,90,89,56,-54,1,64,-32,-70,-53,-3,127,1,28,42,-62,29,-45,-30, 
  /* [738][0][][] */ -1,-54,58,29,-29,39,-68,-46,-14,-6,28,-26,9,-2,12,64,-43,-72,-38,33,-44,-4,87,21,68,23,127,14,-26,-18,1,31, 
  /* [739][0][][] */ 38,90,-47,-120,-45,-12,21,39,-21,-8,-13,28,2,31,16,51,-77,1,66,35,20,-55,-11,4,-17,-10,-13,83,-104,-21,127,4, 
  /* [740][0][][] */ 100,34,17,-20,-17,68,7,9,-127,-16,17,-55,-43,15,62,-100,72,47,-15,-38,99,-11,12,39,6,-18,68,37,21,-74,115,-78, 
  /* [741][0][][] */ 37,-41,-24,71,-50,36,-20,-42,28,47,-21,34,-17,5,40,-41,-52,-37,43,58,94,3,36,-41,67,6,23,74,127,26,-33,57, 
  /* [742][0][][] */ -108,-40,102,-35,-51,71,-18,-4,14,94,-83,-101,35,18,-27,14,-10,113,-31,60,55,46,-16,-68,46,22,70,-77,14,27,127,26, 
  /* [743][0][][] */ -100,71,-20,19,80,37,34,-11,-26,127,1,47,61,-74,71,3,-43,-10,3,-10,9,70,-49,-42,119,-89,25,2,13,47,-2,88, 
  /* [744][0][][] */ -46,-21,-20,10,-12,-61,62,47,80,60,127,65,-20,51,10,26,40,5,-31,-102,68,-20,-84,-13,88,14,44,-57,54,-14,-4,-74, 
  /* [745][0][][] */ -59,-113,35,-12,-33,-103,-107,70,-69,29,-49,67,39,3,-127,36,92,-59,-96,45,90,58,19,1,50,7,41,50,43,-1,-26,-125, 
  /* [746][0][][] */ -8,-11,51,-59,-34,-36,50,-11,-7,-67,-45,-31,35,27,83,111,58,-75,16,16,3,82,-72,127,-1,74,-10,-27,-17,-70,44,-8, 
  /* [747][0][][] */ -31,15,74,-28,-6,33,55,-75,65,59,-41,-50,18,-53,38,-22,21,24,44,14,-74,67,1,42,38,-27,10,41,-127,-2,115,-11, 
  /* [748][0][][] */ -127,47,55,99,9,-51,-10,-48,11,-89,52,-12,56,-1,25,-44,-50,-96,-64,7,-52,25,24,-98,27,49,-38,92,90,-87,38,-26, 
  /* [749][0][][] */ 15,94,-56,-43,-18,19,-91,-62,64,51,94,-15,96,-31,-31,-68,37,39,62,14,23,29,38,-12,-8,28,-67,-55,42,-127,5,25, 
  /* [750][0][][] */ -12,-48,50,-63,0,0,3,27,-11,-108,-6,-20,-50,35,-127,1,-11,-84,0,7,-40,-42,65,-6,14,-50,-77,3,66,40,95,82, 
  /* [751][0][][] */ -127,59,-59,40,25,-42,94,-40,13,-59,68,-31,-52,-13,110,4,40,-6,-27,-18,-25,67,4,38,-86,31,44,-39,34,85,-3,-53, 
  /* [752][0][][] */ -34,-61,-18,-2,58,84,-42,118,127,-59,8,54,35,67,-90,-13,33,122,-85,-66,97,7,39,-116,-61,-28,-46,-62,14,52,69,-61, 
  /* [753][0][][] */ -37,-127,-35,43,2,-24,70,27,51,-16,-8,12,-36,-13,80,46,-5,-76,-50,41,62,61,-34,-88,10,2,117,36,30,119,-92,15, 
  /* [754][0][][] */ -29,-40,-79,-92,-43,-36,43,11,10,26,-52,7,-23,5,-15,-4,33,-8,-3,44,-127,-54,9,19,69,-9,-13,56,-9,69,68,-27, 
  /* [755][0][][] */ 100,-21,29,-69,24,-50,-9,-80,17,3,81,-34,-65,72,-19,-9,54,84,-127,-3,2,-15,91,19,-48,-12,35,58,-19,-53,-66,-54, 
  /* [756][0][][] */ -70,-8,45,-10,26,-51,21,31,64,-47,-70,54,22,-64,13,-21,-27,51,16,-47,-127,-34,36,52,31,-52,62,75,-8,12,-52,103, 
  /* [757][0][][] */ 20,35,-36,127,-83,-28,-64,-125,-68,6,6,16,-8,-114,-22,-43,-10,19,-17,-13,80,41,-15,-3,-25,-113,-22,102,-79,-115,36,-44, 
  /* [758][0][][] */ -15,13,-33,-13,0,27,-42,14,-2,-70,40,-53,23,-30,65,65,25,-42,83,4,-46,-22,37,-32,65,23,-61,17,-10,-22,-16,127, 
  /* [759][0][][] */ -40,-12,-2,-41,-67,-71,-54,-2,-43,65,3,2,1,53,34,-75,-97,19,-16,2,40,-127,-7,16,5,0,-63,14,49,-104,-98,99, 
  /* [760][0][][] */ 82,36,36,114,37,-127,-15,48,44,-105,-76,-44,-91,52,-110,24,-21,12,83,-42,-32,116,6,-62,-68,-10,-6,-8,-41,38,-4,-69, 
  /* [761][0][][] */ 57,80,-50,24,-3,-15,-59,34,-4,-27,27,-3,40,52,45,85,-127,-12,-15,-66,18,33,31,5,69,-1,-16,43,-53,-53,-60,20, 
  /* [762][0][][] */ 31,-104,-88,-46,54,-42,55,-43,-30,-46,-106,77,117,33,6,-127,103,-56,-45,99,-26,-28,-79,-70,-42,-30,-25,53,-54,106,2,101, 
  /* [763][0][][] */ 23,-63,6,9,0,40,24,9,61,-54,-28,-40,-18,-91,-127,-47,-29,68,25,30,35,37,44,80,-56,3,-13,8,1,26,-78,-44, 
  /* [764][0][][] */ 11,-18,2,4,-51,7,39,-24,81,-39,-24,12,23,3,-95,-23,30,-35,-51,-49,28,-127,0,2,-37,-40,31,33,25,-1,11,30, 
  /* [765][0][][] */ -25,-3,-3,-18,66,53,39,-73,-14,-49,19,-46,4,-35,36,86,6,-108,24,61,7,29,32,104,-44,19,-47,85,127,-28,-22,52, 
  /* [766][0][][] */ -10,-9,-63,35,21,-6,-17,127,-69,9,32,-33,68,-66,50,13,-50,52,11,75,56,-3,-29,28,99,34,-62,-33,-50,4,-39,-27, 
  /* [767][0][][] */ 40,15,51,127,1,-23,27,-29,46,22,-31,28,94,-2,34,1,57,-42,83,66,-52,-67,-51,13,-14,9,74,-4,-4,-90,50,-103, 
  /* [768][0][][] */ 51,-127,-48,-50,-70,44,78,-52,-20,-56,-48,37,55,-52,7,-23,-1,-5,0,46,20,7,-89,-55,92,-75,23,-4,-20,16,57,105, 
  /* [769][0][][] */ -45,-62,-37,-38,29,-37,71,-92,5,-71,2,-3,-37,19,25,10,2,-20,-31,28,18,54,11,-15,36,-42,-36,44,-127,-13,-2,59, 
  /* [770][0][][] */ -8,-95,-41,-1,-32,-37,-18,-39,65,-48,-29,60,41,-3,33,-47,38,37,-127,-20,29,-20,-76,-11,5,21,-108,-69,65,99,27,26, 
  /* [771][0][][] */ 8,127,2,36,6,29,-55,3,5,52,-45,74,-6,49,-50,-64,41,-60,-2,-34,-74,-104,-79,-47,-42,-54,59,31,11,-41,103,-94, 
  /* [772][0][][] */ 42,91,-46,-21,-58,-81,-62,-121,58,5,23,-79,23,40,-26,70,39,35,-127,19,-12,45,-8,20,-19,-27,-33,4,-29,28,20,9, 
  /* [773][0][][] */ 30,29,48,41,43,97,-14,-25,52,-18,44,-13,85,-61,20,42,31,32,44,102,31,14,-55,119,41,2,56,-45,-22,-84,-127,-35, 
  /* [774][0][][] */ 80,-70,-107,-25,-103,-86,-28,41,-37,10,-89,-34,49,15,-71,-127,107,-18,-20,-19,-16,-110,-32,-85,-62,-25,-61,22,-46,30,122,-69, 
  /* [775][0][][] */ -127,-71,7,-22,-101,31,30,77,68,-100,-107,27,-28,-19,-37,-93,8,-58,-106,9,9,-17,4,-19,-56,19,-27,91,-73,55,-16,-44, 
  /* [776][0][][] */ 41,-32,-49,-42,14,-56,35,-7,-14,-33,-40,32,40,13,19,8,-13,-80,-26,-43,12,-12,-127,9,-30,6,-42,-12,66,-27,-40,22, 
  /* [777][0][][] */ 66,14,47,-36,101,-52,-54,-92,64,-23,0,-11,-18,-2,-24,28,54,16,54,-112,-66,-86,-43,-93,57,-65,12,-85,-127,-61,-17,29, 
  /* [778][0][][] */ 28,-38,-57,0,31,-50,7,127,-13,-11,-21,-57,9,17,8,-59,-55,1,3,12,-24,22,37,19,-26,-13,85,34,37,-45,-17,14, 
  /* [779][0][][] */ -104,80,-15,26,91,10,62,-94,15,19,127,2,-100,-36,-40,15,-123,51,56,8,35,70,50,-55,-87,-61,-14,-16,11,65,-100,70, 
  /* [780][0][][] */ -20,-19,9,10,-53,21,18,-3,23,36,-55,-4,73,20,34,36,68,-81,-65,-39,-18,28,15,-50,14,127,3,-15,-5,-26,-24,0, 
  /* [781][0][][] */ -18,-62,41,19,33,8,-35,-66,10,-40,-97,-78,-5,-49,-58,-32,-25,30,127,9,74,-29,-57,-14,10,-12,17,-9,76,67,4,-47, 
  /* [782][0][][] */ 77,31,-91,-49,61,71,84,11,24,46,-37,-3,27,64,12,21,9,4,24,50,80,-17,25,2,-52,-3,57,-127,-31,20,-23,-77, 
  /* [783][0][][] */ -105,-81,10,60,-10,-9,-76,-22,-4,47,-46,46,-21,-9,34,-12,-7,-7,0,-29,-31,-12,-7,-10,-42,-127,-18,-13,0,-1,-32,10, 
  /* [784][0][][] */ -71,17,-33,127,-38,91,25,-17,-6,-93,24,111,-116,-65,59,-3,52,-75,47,14,-49,-19,47,49,44,15,-76,3,-81,-61,47,79, 
  /* [785][0][][] */ -16,-45,-51,127,44,-5,-2,-14,32,-32,-21,-32,68,33,-15,10,21,-1,4,-13,12,39,0,40,47,19,27,-14,-5,-7,1,28, 
  /* [786][0][][] */ 11,-63,-13,-19,-40,-50,14,-127,45,-7,72,33,-70,55,21,19,-22,3,79,64,1,-28,46,-71,21,76,-62,-113,-1,-19,-61,-44, 
  /* [787][0][][] */ 2,-74,-35,27,-36,10,86,-4,-63,6,-70,81,-92,16,127,34,22,16,59,-102,-43,53,-37,-19,-91,20,37,-38,-75,73,10,-38, 
  /* [788][0][][] */ 89,-54,29,-77,21,64,-22,75,14,-2,-24,41,-15,47,-127,2,61,-61,14,-15,20,1,-15,-55,1,-65,2,-55,34,-16,-60,-40, 
  /* [789][0][][] */ -18,-54,53,63,18,55,-61,-111,1,-59,84,68,76,106,33,-20,-126,-82,-127,-124,-62,-41,6,26,-38,-21,-60,-76,29,-30,-72,-28, 
  /* [790][0][][] */ -39,127,-43,-21,-30,-5,29,-23,-62,7,37,-30,-29,-1,91,-2,69,-10,-4,-13,-69,-17,1,-50,-48,1,31,-16,90,63,74,115, 
  /* [791][0][][] */ 58,-33,22,20,-23,70,7,75,32,93,43,-83,55,-32,-34,-106,-28,-2,21,127,91,84,38,86,-26,65,11,-21,-10,-60,-13,20, 
  /* [792][0][][] */ 23,49,-1,10,-27,20,-4,93,20,-3,0,-10,37,-14,-7,-110,32,24,3,-23,-10,43,-20,-4,-45,28,-23,59,-83,-93,-73,-127, 
  /* [793][0][][] */ -127,-4,111,-24,-69,102,118,11,13,102,56,42,-42,-74,50,-26,-32,-72,66,9,13,5,66,104,55,51,-9,-42,37,35,-19,71, 
  /* [794][0][][] */ -59,8,63,118,39,-30,-63,-47,15,51,19,25,-2,27,52,-34,50,-13,62,15,-70,18,-8,59,-34,44,-25,-112,127,-22,17,1, 
  /* [795][0][][] */ -1,-98,55,-5,-9,53,32,-14,10,-81,-127,27,-64,10,-16,-52,-87,36,2,-42,-107,-23,65,43,43,-49,79,-123,71,67,49,-107, 
  /* [796][0][][] */ -112,3,-119,-20,-46,-18,7,61,-47,-27,-127,-4,-35,48,25,-32,-49,9,17,8,-13,-61,19,-60,-27,-94,32,63,42,78,32,-2, 
  /* [797][0][][] */ -62,-24,30,-51,17,103,-51,11,-6,60,16,-42,48,5,-48,16,-62,102,111,-93,12,-30,-4,-61,18,24,11,-49,-127,-21,-117,-62, 
  /* [798][0][][] */ 73,-35,118,-85,-3,-4,40,-47,-11,-7,31,-76,-19,59,59,-52,30,-67,29,55,33,-98,29,-127,20,-45,-48,31,-18,-67,35,-61, 
  /* [799][0][][] */ -31,-19,31,-63,-63,105,-80,20,-8,-92,69,-94,-83,73,63,-6,3,2,-18,21,-19,-82,-85,34,-36,-77,127,-72,61,-102,68,-8, 
  /* [800][0][][] */ -37,8,-20,-11,-72,27,-99,-104,16,-47,-69,127,-19,14,-112,24,-22,-43,-22,-2,-26,-33,-10,42,49,109,0,23,-37,49,56,42, 
  /* [801][0][][] */ 61,110,25,-115,34,-9,-31,55,-58,-43,-20,61,-7,0,-61,0,46,23,-13,39,5,-101,57,126,-19,99,-23,30,-37,127,28,-54, 
  /* [802][0][][] */ -74,41,-4,44,44,66,68,-4,-127,-5,-42,11,56,72,98,-51,-45,24,-120,10,-4,-13,-47,-20,41,-20,44,72,-58,-74,-41,-126, 
  /* [803][0][][] */ -127,-79,-14,-22,-13,27,-53,5,-28,-22,-3,76,19,1,9,24,31,-46,-20,-45,55,47,-51,-16,-60,105,-15,-122,43,24,73,-49, 
  /* [804][0][][] */ -38,64,9,127,-15,-23,-26,-12,73,-15,-9,-20,19,-37,120,29,-26,-4,37,4,88,4,12,8,-58,-49,-29,46,74,-102,35,40, 
  /* [805][0][][] */ -63,-17,-4,-84,127,-8,105,12,-49,-64,24,-13,1,-36,-15,8,-13,10,-13,34,-34,13,-3,-91,14,38,-43,8,-21,34,14,-38, 
  /* [806][0][][] */ -46,111,-61,-75,36,-30,-97,9,-10,11,-50,0,-15,14,103,55,108,-11,-50,29,39,65,119,28,109,127,48,3,-75,86,-95,64, 
  /* [807][0][][] */ 35,-8,61,82,53,-76,23,20,-66,122,92,-87,-20,-56,54,26,80,-93,-77,-8,-1,38,-44,-64,57,-38,4,109,-5,-93,97,-127, 
  /* [808][0][][] */ -127,-39,61,-27,20,90,-77,-91,-57,29,29,-118,-36,41,-85,72,22,39,73,-55,-32,75,15,-109,19,-72,-5,-54,51,-76,-15,71, 
  /* [809][0][][] */ -51,-43,-49,-87,-2,67,-13,55,-26,-16,127,70,-8,-33,-127,27,50,90,60,-18,42,-58,-25,26,-54,13,17,-1,24,11,-73,-25, 
  /* [810][0][][] */ -25,41,31,78,108,-94,13,-48,14,26,87,8,-90,20,-8,-2,85,40,-13,62,34,14,83,74,-39,-45,-56,26,127,-12,-37,-83, 
  /* [811][0][][] */ 22,70,24,127,-26,-14,-44,-11,-53,-25,-3,40,114,-80,-33,3,45,38,0,-52,13,92,-12,86,60,-8,30,53,39,-47,94,2, 
  /* [812][0][][] */ 63,-62,-34,113,30,2,0,11,51,-107,114,115,-26,-7,44,83,-44,12,13,-84,8,-7,-127,-30,-50,0,7,-25,37,-59,96,19, 
  /* [813][0][][] */ -50,33,59,38,-127,-3,-28,-6,-18,24,-18,59,60,24,-17,-60,-2,-15,15,87,5,-45,0,10,29,37,4,86,-14,19,-17,17, 
  /* [814][0][][] */ -68,-56,-16,18,-58,-106,14,-41,-125,-68,34,43,89,127,-10,-30,-6,-42,-43,12,-66,-64,31,79,-19,25,29,-27,-51,-125,83,-59, 
  /* [815][0][][] */ -97,23,11,-43,2,22,30,-36,83,1,-108,81,15,39,-20,20,-58,-18,22,119,-11,68,-75,-27,-10,-12,-11,52,-127,76,13,45, 
  /* [816][0][][] */ 25,8,46,10,12,-14,-52,30,12,-99,-42,29,-127,60,-103,63,68,-73,37,-22,-91,-77,26,117,-39,113,80,19,54,-27,-14,-6, 
  /* [817][0][][] */ 21,48,47,-20,-14,44,-39,-59,-35,-17,21,45,-44,52,96,-20,4,31,25,24,-15,-10,-53,2,21,-11,-59,0,13,-127,81,34, 
  /* [818][0][][] */ -79,-61,7,4,39,53,83,-15,127,-125,-72,-30,33,-121,3,90,-13,0,-6,9,52,-3,-43,-70,-54,100,-94,40,41,-59,36,108, 
  /* [819][0][][] */ -51,20,79,-124,-16,16,53,32,14,-82,-12,-101,5,-53,-88,-61,19,65,18,-13,25,57,107,-127,-31,-103,-110,110,-76,55,0,-4, 
  /* [820][0][][] */ 1,-87,-13,127,-15,27,-20,12,-3,-36,-81,-33,-24,-9,-46,-25,-51,-29,-27,-82,45,20,-15,76,-7,-43,-3,29,-28,-59,1,29, 
  /* [821][0][][] */ -34,-7,73,12,-25,-127,-30,104,-37,-26,74,-21,87,-54,20,-30,56,-54,41,21,-65,-40,28,-45,28,-17,-39,26,3,77,-32,-8, 
  /* [822][0][][] */ -34,-87,21,-43,55,-36,-47,-19,82,-97,28,5,-27,6,71,-3,33,24,-52,-127,-28,51,51,9,-75,-55,-9,-108,-67,15,13,7, 
  /* [823][0][][] */ 40,-41,-16,-17,30,33,24,47,10,12,34,55,36,20,-18,43,59,-54,-53,75,-50,23,-46,-44,63,27,34,72,26,-127,-15,-57, 
  /* [824][0][][] */ -32,-34,16,-85,-127,11,-48,-12,-58,35,0,-86,-44,56,11,38,-27,-43,-10,-89,-61,-113,1,-56,43,-3,33,-90,-11,-9,-44,86, 
  /* [825][0][][] */ -15,-45,-117,-17,41,35,47,-23,16,-26,-22,-29,-61,81,45,-18,-30,-47,37,59,25,-23,-51,78,-4,58,127,-53,13,96,-80,29, 
  /* [826][0][][] */ -43,48,-92,-52,-97,57,-127,88,-66,98,-23,24,-5,56,-16,55,-40,-43,57,-105,-43,39,-13,86,-28,91,-3,-19,-58,-111,83,-15, 
  /* [827][0][][] */ -35,-44,92,-102,28,-77,19,0,-10,-48,-109,-5,39,-127,-75,-46,-62,-80,57,21,-95,-14,-10,-99,-37,22,40,30,35,-42,-23,11, 
  /* [828][0][][] */ -45,19,51,127,-38,16,88,82,-41,-47,-89,39,25,-23,-4,65,26,-88,35,75,-22,-18,-33,37,-30,53,41,19,37,-59,40,70, 
  /* [829][0][][] */ 20,-25,29,-40,-37,-1,74,-67,-31,16,65,2,24,-3,-5,10,-62,-10,26,-40,-62,2,21,20,-127,-38,-29,-5,-57,30,-46,16, 
  /* [830][0][][] */ 127,0,-18,18,48,-8,3,-2,-92,91,-126,-46,-123,-72,16,-28,61,-67,30,79,17,-78,-75,-1,-104,-49,-53,17,40,-64,-111,-45, 
  /* [831][0][][] */ -19,52,-45,110,-51,96,-11,16,-37,87,24,96,83,54,61,37,-27,-74,5,-10,92,88,-35,127,-25,26,95,3,-1,65,11,-49, 
  /* [832][0][][] */ 69,109,-84,40,47,17,-67,59,49,105,-44,90,-68,20,63,-127,-58,98,-60,-79,85,27,-23,-124,25,-80,21,3,73,-42,-19,-41, 
  /* [833][0][][] */ -7,33,-39,44,-65,127,-46,26,5,11,-62,57,-29,-59,12,72,-41,-17,61,16,119,4,-3,5,55,-41,-26,16,-20,-95,20,-75, 
  /* [834][0][][] */ -38,87,62,59,-44,65,-6,12,82,-16,-78,1,-34,50,29,-10,-9,-24,-21,71,18,1,-1,-10,-29,-4,37,127,26,-10,18,-64, 
  /* [835][0][][] */ -5,-34,-2,-26,-19,70,-60,-1,-58,3,-66,-22,44,-41,32,-9,-65,-33,-12,-26,-26,44,2,47,43,-37,-24,-38,-127,-9,44,-34, 
  /* [836][0][][] */ -28,-37,-19,-36,35,16,-16,-13,38,5,7,33,-127,-92,-49,3,-43,-73,50,5,-24,6,2,2,-56,26,-57,1,-61,-36,31,6, 
  /* [837][0][][] */ 11,-54,68,-64,-9,37,26,-32,-127,-3,102,-62,-11,80,27,4,33,-11,-37,-80,-60,0,39,-10,-30,109,-2,-31,-23,-85,-18,-23, 
  /* [838][0][][] */ -45,39,57,-117,-127,33,85,21,5,-112,-117,-16,7,-30,-61,58,26,-9,-125,71,-81,-87,-57,15,94,-24,17,35,84,-13,54,89, 
  /* [839][0][][] */ -32,13,-26,-11,35,42,-68,-66,-24,-58,-68,2,-48,16,-47,11,82,-26,-118,36,-92,34,5,33,-12,-33,14,40,-127,19,-8,16, 
  /* [840][0][][] */ -3,-24,36,11,60,-39,59,-79,14,-23,-65,19,-1,-9,-32,-49,-110,5,-71,-4,31,-45,24,2,-27,-17,13,60,127,5,71,-35, 
  /* [841][0][][] */ 15,-16,2,-52,7,-13,-11,-12,-40,21,1,33,127,36,4,-31,-4,-28,-33,56,-44,-39,32,19,32,31,-67,-51,-31,7,50,29, 
  /* [842][0][][] */ 59,-20,20,-33,32,-58,-35,-11,75,-28,3,-7,-67,57,127,-1,-88,-32,12,-14,3,-46,34,23,6,18,-35,44,62,-3,24,46, 
  /* [843][0][][] */ -127,101,-37,-81,-85,27,-73,-59,-93,-53,-83,9,-16,-51,16,45,25,-19,103,-37,26,21,-121,55,11,48,42,28,-16,-1,-9,30, 
  /* [844][0][][] */ -5,-58,48,-30,-14,-127,12,-5,6,2,4,28,13,-30,12,-4,-14,44,25,-33,-4,49,27,-43,-41,51,-58,-100,-1,4,102,-45, 
  /* [845][0][][] */ 36,-48,53,98,-36,-53,-40,121,26,-31,-60,37,127,-6,-13,-2,-46,127,-89,24,-24,-14,7,-53,-94,11,-34,-64,-37,-55,-126,-34, 
  /* [846][0][][] */ -62,-124,35,67,-39,-61,13,17,111,38,20,-5,77,-81,24,127,-21,-59,-36,119,-14,85,-12,72,33,53,46,-75,-20,111,-80,-29, 
  /* [847][0][][] */ -61,-11,19,58,32,-38,-81,-61,36,39,-86,19,-31,5,-38,37,-29,-32,-26,-32,-81,18,-91,33,-57,-50,-38,-67,35,-127,74,-69, 
  /* [848][0][][] */ -45,-14,-27,-35,-37,-11,-41,4,64,-33,103,18,78,127,-31,37,10,16,4,-3,10,-8,77,13,4,-8,78,-28,66,10,44,-72, 
  /* [849][0][][] */ -18,60,127,65,-81,1,30,59,-15,-30,10,-28,-18,28,-6,-74,-72,34,-6,27,61,-51,-19,3,8,67,-19,-45,12,-2,56,0, 
  /* [850][0][][] */ 48,90,8,-15,-98,-34,-19,-38,66,90,-34,39,13,55,1,20,127,-85,38,-9,-24,6,-15,96,-90,-21,12,-69,18,90,36,-24, 
  /* [851][0][][] */ -22,-49,88,41,-44,-124,-43,-106,74,104,50,41,30,-127,55,16,72,96,33,-52,-117,56,-64,82,60,56,-4,27,-28,-2,36,16, 
  /* [852][0][][] */ -62,-6,-30,-32,-37,-49,29,-14,-106,-105,36,56,47,50,-52,127,7,-22,22,46,51,9,56,0,-23,-105,18,-43,5,-31,-71,26, 
  /* [853][0][][] */ -4,-64,-31,-65,-24,33,19,-94,-127,-27,76,74,-16,7,25,5,13,-28,-90,-3,29,-28,-74,6,42,-19,36,38,11,60,-55,-42, 
  /* [854][0][][] */ 46,-28,-1,28,-1,-23,-40,77,-13,-108,-13,-10,1,60,22,127,15,-118,-69,-78,-48,-52,83,43,-99,108,-19,32,52,-12,-50,74, 
  /* [855][0][][] */ 58,52,-9,-43,-79,-14,-66,-16,29,119,-61,108,-5,24,6,-3,-31,-8,-48,79,99,-61,8,-48,-5,-51,-76,43,-42,127,40,-39, 
  /* [856][0][][] */ -39,2,32,-82,-6,-22,27,-84,-37,-9,40,16,-2,48,-3,-10,-88,-2,-14,-15,12,50,44,-62,81,-8,-15,127,-62,-28,73,35, 
  /* [857][0][][] */ -6,-2,-58,-92,-7,-67,4,28,33,-57,-81,45,-25,-67,-12,-93,-61,71,-35,6,42,-10,-56,-47,-20,28,8,72,-2,127,-14,5, 
  /* [858][0][][] */ -40,23,25,9,68,30,-64,-8,-8,11,-46,-30,-66,14,80,8,94,27,4,-25,-11,-35,-6,-64,127,14,7,1,24,-39,7,5, 
  /* [859][0][][] */ -15,-43,-5,-74,-14,-33,-8,-21,18,33,72,-3,-101,-55,-24,-26,127,-56,-27,-60,-43,28,-65,62,-16,37,45,-30,-49,-32,-1,36, 
  /* [860][0][][] */ -127,-7,-18,55,-8,15,-67,49,2,-32,49,63,4,-32,-30,-61,80,-31,65,-49,-70,97,118,23,-33,2,-24,10,-18,-56,-51,-22, 
  /* [861][0][][] */ 14,51,-92,-84,50,123,-54,26,15,68,-54,-110,-100,-25,-49,-46,-48,47,-15,-60,-51,19,91,15,-35,17,86,26,-127,8,21,-120, 
  /* [862][0][][] */ -49,-69,32,15,-7,18,49,43,-9,-30,-3,-21,7,81,-32,-43,127,-26,48,94,32,23,-86,24,-101,-23,-26,10,-83,-24,-21,51, 
  /* [863][0][][] */ -17,-15,5,-54,55,0,-35,76,40,82,-12,49,-44,-7,127,91,1,28,104,21,-5,-65,0,22,-80,36,99,-11,14,14,40,24, 
  /* [864][0][][] */ -100,-47,-2,32,-8,-127,-19,-28,5,-6,1,-27,34,-33,21,-3,-21,-54,34,-32,-46,52,-6,14,9,-2,-29,-70,-36,47,-85,2, 
  /* [865][0][][] */ 26,-104,41,-60,76,123,16,-18,-11,0,-3,-25,-77,127,-51,67,80,-38,-18,48,59,78,-30,22,-97,47,12,-74,11,-59,-66,-84, 
  /* [866][0][][] */ -23,18,23,-8,-34,89,50,-54,-18,-47,18,22,-29,-93,-8,26,-95,18,-15,-22,-51,31,39,-20,73,1,-127,32,-1,116,-7,-3, 
  /* [867][0][][] */ 22,-74,44,-38,98,13,-5,21,17,-19,89,-59,11,-56,18,-57,30,-1,17,-25,33,-8,-71,127,-40,-19,119,11,-3,6,85,30, 
  /* [868][0][][] */ 50,-12,-35,-60,-85,15,53,127,-59,-84,99,37,-8,55,91,-26,-65,43,-13,-24,5,-60,10,40,-11,105,-50,-64,51,-44,100,-37, 
  /* [869][0][][] */ 63,3,10,-10,122,-17,-44,-22,27,-79,58,-42,38,7,-101,2,-111,38,56,-127,-48,-12,-4,54,-75,-30,-27,-90,-37,12,64,5, 
  /* [870][0][][] */ 47,24,-15,-35,-26,-28,18,-54,41,24,28,34,-127,40,-41,-60,-21,34,-29,-79,-38,7,18,-95,-29,1,-65,-27,-19,-31,-102,-17, 
  /* [871][0][][] */ -58,-87,16,-120,-57,7,-118,20,-22,123,-38,33,-74,71,-51,-51,-107,127,-125,32,49,28,19,-10,-9,3,-77,99,-116,35,-68,61, 
  /* [872][0][][] */ -42,-61,32,21,20,50,-7,99,-5,-102,61,103,-11,-127,23,47,-72,-24,-71,-55,-76,-46,63,114,-15,-124,-21,-13,15,-108,125,-125, 
  /* [873][0][][] */ -46,36,-22,34,-42,48,-9,127,2,-53,-92,25,-44,-50,15,28,-38,97,80,114,-35,-13,-42,-96,0,44,18,34,70,-29,-13,24, 
  /* [874][0][][] */ -4,-43,-24,-30,-51,30,51,-51,101,-86,-15,56,88,-76,53,32,-48,24,-103,-92,39,-13,-18,-107,67,-22,-16,-38,-12,-9,-9,127, 
  /* [875][0][][] */ 62,77,15,-58,63,-48,-14,-37,20,-24,24,-101,-61,-7,21,31,21,127,-2,-16,13,21,55,-27,-28,-58,78,107,-36,-35,-25,-8, 
  /* [876][0][][] */ -67,-5,-109,11,36,7,-61,-41,-114,-34,69,-29,-42,25,-29,50,73,14,-9,-115,30,-10,-4,2,-12,-14,-33,43,127,-126,-70,-32, 
  /* [877][0][][] */ 127,2,57,-42,65,75,-74,20,-94,47,-70,83,54,-13,-47,96,126,82,-75,-55,75,93,113,70,-29,-27,-63,-12,87,13,69,47, 
  /* [878][0][][] */ -53,45,-51,35,-73,57,-62,1,1,-34,90,-41,6,60,9,-8,55,127,-28,77,-7,41,3,-90,27,42,24,-58,7,23,9,-18, 
  /* [879][0][][] */ 38,18,17,39,17,77,-32,127,-64,-76,-7,88,-35,-2,66,-13,42,-4,-86,57,11,-47,-52,31,-57,44,121,-38,32,48,-107,-73, 
  /* [880][0][][] */ 13,-54,-45,47,27,18,27,-2,9,16,-70,0,57,32,37,5,58,14,-1,26,32,15,-18,-27,-45,-1,-58,-127,3,-95,-31,-44, 
  /* [881][0][][] */ -52,122,127,-122,-109,-7,-28,-47,1,-66,17,33,-30,73,16,-31,61,-40,22,-79,111,-23,-47,31,17,53,32,39,-8,81,44,10, 
  /* [882][0][][] */ -127,-13,33,21,-26,32,21,59,20,29,-73,-23,14,-16,52,-39,91,-22,-49,-84,-74,39,-98,-21,55,-53,23,-3,-79,-24,76,-52, 
  /* [883][0][][] */ -127,-86,30,63,41,-93,40,-92,81,-35,-58,-17,-36,44,-1,-6,89,5,-61,23,-17,-66,-41,-96,69,8,-78,30,82,-60,-29,-8, 
  /* [884][0][][] */ 26,4,-99,-20,1,11,3,-19,-26,-19,-22,53,26,16,-29,6,6,3,-4,-21,-19,25,-127,-52,28,45,51,-25,17,-34,8,41, 
  /* [885][0][][] */ -84,17,50,-66,45,-62,-25,60,-21,38,6,-94,-70,36,65,-41,-40,9,-84,-6,9,-11,127,-95,84,30,-51,54,-12,23,-51,-33, 
  /* [886][0][][] */ 11,-92,-45,127,-64,-25,89,42,4,-37,-118,56,107,91,-71,69,69,-79,-36,-22,-21,-18,-60,24,-121,-20,30,-42,-26,-50,63,-23, 
  /* [887][0][][] */ -94,24,-44,45,-69,-24,34,-119,-65,38,-11,-8,-107,58,108,-59,-111,63,32,-97,-127,54,19,0,-66,60,-4,17,-27,-11,63,60, 
  /* [888][0][][] */ 115,-9,23,-109,-25,29,15,-40,36,56,26,-69,-104,25,-58,-76,-4,78,-6,-110,19,60,29,-51,-103,123,69,-14,127,73,-50,36, 
  /* [889][0][][] */ 63,13,-2,3,-24,-53,13,-88,-126,12,85,25,36,43,-25,19,-71,-37,-71,-55,-31,0,73,-36,127,76,4,-8,-24,-52,-1,-6, 
  /* [890][0][][] */ 20,-75,-31,-34,72,8,54,-88,-13,-47,-36,-36,-13,-43,4,-44,-24,24,-7,-28,-30,-13,-40,15,-49,-86,14,127,-8,16,17,-2, 
  /* [891][0][][] */ -67,-16,81,-22,12,25,-35,-4,-127,-53,-8,-65,-94,-94,-78,-32,124,-59,0,28,13,-55,-11,-45,56,-41,7,74,-74,-14,30,-51, 
  /* [892][0][][] */ -4,5,13,8,98,-34,56,-6,48,-34,-36,-3,-46,38,-34,24,-6,-2,-46,20,5,-51,51,13,43,55,-63,71,-18,127,5,85, 
  /* [893][0][][] */ -59,8,-44,65,123,-1,-91,100,72,-127,-7,-3,30,57,55,-114,-54,24,35,8,-8,18,-119,62,-30,-71,-56,98,-90,-20,117,45, 
  /* [894][0][][] */ -53,-32,-16,49,7,26,7,23,40,-14,-19,18,-9,-33,-4,22,-17,127,-22,-54,-77,-25,29,98,79,-30,-34,4,27,-25,24,-97, 
  /* [895][0][][] */ -70,-123,-68,83,-109,1,-78,-15,-108,-65,16,44,-62,-78,-16,-76,-127,42,-17,63,35,-51,91,72,70,-47,-44,26,10,-65,-9,-51, 
  /* [896][0][][] */ 28,-63,-50,16,-29,-42,-45,23,123,21,3,-90,-18,-18,-12,-6,-32,-71,41,-7,-27,-71,37,-63,-25,-8,-6,-3,38,127,-66,2, 
  /* [897][0][][] */ -38,-5,-34,-44,47,20,-91,-23,-83,-70,-13,-37,20,62,-51,-1,50,74,10,45,85,-127,-22,-68,-15,51,14,-3,-36,39,-31,43, 
  /* [898][0][][] */ -74,3,29,-15,20,-18,-46,-24,-127,-61,-2,61,14,3,-93,-43,21,-62,-42,49,5,-15,109,-11,-84,84,-32,20,-35,20,-35,-31, 
  /* [899][0][][] */ 102,-21,13,16,0,-3,-80,17,48,17,58,-4,19,-29,-68,33,28,-127,-81,37,-9,78,-31,-15,-86,5,-93,-20,-20,-67,48,-2, 
  /* [900][0][][] */ -44,-22,40,-4,89,57,-29,-1,-90,-14,-31,-87,-67,3,-26,83,81,16,18,-72,-31,72,-16,89,54,112,58,-108,26,-9,-127,-37, 
  /* [901][0][][] */ -36,37,25,33,31,59,8,-7,3,-54,-23,-5,-17,12,32,33,-17,70,-15,55,66,-55,35,59,57,20,-41,-27,127,82,52,45, 
  /* [902][0][][] */ 8,59,45,14,52,-24,41,-67,-119,71,-23,-9,-34,16,66,-83,11,-38,37,15,21,20,127,42,14,-57,50,-50,32,-5,9,-3, 
  /* [903][0][][] */ -44,48,99,29,-50,50,-34,-15,-61,12,10,8,7,-26,5,-38,-41,-3,-101,8,65,43,92,-63,-21,-47,48,59,-27,-32,-127,-11, 
  /* [904][0][][] */ 63,21,-35,-9,95,22,-85,20,-10,39,22,22,-52,42,17,-27,-30,-18,5,-42,-109,44,29,53,22,98,-57,-127,-30,-64,-40,119, 
  /* [905][0][][] */ 14,-92,-38,61,21,69,62,-32,48,15,-112,73,-40,-19,-9,42,30,-127,-52,3,25,-4,-49,-31,27,-5,81,-82,-14,-19,52,84, 
  /* [906][0][][] */ 2,-35,-7,-26,-52,52,-35,-42,-67,-40,-15,31,127,-1,-54,15,-50,-58,-4,-12,24,-70,-9,-24,-68,-54,-54,-34,-26,104,32,10, 
  /* [907][0][][] */ 57,-98,-34,39,-4,-78,-1,-55,-121,-56,32,-49,-36,8,-32,82,-45,-82,-42,14,-70,71,17,42,72,-19,11,16,32,-127,37,21, 
  /* [908][0][][] */ 57,-76,-52,-7,-69,-23,127,-7,-53,32,-55,75,-39,16,-72,-21,-36,-25,-35,-30,-63,-12,-12,-18,44,108,46,-53,91,15,9,28, 
  /* [909][0][][] */ 17,36,48,78,-31,36,40,16,111,-22,77,-61,-63,4,-99,6,14,116,0,8,-21,24,-48,-56,1,54,-14,-127,113,70,87,-77, 
  /* [910][0][][] */ -43,-23,-41,16,-11,33,-40,43,-38,37,28,-11,-17,42,127,37,84,-45,29,-37,53,0,-27,58,26,-17,-52,6,-5,-20,17,-118, 
  /* [911][0][][] */ 0,-51,-80,-73,-2,54,-12,56,27,-34,-9,48,22,-54,18,-35,-16,47,6,8,-43,56,48,34,64,-14,34,-42,127,-20,68,5, 
  /* [912][0][][] */ -127,12,-36,0,11,40,48,-86,-31,27,-89,-74,29,26,-93,69,20,29,-7,26,-98,8,57,9,-31,-39,-33,66,120,-32,28,-5, 
  /* [913][0][][] */ 4,-26,-11,50,-45,20,-35,-19,18,-22,-120,69,64,79,0,-8,108,-68,-33,-14,61,-127,-48,38,-20,53,18,70,-46,126,100,89, 
  /* [914][0][][] */ 41,39,-6,14,-40,-47,22,-81,29,35,-39,-30,19,13,-9,-6,-1,-45,48,-86,-20,39,-44,-20,-46,15,44,42,127,78,-13,-105, 
  /* [915][0][][] */ 30,-41,85,-26,2,53,25,45,-9,-66,-54,-14,-24,-47,-25,-17,17,18,-76,-1,-25,51,9,46,-127,105,-51,-44,24,5,20,6, 
  /* [916][0][][] */ -45,106,20,44,23,30,-62,37,-2,99,0,28,-78,-77,-64,-127,-42,6,35,-4,26,28,-78,56,-109,-35,-21,-43,45,21,-63,-49, 
  /* [917][0][][] */ 17,39,79,72,-29,-26,-1,71,72,27,81,10,-66,-7,30,3,-19,-13,-43,127,-24,69,17,77,26,23,35,-53,61,1,122,-48, 
  /* [918][0][][] */ 15,-21,-12,-29,-124,-43,97,-80,122,4,-67,13,-23,-76,-7,-51,67,-11,1,-13,49,70,-42,9,2,-25,-63,50,46,-70,127,-47, 
  /* [919][0][][] */ 8,21,-47,103,47,94,-77,-64,-66,10,4,-4,-85,-127,-56,33,-15,65,-46,15,-53,-98,-27,-70,42,63,-15,-56,-30,-12,-65,-19, 
  /* [920][0][][] */ 10,-84,30,10,-11,47,1,-63,-23,-91,-30,48,-109,93,41,127,58,-39,-11,-57,-34,-8,16,12,3,29,39,-52,-16,-36,-77,39, 
  /* [921][0][][] */ -45,-14,-9,49,34,-4,55,-79,-31,-6,-41,81,11,47,34,127,-12,12,-7,-12,49,53,-9,30,4,-47,7,-33,-63,74,-4,11, 
  /* [922][0][][] */ -111,69,16,40,2,3,-71,-53,5,-32,14,-101,-56,0,-127,-65,34,-37,17,-16,25,-61,61,70,16,-56,-14,-28,-6,21,12,-87, 
  /* [923][0][][] */ 64,-3,-15,57,46,-22,-22,71,19,127,-27,14,96,-19,83,34,45,23,-60,112,24,-11,6,-48,32,-32,88,-25,43,39,28,89, 
  /* [924][0][][] */ -64,-3,94,-27,68,-32,24,-54,53,17,41,-78,-127,92,-8,43,-7,41,39,-16,-24,19,107,15,15,-123,-10,14,-51,-68,10,-76, 
  /* [925][0][][] */ -22,36,44,70,37,4,45,-32,66,27,-17,-28,25,-51,10,-34,5,17,102,-92,-58,4,-30,-53,-24,-62,-114,-25,34,-82,25,-127, 
  /* [926][0][][] */ 19,37,-11,-20,-41,59,63,-89,-42,47,-30,111,42,37,-111,-30,-2,10,33,-13,-35,-3,-7,-21,-49,40,92,-57,-127,48,-14,45, 
  /* [927][0][][] */ 26,-70,-57,127,-110,-30,-66,-43,58,-20,55,2,35,44,-53,-25,-28,-2,-26,-26,33,53,-27,61,-82,111,-52,-8,52,-9,57,-100, 
  /* [928][0][][] */ 29,-16,2,100,20,88,-1,-37,-3,-4,2,54,112,-127,-77,-108,-75,-11,-75,11,66,127,-15,-92,-76,-101,23,17,42,-82,8,22, 
  /* [929][0][][] */ 3,-39,-61,-29,39,-127,23,30,75,44,-38,-7,-27,-96,33,43,-122,86,-10,30,-53,-7,49,-66,-46,31,44,-81,-21,121,-91,58, 
  /* [930][0][][] */ -43,-33,3,-20,8,51,62,18,41,4,69,33,10,16,23,14,49,-25,16,-127,4,-60,109,64,9,56,45,4,-25,-47,29,-27, 
  /* [931][0][][] */ -18,-27,-71,124,-43,53,42,-70,-16,74,88,13,12,-29,-13,-11,-16,8,-42,5,14,32,-21,51,71,-27,70,-26,63,-77,127,8, 
  /* [932][0][][] */ 126,-70,17,-22,-1,-1,-42,41,-49,-15,-79,67,-7,-34,21,-97,-85,-39,-90,71,-35,-80,108,-127,11,4,43,-18,-13,-44,88,-84, 
  /* [933][0][][] */ -4,15,-1,13,-12,-61,15,-79,-36,-23,-15,-30,-23,60,20,22,17,-28,-12,6,-79,38,-30,-30,-42,-18,43,-76,-49,-127,-8,-51, 
  /* [934][0][][] */ 16,-22,-31,29,7,-65,25,-71,-18,-9,54,11,2,-14,-127,54,-53,29,53,-45,18,3,21,-17,-12,29,-4,-13,52,-2,20,-17, 
  /* [935][0][][] */ 41,-17,-43,-52,-46,9,-67,68,-116,7,-61,37,45,19,3,-33,-28,-20,-67,13,-82,20,71,-34,-127,-42,-50,-59,35,-14,-17,-41, 
  /* [936][0][][] */ -64,-54,15,-10,-12,104,7,-43,35,-26,26,-33,48,-50,73,-1,44,-68,-19,-32,-60,127,4,6,-47,68,-108,-44,16,-70,-16,33, 
  /* [937][0][][] */ 92,-75,-53,-14,-15,22,7,-103,-95,10,-37,-31,9,38,-35,-23,88,-1,-82,48,4,-83,20,-16,37,-127,107,-40,4,-10,0,103, 
  /* [938][0][][] */ 127,36,-7,79,-66,43,30,23,61,25,-35,18,-64,40,-18,55,51,-90,42,-9,124,0,39,41,8,89,100,36,-25,122,-51,2, 
  /* [939][0][][] */ 42,101,-14,11,-12,-79,-26,-93,39,-4,-68,-127,-95,4,-20,42,-117,36,-25,14,-8,6,-119,21,-31,-41,-19,4,-12,34,-73,-41, 
  /* [940][0][][] */ 35,12,-8,-41,-52,72,20,30,44,65,-33,-48,-15,-31,12,26,17,-120,17,-32,-33,79,-9,90,-41,-103,68,58,-127,21,29,29, 
  /* [941][0][][] */ -31,-19,-12,-7,-6,127,29,-44,19,35,18,-16,9,-83,52,-24,-7,29,-21,-22,-10,-38,29,-19,-65,-93,21,66,43,45,4,68, 
  /* [942][0][][] */ -4,-64,102,-30,21,41,-127,76,-33,-35,-69,-73,59,35,-7,-115,83,28,83,89,-96,-14,-55,-9,-119,23,60,-78,-63,56,85,-29, 
  /* [943][0][][] */ 34,29,15,14,35,79,-9,67,-51,59,22,-15,32,-60,-82,17,-72,-43,-17,42,3,-16,42,-39,-79,30,-28,-10,0,-65,-127,-14, 
  /* [944][0][][] */ -8,-6,10,4,-82,55,-2,8,26,-34,18,-27,-37,30,-69,-19,46,60,77,-26,-127,14,-17,-16,-84,36,-4,-47,-66,30,-14,-24, 
  /* [945][0][][] */ 40,16,6,-50,-48,8,5,-64,-2,-11,47,1,5,-27,-13,67,-23,-18,-26,-11,55,-37,127,-56,22,83,-73,44,-72,14,-36,-9, 
  /* [946][0][][] */ 1,34,-9,-74,52,-66,-18,-92,56,27,-21,-127,-98,-6,-29,-118,-23,25,33,-36,-57,-101,47,-26,-98,60,5,-107,33,12,27,36, 
  /* [947][0][][] */ 73,-44,55,-18,-57,39,-79,-5,46,31,11,103,50,50,-6,127,29,-46,42,-9,-51,-119,12,32,85,-104,-54,21,-78,-35,-63,-77, 
  /* [948][0][][] */ -14,-63,-3,-38,45,-7,-39,54,40,113,-1,7,36,-87,26,-45,-7,-17,16,46,-29,7,-127,14,9,4,-34,-32,45,-11,3,51, 
  /* [949][0][][] */ -36,23,-28,22,-53,22,-56,-53,71,-59,-65,-58,10,-127,-126,3,-3,13,34,-67,50,6,-60,-16,-61,111,-50,-44,-20,5,-63,-34, 
  /* [950][0][][] */ -12,127,71,-74,5,2,-82,-1,23,-46,-45,35,60,-29,-61,42,-24,-61,59,19,-21,-24,35,105,60,107,7,-119,-59,84,29,7, 
  /* [951][0][][] */ 15,-1,115,-13,-10,-34,48,73,-48,-58,-2,-32,-24,-72,-67,-59,10,10,-39,-95,127,29,77,56,-58,26,-62,122,-17,-16,21,-14, 
  /* [952][0][][] */ 47,-8,27,51,-11,19,-5,-21,18,16,17,-72,-63,9,-12,9,73,-1,64,-79,-27,-24,-27,67,-84,-14,14,-55,7,-127,3,-39, 
  /* [953][0][][] */ -10,-51,115,-127,-22,-12,-22,46,-9,81,-51,6,70,74,3,-39,-61,-6,-108,43,37,-40,-32,17,-58,35,-3,80,-18,55,-24,-13, 
  /* [954][0][][] */ -127,-52,-38,90,-60,0,-1,-17,66,51,8,-29,15,11,-29,57,2,-109,119,46,51,54,-52,49,-64,-50,112,32,95,40,4,-55, 
  /* [955][0][][] */ -62,26,-6,-10,64,-74,22,-4,-26,-53,-44,41,-94,-17,34,93,40,60,7,25,9,16,14,-16,47,-50,59,-37,16,86,-127,10, 
  /* [956][0][][] */ -6,-1,1,-101,8,8,50,-109,-112,-127,24,110,-101,106,13,-19,3,64,-56,6,8,-55,69,-52,30,8,-59,-36,-48,58,-14,-120, 
  /* [957][0][][] */ -7,-41,106,25,-50,28,15,-47,-28,-15,-22,-6,-53,3,8,26,-16,-18,-50,-127,18,44,16,7,7,-25,-47,-52,89,-21,1,-10, 
  /* [958][0][][] */ -17,15,90,19,2,33,62,6,-47,-18,18,-37,127,-55,-16,-20,-52,37,92,27,8,34,59,-9,-87,55,20,5,-49,19,81,-87, 
  /* [959][0][][] */ -4,-19,-1,56,37,66,8,-78,72,-28,-22,7,21,-43,-43,40,-23,-5,-38,71,13,7,89,0,-44,-1,-15,-127,28,19,-59,93, 
  /* [960][0][][] */ 52,-9,127,-51,53,36,57,-87,38,-47,37,-8,-60,16,-42,33,-58,-4,20,-1,-35,65,91,88,34,28,33,3,-25,-43,-7,48, 
  /* [961][0][][] */ -29,-15,-59,25,55,28,17,12,49,12,21,22,-29,-30,-29,110,-59,-18,-127,-50,-81,11,0,67,-19,-27,14,10,8,114,39,-96, 
  /* [962][0][][] */ 9,127,77,-25,-28,84,23,-64,19,-25,7,-55,-23,47,44,46,96,-6,108,-9,-25,-55,-1,-11,-52,-1,-31,-6,-2,-2,-34,-67, 
  /* [963][0][][] */ 38,22,-37,-35,-48,-55,-3,-89,0,30,14,-27,-52,-26,-127,0,-49,-22,-103,-91,-6,-71,58,-73,-20,-90,-20,21,-19,-35,0,19, 
  /* [964][0][][] */ 18,-67,-24,-79,-8,61,20,92,-2,58,-24,-49,19,-23,-85,22,-32,107,-14,7,88,30,72,-127,-28,-45,1,54,-3,-35,31,38, 
  /* [965][0][][] */ -69,-19,-127,4,74,112,-97,86,-28,-15,-102,-9,3,69,116,76,34,-52,-52,49,54,120,-102,102,72,23,-70,-77,92,-22,37,17, 
  /* [966][0][][] */ 10,26,-3,-40,-22,-44,22,-18,81,-13,8,-39,70,-19,47,19,50,-8,-27,-24,28,7,30,127,-3,-40,40,30,31,16,-26,17, 
  /* [967][0][][] */ -48,45,42,-13,40,26,-5,-5,8,47,21,-17,9,-14,-65,-19,20,26,4,30,-99,27,117,-13,52,-44,65,-87,-127,46,81,16, 
  /* [968][0][][] */ -69,23,-36,-14,4,-30,92,-29,12,-60,-36,42,15,44,-100,33,20,-127,12,59,12,47,19,-35,79,43,1,47,-39,-6,72,-40, 
  /* [969][0][][] */ -39,5,4,20,-37,112,112,-78,27,3,-37,4,-59,78,70,83,-126,-46,-22,43,49,-87,-127,-64,55,87,-33,-35,-79,-73,-14,-99, 
  /* [970][0][][] */ 2,2,0,78,70,21,-76,-45,56,-8,-55,-32,-10,-99,20,-99,127,42,7,58,14,41,42,-111,43,-38,-52,76,31,-77,-4,54, 
  /* [971][0][][] */ -63,-84,-2,97,-71,63,-19,8,-108,6,80,43,116,44,-127,-2,6,3,30,-69,36,-88,-44,-93,-48,73,-59,-16,-104,-3,-3,40, 
  /* [972][0][][] */ -38,45,-87,-39,86,32,-49,-39,-4,86,14,-4,-51,-16,-30,-52,67,43,-4,49,35,5,85,127,-37,-36,-10,82,-80,45,-103,57, 
  /* [973][0][][] */ 127,-92,-20,-31,3,8,114,3,21,76,-23,-81,-16,-68,46,-121,15,122,73,-43,35,-38,-115,19,48,-75,16,-81,11,-14,-72,78, 
  /* [974][0][][] */ -28,-72,96,127,-89,122,-53,-8,51,44,41,-33,42,88,52,-26,46,-55,96,-22,60,-39,-7,-37,11,24,-37,-39,69,-39,-32,-99, 
  /* [975][0][][] */ 26,25,-20,17,-127,-96,38,-64,-64,-118,-67,84,0,46,8,20,45,-25,101,-48,75,-88,-89,80,-91,17,-60,-119,73,2,6,-31, 
  /* [976][0][][] */ 14,26,-10,-10,-6,31,-26,17,-31,1,-10,-30,55,-47,54,0,-31,127,-52,-33,-31,-30,-20,83,21,-24,44,12,-9,26,5,40, 
  /* [977][0][][] */ 15,-18,120,85,15,-6,19,-127,43,-112,108,-35,-70,-56,47,102,37,-91,65,-14,58,-41,-9,89,71,65,-4,73,53,-54,9,-92, 
  /* [978][0][][] */ 7,-48,-93,-64,36,-127,-18,-28,0,-10,34,6,32,24,-106,-105,39,-58,11,8,106,4,-13,-21,90,-60,81,-13,26,94,75,-64, 
  /* [979][0][][] */ 19,-36,53,10,-70,10,-127,-35,13,-20,-5,-50,-4,46,16,7,23,-18,33,-7,-23,72,11,43,17,33,0,-30,-25,-26,33,-48, 
  /* [980][0][][] */ -49,-7,-75,-114,44,50,40,37,-92,56,-4,52,-22,-125,108,42,41,65,-89,-64,123,86,28,-20,-50,8,-75,62,-41,-63,-54,-127, 
  /* [981][0][][] */ -56,56,27,76,-74,34,-61,31,37,-7,106,-74,5,5,-9,-92,31,-4,46,-127,44,-23,83,-14,12,21,114,3,-38,58,75,52, 
  /* [982][0][][] */ 66,66,5,127,-22,-23,-31,-25,-49,1,-50,62,30,23,20,-35,47,9,0,-53,79,-40,-2,-16,0,-30,66,57,-65,85,-36,5, 
  /* [983][0][][] */ -66,-35,53,46,63,-54,30,-14,33,-8,-20,-36,13,25,40,1,34,-8,43,20,-127,-34,-17,-3,-31,-58,-101,-43,-44,-2,15,96, 
  /* [984][0][][] */ 74,58,40,-117,94,47,105,-53,28,43,-104,99,-25,-16,-59,50,64,68,-27,13,-6,118,94,-127,27,55,-16,111,29,-89,29,-48, 
  /* [985][0][][] */ -36,42,0,-61,4,60,1,64,-6,23,99,45,-6,-13,-17,127,55,-38,-16,-22,42,15,-63,-20,-78,36,-67,60,86,-21,1,2, 
  /* [986][0][][] */ 55,42,44,-25,-28,-22,-5,-88,-107,27,-23,-39,-28,-68,-85,-127,20,-53,-16,96,95,-6,2,-64,-114,-108,-28,-57,13,57,-5,-29, 
  /* [987][0][][] */ 10,92,14,-63,37,82,-87,8,5,68,47,-82,67,-107,48,38,-127,7,30,-27,-71,84,49,-71,124,27,13,-91,-72,-74,-18,28, 
  /* [988][0][][] */ 79,6,-44,29,5,-48,-53,-29,-53,34,127,28,-53,46,-25,38,-14,35,0,86,121,122,-11,-114,29,79,44,-20,104,21,34,36, 
  /* [989][0][][] */ -21,-1,-11,40,56,6,-16,-12,-35,-67,-46,127,-12,-36,47,-39,-32,2,20,-33,-46,8,57,55,14,32,-5,-18,-44,45,4,9, 
  /* [990][0][][] */ -23,-31,-11,-111,45,4,30,85,-82,4,-16,-73,-44,5,-6,26,28,41,-127,15,-61,-90,-34,5,-42,-15,59,20,67,39,14,-43, 
  /* [991][0][][] */ -15,7,18,16,-20,39,7,-8,-2,-19,13,-123,127,80,-41,33,-20,31,-82,-40,61,1,-83,5,-15,33,35,24,29,1,-22,29, 
  /* [992][0][][] */ -70,-9,-69,9,35,104,-26,43,-92,-72,-56,38,85,-14,-85,13,47,112,15,75,-127,-1,10,-104,43,106,33,-43,-30,54,59,-36, 
  /* [993][0][][] */ -12,45,43,-48,60,-62,39,-99,-109,25,13,31,61,19,-100,-2,36,13,-38,36,-7,51,-9,20,5,-80,-51,45,-127,81,58,52, 
  /* [994][0][][] */ -20,-51,-58,-38,-127,34,-34,-3,80,64,-113,61,44,8,54,-60,120,-115,-14,-6,-83,-21,-80,-12,-29,-15,-46,-29,58,-30,69,64, 
  /* [995][0][][] */ -127,11,-42,26,35,-63,45,85,-48,43,22,91,57,101,-43,88,-29,119,-109,-98,-36,71,77,-91,43,72,43,-81,20,93,-92,-99, 
  /* [996][0][][] */ 58,28,1,-66,-51,9,19,-43,-9,-103,62,15,-16,-13,-61,-108,-127,16,33,15,49,-9,-9,47,-37,50,3,38,-3,11,12,6, 
  /* [997][0][][] */ -56,-116,114,13,-16,-30,-81,70,54,-45,15,35,-10,-69,-47,48,-33,-32,-74,14,-48,-50,-6,-123,-67,-39,-68,79,90,13,-127,20, 
  /* [998][0][][] */ -33,-34,-29,38,40,-42,20,74,6,-55,-14,44,12,70,55,25,15,-67,-56,-48,69,-60,-127,-18,7,-22,-39,34,82,-53,105,-9, 
  /* [999][0][][] */ 18,35,-9,90,28,46,101,-86,17,-6,60,44,28,-88,63,-53,44,-18,24,-4,-127,-102,96,1,22,11,36,-44,36,-23,13,54, 
  /* [1000][0][][] */ -32,-46,-2,0,-86,40,-9,45,-127,38,94,-100,-17,85,-24,-81,60,-51,29,-94,78,-78,-13,-27,17,-1,1,-6,37,92,7,-11, 
  /* [1001][0][][] */ -18,-41,-31,-29,-21,13,-81,-18,16,45,127,-26,-27,54,-14,22,29,23,40,-37,-16,-4,-30,-11,40,-4,37,30,52,-29,31,-20, 
  /* [1002][0][][] */ -27,80,-55,42,36,-49,-2,54,70,69,30,32,48,61,-15,-42,53,-36,127,84,-29,63,85,55,10,39,-77,16,11,28,45,-2, 
  /* [1003][0][][] */ -127,12,-23,1,-72,-7,-22,101,-1,-3,-12,-58,32,4,66,-8,-79,-15,-59,71,-100,33,-27,-1,-85,76,4,-71,-23,72,-37,120, 
  /* [1004][0][][] */ -20,-27,75,20,-67,49,91,9,11,-13,3,-61,-8,-26,-77,22,-24,53,100,3,-9,-19,30,-12,-51,0,63,64,-127,23,-5,20, 
  /* [1005][0][][] */ -25,74,-81,-30,-31,-77,-103,-60,14,0,-26,-19,-60,-2,-67,-54,127,77,68,-25,-60,-53,-30,-33,34,26,-90,-125,-41,3,25,41, 
  /* [1006][0][][] */ 11,-20,66,127,-31,-5,97,-81,13,-19,-15,51,-20,50,24,-7,1,-24,-51,-49,7,58,-74,-14,6,-14,30,80,-37,-59,-42,-65, 
  /* [1007][0][][] */ 42,19,127,-57,50,-19,-59,-27,-35,-17,61,-44,-19,-62,-33,28,23,9,-7,-60,-42,-36,44,-21,10,-41,-15,-2,68,8,77,37, 
  /* [1008][0][][] */ -110,-115,-59,32,-3,-43,62,-34,-1,95,-9,-59,12,79,46,-33,32,30,-18,60,-26,56,-48,-59,53,-88,-73,38,-98,-127,32,-23, 
  /* [1009][0][][] */ 5,39,9,87,-34,-61,-97,13,15,-112,25,37,25,-60,-71,2,107,53,-22,-76,-3,-50,43,21,86,-3,-113,127,114,-83,56,-103, 
  /* [1010][0][][] */ 95,42,97,-8,68,-57,-90,31,45,68,-79,-5,-80,-21,-14,82,-108,30,-101,-22,-67,52,37,-127,9,10,-18,-108,-17,43,-64,-54, 
  /* [1011][0][][] */ -3,-51,16,-63,-59,-17,12,127,42,-40,2,-123,3,-49,89,-28,-13,-7,-3,41,4,39,3,30,-58,-43,41,9,6,66,-4,-111, 
  /* [1012][0][][] */ -24,-8,23,38,-63,60,-15,-34,4,-17,21,-43,-105,-40,102,-6,-36,41,17,-11,-53,-73,-18,38,24,31,13,41,-23,11,-1,127, 
  /* [1013][0][][] */ 8,-5,20,-99,-62,-2,80,-56,-20,-15,36,-34,-16,-54,-26,12,10,51,127,-21,-42,-93,-38,20,29,-81,-5,9,73,42,-13,35, 
  /* [1014][0][][] */ 7,-37,44,-46,29,-13,-62,-74,-17,-28,-75,0,-63,-8,20,-123,-11,96,-67,38,-127,3,25,109,-46,-7,-81,-15,106,106,-80,-15, 
  /* [1015][0][][] */ -74,74,-59,-69,33,-24,54,25,4,63,38,-96,-127,93,-68,-106,-19,-6,-41,-24,-16,36,14,20,7,-23,37,57,-5,-11,69,-50, 
  /* [1016][0][][] */ 81,-38,61,54,85,38,-26,54,-13,45,11,23,18,22,8,-56,-21,-1,-103,-18,74,-109,-34,46,-62,-105,19,-35,-57,24,-127,50, 
  /* [1017][0][][] */ -54,26,75,-43,-35,-74,110,6,-21,-51,-85,100,60,22,34,-39,-41,-31,23,2,30,29,17,65,28,-31,-127,17,53,-36,40,-92, 
  /* [1018][0][][] */ -19,10,-50,-58,59,66,43,6,37,-59,-88,3,-43,91,31,65,99,-103,113,-5,19,-78,-31,31,-24,-82,29,-127,-46,94,-30,-54, 
  /* [1019][0][][] */ 127,30,63,-44,-46,-2,9,-74,-37,-54,63,-3,-32,-32,-60,33,-99,52,13,-37,8,-7,-7,81,-11,6,-48,-65,-54,-28,-14,22, 
  /* [1020][0][][] */ -30,127,0,88,-8,-16,-16,-50,30,12,-4,86,-42,-82,-126,-124,-64,-49,-35,-10,25,37,-82,60,-58,83,103,47,36,-54,64,-61, 
  /* [1021][0][][] */ -55,-45,1,76,21,78,48,-11,22,-28,13,5,-32,-13,-38,-68,80,-2,-127,40,-39,98,40,37,-58,-14,32,-16,106,-30,-76,106, 
  /* [1022][0][][] */ 9,-26,-7,33,-36,-48,58,-11,40,-1,-22,-29,-10,-20,2,-43,-42,-23,30,46,-62,64,-33,-91,-127,58,25,-23,-18,-29,-40,-108, 
  /* [1023][0][][] */ -12,39,72,14,-79,-72,60,41,47,-25,-1,-29,7,-52,52,34,80,-28,123,-20,91,15,127,-49,85,-7,12,39,-24,36,-21,-116, 
  /* [1024][0][][] */ -43,-40,-97,58,-21,-97,-114,38,-43,30,-127,3,-30,-65,-82,26,51,-48,18,-119,-69,19,50,46,6,-22,39,-27,52,-47,6,46, 
  /* [1025][0][][] */ -40,-18,41,-101,-48,34,-35,43,75,-123,-18,31,12,-20,-16,-11,40,-32,-13,110,-127,23,28,-98,-3,89,76,-59,-117,1,26,5, 
  /* [1026][0][][] */ -33,68,-10,-64,24,-6,8,-16,79,-12,9,36,12,39,-19,-24,-49,-55,41,45,-114,-127,-65,-61,25,14,34,11,-58,-19,1,-10, 
  /* [1027][0][][] */ 55,48,-51,-71,24,0,-33,-25,110,58,15,-86,-95,-77,1,-25,27,-127,6,46,-30,-6,18,-48,1,34,71,-16,120,-28,-75,-5, 
  /* [1028][0][][] */ -41,-85,-47,114,-62,33,48,18,54,-73,57,-22,-24,-76,-42,-12,-91,-49,-73,-95,11,13,75,22,-8,-20,-37,-127,18,21,-28,-22, 
  /* [1029][0][][] */ -61,-47,-6,-16,-114,13,-3,4,44,49,-33,34,45,-39,32,-46,14,74,41,38,69,50,-127,-16,-76,-9,-75,27,2,92,41,-12, 
  /* [1030][0][][] */ -61,24,13,36,105,118,34,46,2,22,103,76,117,-23,-36,127,-46,-5,-58,29,-30,44,7,106,85,33,-31,54,17,-29,73,93, 
  /* [1031][0][][] */ 0,19,-39,35,-24,15,-1,58,106,34,-72,32,2,-59,-54,31,2,-31,25,51,3,2,35,37,-51,38,97,-25,77,127,18,53, 
  /* [1032][0][][] */ -94,51,-29,48,28,-13,-7,24,-31,9,12,-65,-15,10,-127,-25,12,18,-46,-13,-3,67,22,98,-32,23,-93,125,-18,-28,75,-9, 
  /* [1033][0][][] */ 29,-127,26,-11,11,25,27,-38,67,-97,104,60,49,-69,-73,-63,41,-114,-17,-31,60,20,109,-29,-1,-5,-54,103,45,-91,-71,71, 
  /* [1034][0][][] */ 78,6,-17,-107,-1,-79,-44,9,-14,-62,-25,-59,8,-11,42,23,-60,-28,-7,41,-24,68,-83,67,-7,-127,33,-46,76,83,64,32, 
  /* [1035][0][][] */ 18,-50,-24,17,71,-50,-22,-25,23,22,8,-10,-88,63,50,-53,-17,-43,-41,-26,-40,22,-64,4,127,39,-37,28,73,28,-3,-40, 
  /* [1036][0][][] */ 32,14,54,42,43,0,52,-5,-12,27,-34,27,26,53,6,3,-28,4,24,127,30,50,-52,-24,71,33,-28,-69,5,-11,54,55, 
  /* [1037][0][][] */ -23,-59,14,18,54,-21,77,-74,35,-12,22,0,-27,-2,-53,-27,90,50,-15,-1,-117,-14,-127,-109,9,10,108,49,-63,69,39,-53, 
  /* [1038][0][][] */ 57,-119,78,-102,25,20,2,28,-3,127,-37,70,-22,12,-8,51,-55,100,-72,8,73,114,-27,4,-45,63,-26,-11,35,-36,0,-90, 
  /* [1039][0][][] */ 22,-42,-3,-121,17,14,38,1,-38,-3,-104,-5,26,-54,19,-20,18,-60,42,24,-98,68,-26,0,65,-9,14,81,127,29,-5,5, 
  /* [1040][0][][] */ -47,44,-41,4,-34,65,3,-49,17,-80,-41,-15,-84,-72,-127,-26,5,-39,-2,-36,52,-74,-31,-39,55,-44,9,59,15,79,87,27, 
  /* [1041][0][][] */ -67,-88,12,-68,-30,-2,-23,-5,17,-7,-28,-65,-88,30,-9,24,2,45,-85,-111,-69,24,23,6,-66,30,-33,72,-6,41,27,127, 
  /* [1042][0][][] */ -37,-127,-83,-46,-69,38,19,82,-7,-36,-30,-63,29,61,-34,22,-24,-11,-91,-7,-20,8,20,-9,52,-59,26,6,-87,-21,57,-49, 
  /* [1043][0][][] */ -34,43,38,-61,64,7,2,-28,8,76,-11,3,11,-38,14,-2,-127,-12,28,38,-6,-27,47,-26,-7,-76,-2,12,-43,28,32,14, 
  /* [1044][0][][] */ 9,-45,-20,-14,82,-47,-1,-123,-47,-15,62,-15,-15,-25,-127,-30,17,-24,-45,27,-66,2,-7,-2,13,57,1,45,14,30,32,-10, 
  /* [1045][0][][] */ 24,-48,54,-72,59,127,0,68,32,-39,-20,-15,42,-86,-54,75,22,20,-20,108,51,22,-7,-27,-70,-11,-13,77,37,-45,10,-74, 
  /* [1046][0][][] */ 22,6,12,25,-69,63,-127,-22,59,36,-61,-34,54,15,-10,67,45,5,82,35,57,17,21,-34,-75,30,74,50,-54,13,10,19, 
  /* [1047][0][][] */ 22,10,7,14,-47,11,-92,127,-7,-19,-64,38,14,-9,21,47,-57,-42,-60,-12,36,-101,9,37,-6,-49,49,51,-46,9,0,18, 
  /* [1048][0][][] */ 8,-63,45,72,-45,-31,75,62,-118,-122,66,-37,3,18,-26,91,10,-16,51,-25,-21,-70,25,113,-127,14,-1,62,60,17,-5,-20, 
  /* [1049][0][][] */ -9,6,-5,-31,43,24,49,-30,53,-23,-23,-47,-35,47,-17,-76,7,111,-40,93,-5,5,-56,13,65,-12,-24,127,37,-21,92,39, 
  /* [1050][0][][] */ -65,-62,-56,21,-38,-15,0,-95,-30,-2,34,-10,13,125,32,-25,-65,35,-13,6,6,127,-10,79,25,26,-13,-78,3,-41,18,50, 
  /* [1051][0][][] */ -54,16,31,39,-11,66,-48,-60,-27,-33,-18,16,-16,30,12,-27,-53,-25,-8,28,14,69,-32,93,57,1,38,5,-127,-73,-20,-16, 
  /* [1052][0][][] */ -43,-94,-23,52,114,-68,78,19,-2,-27,-16,-5,-29,-49,-105,2,42,-29,-2,27,-80,-1,-9,-87,-127,-79,70,-9,41,-36,-3,95, 
  /* [1053][0][][] */ 59,-62,37,-11,-69,-35,-16,7,-38,-11,79,33,64,-24,-48,9,21,127,27,-88,-34,62,2,64,-38,25,-10,40,-58,-8,-15,-59, 
  /* [1054][0][][] */ 70,-127,-5,-35,6,-21,30,-73,0,-97,-47,59,30,21,-21,-42,-38,-69,-63,-66,-6,-20,-39,-109,84,115,45,6,-53,-78,25,10, 
  /* [1055][0][][] */ -6,28,-17,35,15,24,-16,-6,-40,-14,19,-30,-13,24,-13,3,-19,-127,-3,-81,42,-2,34,21,-11,61,3,-31,11,29,51,21, 
  /* [1056][0][][] */ 25,-25,-7,-29,10,88,-22,-46,-49,-26,-44,14,-8,-26,-127,44,8,-93,33,106,17,-8,46,-62,46,-79,2,-25,33,-37,23,-35, 
  /* [1057][0][][] */ -60,19,-48,-21,91,0,54,6,-26,-55,34,22,-39,45,-52,-46,77,-28,-67,75,-76,-34,5,127,8,116,-90,-22,14,-56,-39,16, 
  /* [1058][0][][] */ 33,-72,-41,14,2,35,49,11,-49,-76,15,-23,82,-48,-81,26,-54,-41,-54,107,32,-52,-2,7,72,5,19,6,20,-40,19,-127, 
  /* [1059][0][][] */ 12,-5,-40,-81,44,32,93,72,2,36,-69,-21,22,-46,23,6,74,39,11,44,-52,24,-20,-79,-13,-70,9,98,-127,0,7,70, 
  /* [1060][0][][] */ -105,4,-92,-23,5,19,31,27,38,89,-81,-38,-8,-33,8,-19,-7,-40,-56,-106,122,-29,31,0,-26,-43,-32,127,-63,111,114,-15, 
  /* [1061][0][][] */ -78,10,0,-76,2,109,-5,-9,50,-70,-92,-54,-35,80,-79,-8,5,-127,32,35,55,-6,-14,-1,-41,52,46,8,48,25,85,27, 
  /* [1062][0][][] */ 10,-27,-82,-20,28,-76,12,-52,-72,-110,45,33,2,-3,13,60,-55,-30,-17,-38,56,-80,-32,18,-72,72,-127,53,70,-34,-49,-42, 
  /* [1063][0][][] */ -66,-106,-48,14,-16,8,55,54,-74,-127,21,40,20,-19,46,23,92,10,43,80,-98,86,-44,-104,20,-41,2,44,2,-73,52,2, 
  /* [1064][0][][] */ 106,-127,-72,3,-32,-54,36,16,20,-82,83,-44,28,61,9,54,64,94,115,-69,72,-30,-104,29,-118,-46,56,-44,46,0,-40,33, 
  /* [1065][0][][] */ -46,2,-7,-26,-124,123,82,-127,-11,-43,-18,-48,-14,-68,-64,12,58,-93,43,-12,25,76,2,35,-100,103,56,36,-18,49,26,71, 
  /* [1066][0][][] */ -59,31,24,3,10,-18,-6,-106,44,25,44,60,97,-127,1,11,5,-63,85,13,13,21,-46,23,-19,-6,-13,54,1,62,47,-27, 
  /* [1067][0][][] */ -64,-9,-26,-29,-83,-40,-36,27,-2,-75,31,124,-1,-53,38,-124,15,-8,39,-30,-25,-1,-25,-127,-35,9,63,-50,29,-17,-3,34, 
  /* [1068][0][][] */ -69,-39,4,45,-57,-127,-74,-18,-55,-7,81,-33,17,-11,5,16,-1,46,22,17,11,-66,26,4,2,-18,59,48,-84,-18,-28,48, 
  /* [1069][0][][] */ -127,-49,-15,-7,-17,-36,-11,-32,-50,-65,69,52,-3,-49,-3,73,84,8,24,39,-18,-57,-88,78,85,113,42,6,95,64,61,8, 
  /* [1070][0][][] */ 9,-3,32,-39,27,-48,-44,-36,-27,-5,-91,-110,127,60,-35,-21,-8,38,-7,-51,-21,38,-39,28,-3,-49,52,18,46,45,-20,-19, 
  /* [1071][0][][] */ -17,-52,53,55,15,-1,-53,109,21,-103,-8,26,-3,31,-75,12,26,52,127,-5,67,-29,-58,-6,-4,85,-17,-4,17,-117,4,-84, 
  /* [1072][0][][] */ 39,-55,-7,12,68,1,127,23,-99,-119,-77,-28,39,-47,25,-6,51,86,23,-8,46,7,-56,-85,53,16,-46,-34,78,-29,21,53, 
  /* [1073][0][][] */ 1,31,45,-34,16,-4,21,45,-78,-106,2,-68,114,7,-106,-34,21,-46,-18,-48,-3,20,-6,82,62,14,25,93,-38,-127,32,-58, 
  /* [1074][0][][] */ -29,22,-31,-60,-13,-1,14,-39,-41,-127,19,-84,-63,-5,30,-73,-2,-78,-11,-14,-87,-35,20,29,59,-13,13,-37,9,68,17,50, 
  /* [1075][0][][] */ -45,53,33,32,15,6,9,15,8,50,6,47,-14,14,-3,-9,-22,-44,-43,42,-2,-18,60,27,-72,53,127,63,0,127,-45,-67, 
  /* [1076][0][][] */ -58,50,-52,127,36,72,-32,-72,-21,34,10,-11,20,17,-66,12,-45,8,60,-16,110,13,16,6,34,89,-10,36,1,-26,53,-22, 
  /* [1077][0][][] */ 41,-51,57,127,2,-56,-75,1,4,-87,-104,63,-22,12,-5,-87,-27,-42,-41,34,-22,15,-121,-45,8,54,-13,-117,81,22,68,-40, 
  /* [1078][0][][] */ 48,61,-46,8,95,13,8,62,-79,-23,-28,-27,36,41,-40,-18,40,-11,-127,79,34,49,51,-10,-59,-12,-35,45,-58,-46,-84,41, 
  /* [1079][0][][] */ 118,-6,-26,-18,87,127,42,19,-34,-81,-16,3,33,-96,-33,-12,-99,-3,-94,8,-127,-18,19,3,-17,24,10,96,-28,-39,-67,31, 
  /* [1080][0][][] */ 65,58,-62,17,-11,68,20,18,34,127,4,11,11,-27,6,-43,122,57,83,23,-48,27,-14,8,-98,-10,-4,-6,43,-41,101,-1, 
  /* [1081][0][][] */ 60,19,17,-27,53,-25,2,-31,33,-31,-16,8,75,-75,2,7,72,29,40,15,-23,2,-41,50,-127,9,13,-50,1,12,-8,-9, 
  /* [1082][0][][] */ 20,-26,-9,-29,69,109,-33,-12,-11,8,111,9,-32,-3,-30,-46,119,85,34,19,83,-47,-9,-120,16,91,20,58,33,-84,-127,90, 
  /* [1083][0][][] */ -23,-17,16,-96,26,-45,-5,-24,60,-16,76,-105,127,124,68,-43,24,11,15,-99,71,37,-69,-51,-37,41,27,58,-65,-3,-41,93, 
  /* [1084][0][][] */ -80,-23,-18,1,60,6,19,-88,-81,5,-48,119,-48,117,18,7,18,-39,127,17,-21,36,-19,-50,-42,0,20,26,62,-61,-38,62, 
  /* [1085][0][][] */ -77,-53,32,106,29,37,55,-58,-10,-23,-83,5,-6,30,-17,-90,-21,29,-51,3,4,1,-24,35,-61,-44,18,-48,-33,-127,9,17, 
  /* [1086][0][][] */ -37,-43,-6,-55,-42,113,123,-17,57,-5,-25,107,75,-69,-34,-40,46,-71,4,-119,3,-66,-127,-88,-9,27,-28,6,-94,83,80,14, 
  /* [1087][0][][] */ 5,29,48,103,-26,98,-51,-15,25,16,-127,-17,-23,-88,33,-11,-67,-51,36,56,6,20,6,9,40,24,-2,-10,-96,31,23,12, 
  /* [1088][0][][] */ 17,-51,13,-57,3,17,52,-67,-15,-27,43,-17,8,-30,36,11,-9,-39,124,1,45,127,43,56,11,-31,8,2,9,6,-55,-22, 
  /* [1089][0][][] */ 24,-71,31,-20,-56,-48,8,-79,-9,-61,6,-29,51,-65,34,22,-10,44,83,-2,-44,35,-61,-45,127,52,-90,32,-100,28,80,-20, 
  /* [1090][0][][] */ 11,-123,42,88,-12,64,125,-38,-75,91,82,-95,-2,-79,104,42,86,65,-113,127,-125,63,-4,-14,9,-33,61,-71,123,-27,50,-104, 
  /* [1091][0][][] */ 45,124,-73,22,58,-44,-59,58,-13,102,-44,45,59,46,-48,-22,-52,22,25,44,9,-52,14,-61,-22,-127,-106,10,-20,-25,60,31, 
  /* [1092][0][][] */ -50,30,9,-93,-23,-29,-18,-6,-40,7,-13,94,-23,90,-90,31,64,-52,-82,-36,-45,-65,72,26,7,33,-97,127,-45,98,92,-7, 
  /* [1093][0][][] */ -12,-9,2,38,98,-70,3,112,-97,35,-108,67,-51,30,37,-110,121,81,-57,127,21,-84,51,-39,13,-112,-25,101,63,119,4,75, 
  /* [1094][0][][] */ -117,35,10,-18,-35,-13,19,10,127,-49,-36,-6,-88,-59,-72,14,-58,-48,-6,-86,37,79,52,0,-21,28,65,-4,50,91,-75,-69, 
  /* [1095][0][][] */ 0,110,-106,-14,6,10,127,-98,7,-70,-87,3,17,8,25,41,-2,-72,21,-89,15,-35,12,-51,52,-50,61,33,34,-21,52,-25, 
  /* [1096][0][][] */ -18,-51,-20,53,42,56,42,49,36,-53,68,-126,127,64,8,-6,2,33,-5,-22,-100,-34,24,-48,-117,20,-2,-116,-51,-10,5,18, 
  /* [1097][0][][] */ -11,-42,59,56,-16,-30,-98,-49,-61,13,10,-127,-41,-22,10,-42,24,58,-45,-72,-19,7,13,-27,-27,-126,-96,-64,6,-92,28,28, 
  /* [1098][0][][] */ 10,108,-22,-116,-14,-29,10,25,-8,-96,94,40,-43,-21,16,52,80,71,21,-92,-75,-84,103,5,-62,-6,-66,-120,9,127,-43,6, 
  /* [1099][0][][] */ 20,-8,-3,-15,-9,1,25,-10,67,-5,29,-16,30,-14,1,7,-14,46,65,84,-40,-22,38,-17,15,87,-16,127,44,71,98,15, 
  /* [1100][0][][] */ 94,-2,-72,-58,-80,47,46,-27,47,24,48,-93,110,-72,-6,54,-32,-50,9,36,43,11,-13,127,-53,62,39,34,61,-10,115,-62, 
  /* [1101][0][][] */ 36,48,57,-21,-18,-22,64,-36,12,127,-93,-68,-72,-69,-15,38,-51,-105,-59,2,-19,40,-42,67,49,-62,-36,45,10,-54,-28,-3, 
  /* [1102][0][][] */ 100,-7,63,105,-36,-36,48,74,-87,43,31,53,41,-93,27,37,10,52,-127,-15,-25,25,89,-33,-60,39,102,98,61,3,-21,99, 
  /* [1103][0][][] */ 28,-7,64,29,68,-3,13,-65,14,-55,25,-20,44,-35,58,-56,-32,19,-39,-30,-20,68,17,-30,32,11,36,-127,61,60,-52,-14, 
  /* [1104][0][][] */ -14,-32,34,-46,-51,-104,-34,28,-3,-14,102,-13,68,-127,-103,23,35,-103,62,-67,-15,-42,-96,-89,24,-102,-62,56,5,-68,56,-35, 
  /* [1105][0][][] */ 4,67,-106,41,-30,119,-26,9,59,-2,3,-31,-19,127,10,-67,-86,-117,52,61,28,-56,43,31,33,-18,-31,-34,-70,3,-3,8, 
  /* [1106][0][][] */ 65,34,-25,-108,7,-47,-10,-8,-91,-14,-14,-81,50,-35,-29,-96,-9,-22,14,58,-50,-45,-79,43,-10,19,31,-35,-127,-35,-43,4, 
  /* [1107][0][][] */ -127,46,75,-34,33,8,66,-117,58,-86,-78,40,-69,-92,-66,52,-16,52,109,34,-28,81,-27,95,-1,-33,-17,69,20,-29,88,44, 
  /* [1108][0][][] */ 91,-70,24,-96,-39,-108,14,12,11,68,-24,-70,-127,-8,123,-38,-58,102,-34,42,-5,25,-75,-49,20,29,-8,3,-87,42,-37,-3, 
  /* [1109][0][][] */ 114,-52,10,-66,30,-10,68,6,88,-51,-103,-36,127,26,-26,3,88,97,-18,50,-23,3,-11,7,-104,-25,-5,66,48,31,72,47, 
  /* [1110][0][][] */ 127,-5,-37,-80,41,-97,8,-60,10,-6,-114,18,-11,-54,83,-49,15,-67,54,-63,-20,47,56,77,-49,-27,-45,37,12,22,71,-45, 
  /* [1111][0][][] */ -3,-27,-17,13,67,-25,47,45,5,58,17,-10,-39,15,-42,-30,127,55,11,33,-5,-40,30,-28,-104,-38,49,-38,37,43,-58,-70, 
  /* [1112][0][][] */ -13,-38,-50,-51,-7,74,29,-27,-2,25,-24,35,2,63,-55,127,-25,-48,-40,11,22,-14,5,-60,-55,-34,-21,19,26,-36,21,-7, 
  /* [1113][0][][] */ 28,27,-51,94,-52,-48,14,76,71,14,-34,20,20,68,47,-47,54,-23,50,69,14,-73,-14,56,-48,-12,127,31,-15,45,-82,-92, 
  /* [1114][0][][] */ 2,-36,-9,-25,-25,-11,-88,105,19,11,-4,2,9,34,-52,11,-52,-31,-72,63,-127,96,-34,14,30,29,50,-101,-7,79,-7,26, 
  /* [1115][0][][] */ 22,-20,-9,-38,24,79,-9,-95,-38,21,-37,-44,91,14,13,17,12,-43,-121,-17,-92,34,-24,-127,70,23,50,51,-47,26,-20,18, 
  /* [1116][0][][] */ -75,19,-96,-1,21,-43,12,-39,-14,-127,34,-67,4,-48,-58,-115,28,22,-9,-31,7,-43,0,9,41,-29,53,-39,-67,-6,-61,-3, 
  /* [1117][0][][] */ -15,15,48,34,-12,16,-37,-3,-15,19,-19,22,21,-14,-41,26,-39,-15,16,0,68,-11,-56,127,-33,40,5,31,-20,31,69,37, 
  /* [1118][0][][] */ 11,-40,24,54,-8,63,45,-40,-24,-49,-6,0,-8,-17,0,-9,-2,15,-40,19,127,73,-10,5,-4,-33,-23,35,3,-21,63,-48, 
  /* [1119][0][][] */ -27,-41,-36,-5,54,-3,-54,22,-51,43,-73,85,44,-90,-49,46,27,111,-33,28,22,27,-46,32,22,-56,-8,108,-32,-54,127,71, 
  /* [1120][0][][] */ -127,-12,29,-57,45,-59,-48,26,-26,-9,-34,7,-22,-2,61,-32,-104,32,-94,-112,28,-53,-49,-45,-68,6,-10,-7,-63,66,-96,-40, 
  /* [1121][0][][] */ -23,63,-34,65,11,-31,41,-37,-42,47,28,-18,66,56,37,-53,2,-58,-1,116,-17,127,-64,36,-61,13,-63,34,19,-40,-1,-4, 
  /* [1122][0][][] */ 25,-89,-4,-117,-4,-102,-102,59,-68,45,-5,49,-34,-10,-41,46,-9,80,19,18,38,127,4,-80,-94,43,-81,71,17,-33,-59,-2, 
  /* [1123][0][][] */ 8,34,-47,77,-38,16,-42,-46,-21,2,-27,-11,127,13,28,13,-65,-19,-5,10,-47,5,-38,-44,-11,18,-80,-83,-27,-73,8,16, 
  /* [1124][0][][] */ 0,-63,-3,-75,27,99,-18,5,39,-9,-76,45,57,53,-117,20,-35,-88,-2,100,53,117,-5,-58,-127,16,8,0,22,-65,3,-11, 
  /* [1125][0][][] */ 83,-33,78,-84,87,56,58,-24,10,-87,17,-49,29,-121,27,66,14,47,-5,-61,58,-7,61,47,13,4,29,-55,-65,90,-127,-90, 
  /* [1126][0][][] */ 23,40,-43,-16,20,94,-74,109,-17,15,64,-14,90,-27,60,58,-65,60,29,41,-4,-35,-19,26,-85,-127,-1,7,-10,-5,-8,-80, 
  /* [1127][0][][] */ -32,-51,29,74,-71,-99,52,-127,32,4,-65,37,-11,-25,-77,-5,52,20,-52,-34,37,-9,46,32,4,-35,-72,25,-102,106,-39,-51, 
  /* [1128][0][][] */ -29,-1,10,-1,-23,-8,9,-31,-8,26,127,59,46,5,37,-32,-4,26,31,-14,-64,38,-45,12,24,-72,15,-30,-35,-9,25,21, 
  /* [1129][0][][] */ -70,81,-68,22,-91,53,9,-28,-22,15,31,40,-54,-44,-61,-51,13,-63,32,127,-40,-34,-112,43,-18,-63,41,-6,25,113,-8,99, 
  /* [1130][0][][] */ -13,17,-35,75,-10,47,58,-11,29,-69,34,-22,24,-23,50,26,28,-117,127,28,-45,-58,23,-1,23,-29,-9,-4,-8,-61,-14,13, 
  /* [1131][0][][] */ -13,6,-52,-56,-78,-36,-71,9,11,-114,13,-25,6,-12,-24,54,22,8,-45,102,-37,-22,12,-27,-44,-75,57,25,127,-16,69,20, 
  /* [1132][0][][] */ -14,-127,19,-4,6,60,-6,22,70,-77,-18,85,57,25,-40,-4,73,-60,45,70,47,-38,-48,24,27,-20,-5,-33,-14,-5,51,-7, 
  /* [1133][0][][] */ -29,-31,-52,-90,-46,23,-24,-8,32,8,-15,15,127,14,-5,-8,-20,-30,-51,-88,-90,58,-60,-19,-8,-16,115,-58,6,65,4,25, 
  /* [1134][0][][] */ 16,-81,-85,37,-117,-46,43,-22,-27,-55,-25,-108,-66,1,-3,-77,-84,-66,-127,8,105,39,46,-37,-55,69,107,48,-64,43,-41,-45, 
  /* [1135][0][][] */ -120,55,-36,63,-5,-5,119,-54,35,-22,-40,-14,21,59,-38,-46,-114,59,-30,40,-53,67,127,-18,-125,29,-34,52,-68,0,-30,-26, 
  /* [1136][0][][] */ -1,-25,13,34,-61,21,-107,-38,28,14,47,44,-75,-32,-28,-66,-17,-37,-94,-16,58,127,-26,-22,-83,-28,-19,-79,3,31,14,-22, 
  /* [1137][0][][] */ -30,-29,5,-127,40,3,-72,57,3,59,-41,14,-23,-7,-62,58,-76,56,-45,12,34,114,-4,-7,-31,32,-10,8,16,-22,-4,1, 
  /* [1138][0][][] */ 53,6,-37,-7,-59,36,19,1,89,-65,16,20,24,-32,127,-16,-21,7,-63,57,87,35,-45,-39,92,101,-78,-6,101,-102,23,14, 
  /* [1139][0][][] */ 6,-47,-10,109,-24,-33,-64,52,9,3,39,32,-73,-125,-54,56,27,-118,46,59,14,127,34,11,16,28,-2,36,17,20,-36,37, 
  /* [1140][0][][] */ -45,-13,-39,49,14,-3,58,28,-111,-33,8,-62,-8,-12,7,27,45,-127,-67,-16,4,64,57,-120,-116,89,19,-43,56,-123,38,-18, 
  /* [1141][0][][] */ 11,3,-78,-14,-124,-17,-104,-106,14,-93,66,15,4,-26,13,53,54,-53,-66,-16,127,5,-5,20,-37,-40,-39,-56,22,-13,-35,9, 
  /* [1142][0][][] */ 48,-24,-55,44,95,55,53,95,25,22,112,-48,12,-127,9,77,-10,21,-1,-12,24,25,-76,-45,-127,10,-65,-111,-18,80,16,-80, 
  /* [1143][0][][] */ -3,-29,-44,-97,-33,21,11,-85,-32,62,75,66,14,-40,-73,36,-127,112,57,32,-4,58,-4,-39,-31,-43,30,70,18,94,-29,-27, 
  /* [1144][0][][] */ -97,-109,72,51,-52,-26,112,33,-87,82,-84,-83,44,51,-55,64,-30,-23,-116,7,8,-4,-64,-40,-8,-127,-88,-51,49,43,0,-15, 
  /* [1145][0][][] */ 49,-18,39,-22,12,14,39,54,127,-33,6,-37,-6,-18,-30,81,-6,18,24,34,-18,39,40,-33,11,81,-31,16,-26,-79,-85,-35, 
  /* [1146][0][][] */ -1,-127,17,75,-24,-18,65,-18,72,16,22,-4,35,25,-3,31,-30,26,-39,67,3,31,-37,-70,-25,-94,-4,53,61,87,122,10, 
  /* [1147][0][][] */ 72,-19,12,-18,-19,-12,16,-23,-59,5,5,-3,-42,-27,76,91,50,-2,-11,-29,26,-58,-6,-15,50,30,105,54,16,127,-62,-79, 
  /* [1148][0][][] */ -99,-15,-64,-16,-54,-81,-54,28,20,-4,64,-33,-14,15,73,17,-127,-43,7,-119,42,1,-45,-78,-9,45,-48,47,55,20,27,26, 
  /* [1149][0][][] */ 20,44,27,55,-20,41,51,-8,-6,-29,-3,-3,49,36,-39,2,41,21,-84,39,127,108,74,96,18,32,20,-18,59,38,-35,-37, 
  /* [1150][0][][] */ 16,-32,-12,13,35,21,35,13,-51,3,-63,35,127,-98,21,36,65,35,-119,-30,32,-91,82,-6,-39,-51,36,50,-24,-16,26,-74, 
  /* [1151][0][][] */ -62,39,-111,103,-39,60,38,26,-13,-43,55,-24,-61,11,42,-52,-19,37,-127,-8,-115,8,-18,86,-9,28,16,33,40,-44,106,35, 
  /* [1152][0][][] */ 86,-12,0,-53,104,127,-63,12,60,64,-11,58,4,28,-18,16,-36,-33,43,15,108,57,16,80,15,-61,-26,-56,18,-41,-78,-79, 
  /* [1153][0][][] */ 9,-48,-66,-57,-18,-57,-51,-22,-52,-12,-54,1,-3,-48,-17,-28,12,-46,127,73,75,-15,56,-29,53,-107,-17,93,15,61,22,-41, 
  /* [1154][0][][] */ -27,80,-22,-83,-127,106,13,-70,-1,15,-42,-4,12,-53,-32,24,-30,32,-11,22,-75,-24,21,-17,34,-40,-29,0,-36,-16,-75,-20, 
  /* [1155][0][][] */ -21,-12,-29,-48,-48,26,28,6,40,-100,39,-36,-127,24,-10,-1,-26,34,58,-60,60,88,42,-5,75,-9,-54,-3,0,-25,35,-7, 
  /* [1156][0][][] */ -94,-40,-26,65,-24,-16,77,-78,11,19,-45,-25,31,23,-127,33,41,-69,30,117,-73,-61,-59,78,74,-63,9,-7,-39,-30,-38,20, 
  /* [1157][0][][] */ -77,-95,-36,24,-60,-46,-28,22,-58,-46,-40,-81,6,-8,-25,-28,-3,-49,-32,-64,-10,13,10,-44,-35,-28,-64,-3,-12,-127,-6,-65, 
  /* [1158][0][][] */ 21,-37,64,45,113,15,-35,6,4,51,-29,63,11,38,-114,-27,-31,-73,-31,-41,9,66,26,48,-5,-37,15,17,26,-127,-39,-119, 
  /* [1159][0][][] */ 4,-35,12,-79,-28,47,-46,13,-41,-9,-57,-13,-50,59,-3,27,3,-4,-71,-127,47,46,13,-31,3,4,-27,-7,-34,-6,33,13, 
  /* [1160][0][][] */ -55,-62,4,-34,35,40,-127,-24,23,-18,63,22,-60,-44,-37,36,37,-17,8,61,28,2,4,-16,42,-25,-26,-88,35,55,83,-73, 
  /* [1161][0][][] */ -6,14,108,21,-115,-1,23,55,-40,-127,27,-27,-14,75,-4,10,-2,37,-75,-23,-8,-32,-4,-14,-22,-18,32,42,-17,-16,-20,-98, 
  /* [1162][0][][] */ 32,-18,-29,30,-61,81,86,-19,18,-90,19,-22,-79,69,1,55,-18,15,99,-79,24,30,-107,60,71,-70,19,67,-15,34,127,-24, 
  /* [1163][0][][] */ -55,17,9,48,6,-2,76,42,-110,-8,-70,-127,-8,1,20,-13,-80,-30,-120,-19,-11,-21,-50,7,-48,40,1,-33,-6,57,49,-19, 
  /* [1164][0][][] */ 29,-69,39,3,36,3,-9,-82,-1,-44,7,-54,-79,-7,-25,-37,-3,30,-48,-50,-90,4,20,21,-33,22,26,-56,-7,-127,9,-18, 
  /* [1165][0][][] */ -34,19,20,74,-44,11,-15,50,-78,-70,122,75,-84,-1,-25,84,12,-4,-59,37,-33,41,-107,-57,-80,25,28,-6,-127,46,73,11, 
  /* [1166][0][][] */ -15,-97,3,29,-7,-7,51,-43,-3,86,-26,-115,18,-54,-63,28,43,48,67,-100,-30,60,51,-57,5,-50,127,-83,-126,-26,37,29, 
  /* [1167][0][][] */ 18,14,42,-96,-57,-98,-78,-62,-127,-53,13,-48,73,62,-16,103,-12,-27,54,-9,-36,-59,25,-40,-52,3,7,-82,94,91,47,25, 
  /* [1168][0][][] */ -13,33,30,115,-35,-85,53,-17,37,0,-37,-32,69,23,127,-29,-26,8,-13,-36,-101,-55,-24,34,32,89,-22,72,-55,20,-51,7, 
  /* [1169][0][][] */ -45,-22,-17,41,33,75,-12,-127,31,-52,62,65,-84,-117,-28,-32,11,3,92,5,95,-26,-57,81,74,-98,106,-50,-31,104,-79,1, 
  /* [1170][0][][] */ 32,-50,21,8,-16,-44,40,9,-45,14,-17,15,-55,5,121,13,127,-6,30,-21,61,5,-104,-78,-21,-35,-49,-70,69,84,-28,-92, 
  /* [1171][0][][] */ 39,-110,40,2,53,-62,83,13,-32,9,-105,-16,56,107,-65,-82,81,72,-70,-12,9,61,56,30,-127,11,19,28,-76,23,-52,36, 
  /* [1172][0][][] */ 5,6,-37,68,-60,126,-2,43,-16,87,-53,24,122,83,-91,-39,-35,-18,-18,48,0,-87,112,46,-127,-9,4,-4,-56,112,-75,126, 
  /* [1173][0][][] */ 45,12,72,-32,-56,-49,-100,-63,47,-47,-19,-34,-70,-90,-14,-6,-19,-4,-47,-33,47,-75,69,-24,90,-90,91,69,-11,63,-127,-52, 
  /* [1174][0][][] */ -43,-80,42,-56,70,-16,-49,20,-22,-19,-19,41,64,14,12,-106,-37,73,68,-127,-65,3,-2,40,12,-38,54,47,58,-76,-12,-55, 
  /* [1175][0][][] */ 13,-32,-65,-127,63,17,-64,34,-33,-15,-61,10,17,111,22,-40,36,42,107,1,22,31,28,-32,13,-29,70,-26,-15,10,-39,-30, 
  /* [1176][0][][] */ 94,61,20,109,30,81,22,40,67,-45,-63,-8,108,-17,18,74,32,-95,25,21,-41,-62,41,42,-38,49,127,-3,-12,-28,-25,18, 
  /* [1177][0][][] */ -65,58,15,-4,-71,13,-127,53,12,114,57,-16,48,-11,19,5,45,14,32,-31,26,-52,-38,5,-57,44,14,-11,-44,12,43,-27, 
  /* [1178][0][][] */ 10,27,45,69,-27,-19,68,-52,5,97,-2,-89,-20,-49,-25,4,-55,-48,-8,21,72,-57,-127,27,4,-1,-26,3,-111,1,-29,69, 
  /* [1179][0][][] */ -15,-52,1,-3,117,-45,96,62,114,-122,-113,-57,-37,-74,-79,-26,120,51,69,67,34,56,17,-24,50,-83,127,74,-52,-30,98,-62, 
  /* [1180][0][][] */ 22,39,46,-29,-38,4,34,-77,71,-11,76,-11,-111,-24,-29,-54,4,-83,-50,-102,7,-39,-28,-20,45,-38,-17,-62,127,-81,41,34, 
  /* [1181][0][][] */ -99,-47,31,31,-21,14,46,70,-9,-62,-12,87,-54,39,-90,18,-48,93,-13,-1,-127,37,46,-52,-62,66,33,11,18,-73,99,-4, 
  /* [1182][0][][] */ -61,-17,-13,-10,4,-30,-29,-11,-127,97,-83,-18,66,4,-72,103,-79,-9,10,-13,-6,35,9,15,125,-23,42,26,14,70,16,-17, 
  /* [1183][0][][] */ 50,-127,39,-70,-3,12,30,59,3,-37,72,-20,-18,20,32,-29,-33,-18,3,-25,-35,-6,-47,-27,11,-40,13,-35,-34,25,72,-8, 
  /* [1184][0][][] */ -71,22,-71,68,-19,-62,52,-74,-64,35,-23,-4,-15,-66,9,-68,-45,-17,50,1,4,106,-51,-63,74,57,-127,-69,-13,-74,30,-44, 
  /* [1185][0][][] */ 74,81,-41,114,-44,35,-31,-14,-127,23,-5,41,44,33,50,-53,79,-27,-57,-102,86,-1,32,72,41,-50,-62,-38,114,7,45,-38, 
  /* [1186][0][][] */ -21,31,19,-76,53,-4,-31,12,113,15,-6,-12,35,-70,-49,-85,-15,42,43,127,98,30,17,-3,8,83,-56,26,-5,-2,-33,-53, 
  /* [1187][0][][] */ -36,54,-108,-53,54,-22,-34,80,33,4,11,-19,17,49,-18,44,-21,-54,-20,-50,5,-92,48,-127,-48,76,5,-29,-21,-67,-24,-11, 
  /* [1188][0][][] */ -1,-35,-92,-10,81,36,5,44,-81,-14,-56,-107,-40,50,-33,-127,-98,-87,-9,-51,2,121,-20,-22,-77,30,-96,57,-30,66,-14,-8, 
  /* [1189][0][][] */ -63,27,-29,51,-19,-94,-66,68,34,83,-74,6,-52,122,70,-117,48,-36,33,127,32,12,-81,45,-25,-36,-69,110,100,-44,14,-31, 
  /* [1190][0][][] */ -7,-127,-26,-9,4,5,-26,-47,-76,-26,124,-18,-71,38,-31,-29,59,-127,-63,19,-16,-37,53,63,-16,26,7,42,-24,-50,56,-82, 
  /* [1191][0][][] */ 28,-72,49,3,-5,-18,-59,-15,-48,-57,2,9,20,-63,52,-31,6,-39,-32,0,33,-11,-55,18,-49,127,-21,-37,45,-87,-24,-10, 
  /* [1192][0][][] */ 39,-2,-58,-80,-37,75,-40,8,3,-3,-11,14,46,8,-15,36,-61,41,56,-54,-20,-8,19,77,-127,-44,-27,70,24,53,38,-3, 
  /* [1193][0][][] */ 43,68,-70,88,-56,-17,-97,-65,-72,-14,127,-41,19,45,-92,58,91,46,0,76,11,-17,46,-33,-108,93,75,54,-21,-31,-87,5, 
  /* [1194][0][][] */ -37,18,27,-66,-127,15,-24,-41,9,-24,-39,-38,57,-33,-54,81,-29,7,-98,-36,-55,-25,49,-24,-43,-31,115,92,-60,-7,35,-4, 
  /* [1195][0][][] */ 69,-39,-26,24,30,88,22,-52,96,-59,-109,-76,-121,4,-127,-31,-50,-55,88,-74,-85,115,-24,22,-12,73,58,1,8,-101,70,60, 
  /* [1196][0][][] */ 26,-39,-87,16,-60,90,40,-44,-81,-47,23,25,66,-12,-30,30,-58,-17,-27,7,74,93,25,55,30,5,51,-54,61,58,56,127, 
  /* [1197][0][][] */ -59,3,32,-60,29,21,1,11,34,57,6,-38,17,30,-49,-93,110,11,-67,-4,-127,30,58,44,-30,-6,109,-54,-27,-35,26,-91, 
  /* [1198][0][][] */ -1,-29,51,22,62,39,77,-38,-2,-3,4,-5,55,-66,-72,32,82,-4,35,-27,12,30,32,-14,-15,-66,5,-127,69,89,-64,51, 
  /* [1199][0][][] */ 58,44,-64,-38,40,97,83,37,48,-8,-51,-110,-64,20,85,5,26,75,64,91,49,26,48,9,65,-17,-52,127,-59,-37,28,-10, 
  /* [1200][0][][] */ -65,-48,-105,-105,44,92,65,12,4,72,-101,-56,-5,-55,-12,-7,-38,-4,-87,64,22,-17,-127,19,-39,9,92,83,-117,-98,6,10, 
  /* [1201][0][][] */ -64,3,12,-12,-17,46,12,-58,-27,-61,-127,-5,-12,35,-20,6,-48,-96,40,-25,-12,101,104,-25,7,53,16,-112,2,9,2,59, 
  /* [1202][0][][] */ -19,37,34,69,8,53,-54,-38,-38,50,-8,83,-81,-78,-24,64,13,29,20,-100,-31,46,3,35,2,-20,-1,127,35,35,70,-27, 
  /* [1203][0][][] */ 37,32,38,-95,94,46,-72,-95,-39,39,44,-54,-84,15,27,88,34,8,-13,-7,-112,-97,-1,-63,-27,-24,2,-24,16,37,124,127, 
  /* [1204][0][][] */ -30,-66,-30,-71,23,-70,83,-78,105,-63,-34,44,7,12,-28,-33,100,-3,-55,-35,0,78,-4,43,1,9,-14,11,127,-63,31,1, 
  /* [1205][0][][] */ -96,-6,15,103,72,70,25,-82,20,-33,-33,13,-87,-67,120,33,89,-5,-15,95,-122,-44,-41,-106,72,-71,127,7,-79,-21,65,9, 
  /* [1206][0][][] */ -30,-18,16,24,6,-15,-77,-29,-14,-45,-19,10,-64,-73,-35,-13,96,-21,54,56,10,71,-7,80,-108,9,127,-55,4,66,-18,-87, 
  /* [1207][0][][] */ 46,-8,-34,25,7,-36,-127,-104,-81,-103,-59,-42,15,62,79,-30,27,-6,47,36,-10,25,14,-9,-25,25,-7,18,-23,-3,-121,21, 
  /* [1208][0][][] */ -18,17,118,112,50,51,17,0,32,66,-2,-35,5,-23,-36,88,-27,-47,-61,23,-72,50,127,-74,14,-59,30,-14,37,15,-57,75, 
  /* [1209][0][][] */ 64,41,66,-75,14,-79,31,62,-60,21,-22,57,-20,-25,-10,-106,9,40,20,98,75,-113,1,-32,1,-29,31,119,-8,127,104,-96, 
  /* [1210][0][][] */ 75,89,63,-77,-127,29,6,-19,8,-17,62,55,13,30,-84,-20,-65,-73,50,-11,-71,-38,9,47,-52,82,-11,10,-69,5,-30,-24, 
  /* [1211][0][][] */ 65,-80,-17,8,-48,-78,-48,-19,50,98,4,66,97,123,94,-15,43,25,18,32,-72,-52,11,-127,-35,-13,54,66,-10,-81,-70,39, 
  /* [1212][0][][] */ 32,-75,5,24,-15,-7,-25,64,-20,-49,-2,-104,80,127,20,-19,63,21,-57,21,-11,23,-40,58,21,-33,-123,-91,54,44,107,-25, 
  /* [1213][0][][] */ -2,-127,62,-99,-47,-11,-14,-29,-13,38,-53,-22,12,-30,-19,24,-48,-10,3,37,6,74,-8,82,-52,57,11,-18,17,20,85,-57, 
  /* [1214][0][][] */ -65,-18,-5,-2,-42,-35,-11,45,-106,15,36,51,-6,33,26,81,-2,-54,15,97,31,-56,-28,-31,45,127,-39,-4,112,-4,21,14, 
  /* [1215][0][][] */ 21,-10,6,-96,98,82,96,-14,-33,-11,-36,54,-79,14,41,127,-18,-43,-2,-23,-54,23,2,-100,70,-66,120,-78,-55,92,36,24, 
  /* [1216][0][][] */ -15,26,-12,19,-28,-11,-27,-45,-12,31,0,42,-66,40,-5,77,-61,40,51,-15,3,-57,127,1,-35,31,-15,-20,-25,22,-19,-14, 
  /* [1217][0][][] */ 11,92,17,81,46,-70,-87,-46,-52,78,17,10,34,72,79,127,-49,-94,-40,119,-27,-87,71,15,36,-79,-49,103,46,-31,44,-20, 
  /* [1218][0][][] */ 85,21,8,-60,-81,-47,44,-28,66,32,-44,40,3,-79,1,-70,-30,-90,0,46,-38,90,-105,-55,127,77,68,-35,2,2,-44,-97, 
  /* [1219][0][][] */ -12,1,-7,8,-37,25,-27,-15,-102,22,-1,43,-93,-33,38,-127,23,67,-69,-32,1,-35,44,51,-116,64,26,7,-10,-3,21,56, 
  /* [1220][0][][] */ 20,40,-14,55,-48,-73,34,-49,-105,-38,14,39,-2,84,-61,-2,-2,-35,-38,12,68,16,-44,127,-85,78,-11,36,11,-31,-48,5, 
  /* [1221][0][][] */ 10,127,-19,-6,49,63,37,-40,-3,-13,43,9,-15,-58,-26,30,-42,-5,24,-59,-31,-3,8,34,-18,-112,-26,47,-12,-2,-72,32, 
  /* [1222][0][][] */ -64,6,-18,24,-20,-52,21,-19,-93,19,5,11,39,-20,-20,-6,27,-18,-22,26,116,40,11,63,30,39,-4,15,-38,127,77,3, 
  /* [1223][0][][] */ 2,-13,13,24,-60,-71,7,58,42,24,2,24,-21,-22,24,29,12,-80,54,-9,43,-53,-14,-4,-53,9,85,44,31,127,-28,-12, 
  /* [1224][0][][] */ 8,26,12,62,4,51,-57,80,-80,-37,97,13,24,-114,82,-110,-32,45,-64,37,63,-86,5,48,113,34,127,3,79,-35,-87,3, 
  /* [1225][0][][] */ 43,117,75,31,-65,32,-47,42,-64,39,29,116,-59,36,78,2,122,8,-38,54,35,-79,21,22,9,25,37,59,-21,-54,-57,-127, 
  /* [1226][0][][] */ -92,-6,-46,-52,99,-53,-84,89,-15,-55,111,-36,-40,103,-33,-5,11,71,-57,-42,-58,-70,-93,-49,-127,-47,23,-2,-4,100,30,-45, 
  /* [1227][0][][] */ 49,-127,65,-62,-72,-7,59,-16,-56,-49,-19,41,12,-29,-20,19,11,-12,-53,26,12,-93,-31,30,-58,66,7,59,-22,-18,-9,21, 
  /* [1228][0][][] */ -8,-46,-18,-127,51,54,86,42,-90,-44,16,14,-29,67,58,24,-24,43,34,38,-77,39,37,87,-47,-17,-44,-15,-65,-14,41,81, 
  /* [1229][0][][] */ 29,51,76,-39,-12,34,15,-60,-3,-46,-27,2,-32,-52,29,-43,-26,-71,-127,15,-30,54,9,52,2,42,-4,-20,17,-31,-69,43, 
  /* [1230][0][][] */ -8,-59,24,-18,17,-37,42,7,-29,-35,-29,24,31,73,-25,-94,-37,-16,127,4,55,-10,71,-18,-5,55,2,20,3,-13,-75,6, 
  /* [1231][0][][] */ -14,66,-127,34,91,33,109,-4,8,40,-42,-11,-39,-98,-40,-60,9,-6,-3,33,-42,51,-39,31,-22,-77,-5,17,-6,91,57,6, 
  /* [1232][0][][] */ 4,-27,-2,-97,42,-80,7,37,96,125,-7,127,30,-77,-55,113,-31,13,40,123,-111,-17,10,-95,0,-16,7,14,-10,93,-3,55, 
  /* [1233][0][][] */ 26,-43,-110,37,-60,12,-100,-99,57,47,-39,-32,-5,-14,43,-13,-53,-30,-64,-39,-17,127,58,42,63,-21,-17,76,36,23,-27,-59, 
  /* [1234][0][][] */ -34,3,-7,81,15,-40,-40,68,7,15,-56,72,65,25,88,48,111,-53,19,45,31,-48,-53,62,-127,21,-110,-24,126,35,-13,-12, 
  /* [1235][0][][] */ -21,21,37,-40,8,9,-18,-1,-16,25,86,1,-96,-1,28,-28,-7,19,110,-45,23,37,-73,41,-9,60,0,-127,14,-28,1,-93, 
  /* [1236][0][][] */ -89,32,-111,60,-64,31,-80,40,-13,-19,-10,-26,-17,46,-28,-115,58,46,-58,76,79,8,-50,-33,-78,119,42,33,79,8,127,-77, 
  /* [1237][0][][] */ -66,23,14,79,3,21,-16,60,31,43,-36,-117,-36,-11,-37,78,9,5,-26,-14,-80,-24,61,42,4,-7,86,-10,-127,18,-43,-48, 
  /* [1238][0][][] */ 31,25,-37,-13,14,-18,80,40,-31,-127,-11,79,-30,-24,-40,71,-45,47,-40,64,-26,16,-77,41,-76,-8,-55,56,-16,110,-61,47, 
  /* [1239][0][][] */ -55,-30,-55,127,-49,-27,33,5,12,29,19,23,-25,50,-50,-33,25,-35,27,7,-3,47,-13,-20,-19,-45,56,-6,30,-1,41,-47, 
  /* [1240][0][][] */ 0,-96,59,93,21,2,-9,-118,9,34,103,-77,-127,-71,16,-34,18,96,17,14,92,106,25,47,-39,64,86,40,79,-32,22,-64, 
  /* [1241][0][][] */ 16,-27,5,-13,-96,-38,21,1,-16,-60,-51,72,18,7,-7,-13,-31,32,34,42,19,20,-16,-127,102,-29,22,-55,-31,49,56,-17, 
  /* [1242][0][][] */ -74,40,-14,9,-106,-7,-25,9,92,110,-71,-8,-26,86,-111,-88,114,83,-46,-41,33,-21,3,7,-46,-43,38,44,111,127,69,106, 
  /* [1243][0][][] */ 25,0,37,17,-74,-38,-30,-9,10,-15,-39,-81,-45,-18,-26,46,54,-16,34,-54,8,13,28,-14,-10,26,29,0,37,-127,87,-5, 
  /* [1244][0][][] */ 6,-110,53,47,127,-42,-43,93,95,33,50,119,80,64,27,-77,16,-40,105,-72,100,8,-11,-38,38,51,26,49,-90,6,35,72, 
  /* [1245][0][][] */ 72,-43,80,-43,-13,-89,-38,-46,-18,-101,13,48,77,-81,-42,-8,31,24,21,59,68,6,-20,-8,75,-114,-13,-16,18,-32,-103,-127, 
  /* [1246][0][][] */ -93,-59,73,-57,-28,69,59,-67,13,-127,39,-68,-56,-20,64,-69,-6,-64,63,-69,-45,-93,-15,29,-67,-51,-2,-14,-53,-119,-15,-70, 
  /* [1247][0][][] */ -60,-24,40,127,-19,-61,-65,-76,-14,-27,-21,-38,103,18,-33,-6,-28,-124,35,-59,2,58,24,1,-64,-87,-53,23,-34,-17,36,-4, 
  /* [1248][0][][] */ -22,36,-81,-60,46,11,17,-25,-42,20,-43,23,48,-37,11,-127,45,59,5,32,-31,-52,62,-78,39,-29,-83,50,-47,76,43,41, 
  /* [1249][0][][] */ -6,91,-8,-14,93,50,90,-9,83,6,-28,-127,93,82,-116,-12,-55,-14,58,-66,96,-40,-84,-27,49,-36,-33,24,2,-8,-29,44, 
  /* [1250][0][][] */ -99,-13,-49,44,54,127,-31,71,25,-17,12,-50,13,-13,-10,9,-65,92,100,5,19,109,48,11,-55,26,-6,29,37,44,37,0, 
  /* [1251][0][][] */ -61,16,47,44,-40,70,-2,3,-17,7,-2,-2,13,4,-7,-81,-68,-17,3,-49,-52,63,-65,17,49,5,1,74,-25,-104,127,-74, 
  /* [1252][0][][] */ 20,-74,-15,9,23,71,-107,65,2,-93,-49,34,103,-87,-127,26,-47,-8,22,-106,-53,27,-45,-50,107,10,7,-40,54,-105,30,22, 
  /* [1253][0][][] */ 65,-50,9,-67,-127,6,-43,-15,51,-30,-82,65,-77,27,-75,42,16,33,-81,-12,-19,30,58,42,-50,94,29,-12,-59,37,30,-35, 
  /* [1254][0][][] */ -115,76,-113,-15,127,-59,-54,-115,-98,-8,-35,44,-32,-49,-93,-61,-54,21,-105,-111,-57,82,11,-104,45,-80,24,-75,103,13,-60,5, 
  /* [1255][0][][] */ -4,-29,-46,-11,-32,-55,75,39,-99,-51,-36,-32,-8,8,-7,-66,11,-81,-12,-71,7,58,-38,-20,-37,-35,-4,-14,-2,-44,127,-8, 
  /* [1256][0][][] */ 23,36,1,92,-8,28,9,7,-76,69,-39,-30,23,13,30,77,97,-27,-19,-68,127,28,12,11,-3,8,35,-30,18,24,33,-8, 
  /* [1257][0][][] */ 15,-86,62,-97,2,52,-48,-123,29,-35,-11,-38,58,3,-74,4,23,15,17,-81,110,-26,14,-53,60,12,15,-127,105,-27,6,-1, 
  /* [1258][0][][] */ 41,32,-17,82,-36,-27,7,-38,-22,-95,33,21,108,19,54,3,-12,-67,29,23,-37,-127,-25,77,10,6,-16,-37,-2,10,14,25, 
  /* [1259][0][][] */ 15,82,-127,2,67,-89,-49,13,-75,-43,20,-20,-84,-49,56,-2,-7,-34,60,-88,62,7,-59,36,36,-12,54,58,34,-4,28,22, 
  /* [1260][0][][] */ 48,-47,88,-57,16,58,-58,47,48,27,9,40,-33,-13,-2,75,-48,99,-36,16,100,127,27,0,51,-57,-27,47,-61,-35,24,-50, 
  /* [1261][0][][] */ -42,-9,-46,-26,6,-19,12,-93,-21,83,-46,-42,-41,62,-38,-1,4,0,6,-60,-8,100,-27,21,-6,-34,-71,-56,22,-20,-34,-127, 
  /* [1262][0][][] */ -127,53,-30,-33,-39,-32,11,34,-9,108,-3,-39,44,13,13,87,-31,-5,27,23,58,-48,-7,-68,56,2,-17,99,-3,37,59,-35, 
  /* [1263][0][][] */ -2,-127,-51,-10,-88,-1,-21,27,96,22,-19,-48,53,23,-109,-26,20,-24,55,-14,-44,31,9,-21,42,-76,43,75,49,35,33,20, 
  /* [1264][0][][] */ -18,22,88,-90,55,6,18,67,-1,-22,91,5,22,-14,-14,23,-60,86,-6,-9,34,-96,-88,-82,127,-22,12,31,31,-19,41,27, 
  /* [1265][0][][] */ -57,-31,-51,-27,9,94,-5,-48,14,22,58,-61,-22,34,28,-8,99,-70,42,-27,16,-5,43,-2,-51,-60,-127,-58,58,53,87,64, 
  /* [1266][0][][] */ 24,89,-74,45,-4,18,21,-17,86,-105,-18,75,-66,18,-35,75,-32,67,30,50,-127,-45,6,6,62,5,14,-17,-40,-13,72,24, 
  /* [1267][0][][] */ -37,10,7,-16,46,-7,-11,-66,26,52,-5,12,-38,-36,13,-35,29,127,-60,5,18,9,-58,43,-30,15,40,-73,10,32,-66,-18, 
  /* [1268][0][][] */ -72,4,25,-71,-52,49,-13,-36,-27,-57,35,1,56,31,29,-40,127,65,85,-3,-22,44,34,2,-27,24,119,-47,11,5,5,22, 
  /* [1269][0][][] */ 42,104,63,-97,-40,15,-37,-5,5,69,34,-42,-94,-32,-121,94,73,-29,125,-127,24,6,68,-120,-18,22,-102,-1,66,62,-39,-53, 
  /* [1270][0][][] */ 19,7,-38,42,-56,34,-8,61,92,119,-34,46,-3,-24,-18,-35,-8,19,25,-7,20,-64,-76,6,-17,-46,127,74,3,52,19,-33, 
  /* [1271][0][][] */ 116,61,-46,-127,50,35,-109,79,30,61,-33,-32,-16,-6,-3,-11,15,67,21,-37,-1,-37,-44,-20,46,31,-1,54,-16,55,-65,-14, 
  /* [1272][0][][] */ -60,-37,-11,-27,86,44,17,-127,-29,-45,-16,-15,-39,-33,-22,11,-31,-21,-73,-11,10,-108,20,0,34,-36,-26,85,-27,55,-33,71, 
  /* [1273][0][][] */ -25,-41,-70,-59,6,-6,62,-9,-65,23,42,-12,86,-35,30,38,43,-86,42,-4,-62,37,-52,-47,127,71,27,-39,23,-52,13,12, 
  /* [1274][0][][] */ -73,-40,10,-45,-24,-66,-57,76,-74,-67,-25,-121,-11,-100,-26,13,53,-30,-13,-29,13,15,45,11,73,-1,-41,1,-12,127,71,125, 
  /* [1275][0][][] */ -127,2,-19,37,-54,7,-68,53,-17,-21,7,11,-4,33,20,-69,-29,-23,56,20,51,36,28,8,-17,-124,-48,24,-5,106,39,22, 
  /* [1276][0][][] */ -55,49,28,127,-4,4,28,-55,-22,-47,35,-25,35,-59,22,-25,93,-62,20,15,15,-48,34,86,-22,5,3,-79,-28,35,25,44, 
  /* [1277][0][][] */ 0,-29,-14,-3,56,-99,95,-18,68,39,-2,46,46,-8,-44,-7,58,67,4,93,67,-127,-17,-23,-84,-55,-75,45,-66,15,38,-34, 
  /* [1278][0][][] */ -95,-72,-11,0,10,121,-9,-39,-59,-27,-54,14,63,-53,4,-21,-127,35,-33,16,49,-6,-13,55,-19,-15,-36,111,65,-106,-121,24, 
  /* [1279][0][][] */ 60,32,40,2,-27,15,-82,61,-7,6,-38,37,25,20,95,-27,-10,-14,87,76,21,-15,-127,-52,41,29,42,-78,-23,8,30,89, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 1280,1,1,32 } };
const TfArray<1280, float> quant8_scale = { 1280, { 0.0050284266471862793, 0.0058817001990973949, 0.0048302188515663147, 0.0052948636002838612, 0.0054145758040249348, 0.0062053287401795387, 0.0054537518881261349, 0.0048430250026285648, 0.0050700916908681393, 0.0054023144766688347, 0.0065598399378359318, 0.0046439920552074909, 0.0054597607813775539, 0.0050711417570710182, 0.0050054267048835754, 0.0051240348257124424, 0.0063936612568795681, 0.0065749925561249256, 0.005814751610159874, 0.0045181643217802048, 0.0076557444408535957, 0.0041846404783427715, 0.0048253084532916546, 0.0050436966121196747, 0.00563454395160079, 0.0052786120213568211, 0.007196678314357996, 0.0056180525571107864, 0.006448931060731411, 0.0070143928751349449, 0.0057105142623186111, 0.0056974710896611214, 0.0060614673420786858, 0.0073175248689949512, 0.0065067359246313572, 0.0065567996352910995, 0.0048420960083603859, 0.0055623981170356274, 0.0051817423664033413, 0.0056282859295606613, 0.0057258992455899715, 0.0048380233347415924, 0.0050585190765559673, 0.0056750108487904072, 0.0057429233565926552, 0.0078772464767098427, 0.0057745329104363918, 0.0043267016299068928, 0.0066986936144530773, 0.0066039273515343666, 0.0045673144049942493, 0.0054222866892814636, 0.0053163673728704453, 0.0049964948557317257, 0.0047913896851241589, 0.0065957363694906235, 0.0061207055114209652, 0.0049467622302472591, 0.0061008129268884659, 0.0063642263412475586, 0.0042963107116520405, 0.0047386209480464458, 0.0061462628655135632, 0.0046570613048970699, 0.0067947530187666416, 0.0077324989251792431, 0.0051431059837341309, 0.004840328823775053, 0.0057365368120372295, 0.0060330727137625217, 0.0057474207133054733, 0.005643840879201889, 0.0044137025251984596, 0.0073667955584824085, 0.0061796596273779869, 0.004665096290409565, 0.005253396462649107, 0.0069733243435621262, 0.0056126983836293221, 0.005773487500846386, 0.0042810332961380482, 0.0046903579495847225, 0.0050650285556912422, 0.0055476278066635132, 0.0069573777727782726, 0.0055888425558805466, 0.0050131161697208881, 0.0055602565407752991, 0.0047325356863439083, 0.006098342128098011, 0.0049772895872592926, 0.005034253466874361, 0.0067583015188574791, 0.0056765582412481308, 0.0051397937349975109, 0.0053757615387439728, 0.0057542365975677967, 0.0055200043134391308, 0.0069036069326102734, 0.0051337522454559803, 0.0062000807374715805, 0.0054302397184073925, 0.0051184818148612976, 0.0055865533649921417, 0.0048415521159768105, 0.0069474531337618828, 0.0077612870372831821, 0.0048302714712917805, 0.0056818039156496525, 0.0051787914708256721, 0.0055588199757039547, 0.0048923250287771225, 0.0066723260097205639, 0.007285071536898613, 0.0076120817102491856, 0.0063377814367413521, 0.0051129930652678013, 0.0073744999244809151, 0.0057077840901911259, 0.0062180389650166035, 0.0049145161174237728, 0.0061308718286454678, 0.0068519231863319874, 0.0053218933753669262, 0.0065533695742487907, 0.0047714961692690849, 0.005015155766159296, 0.0064617525786161423, 0.004549860954284668, 0.0059341690503060818, 0.0055265608243644238, 0.0064111212268471718, 0.005417360458523035, 0.0050962306559085846, 0.0056607117876410484, 0.0057978052645921707, 0.0067544551566243172, 0.0049680662341415882, 0.0057545453310012817, 0.0052151135168969631, 0.0066017252393066883, 0.0057768812403082848, 0.0055929394438862801, 0.005811032373458147, 0.0046357549726963043, 0.0053027598187327385, 0.0061160596087574959, 0.0068197664804756641, 0.0056311530061066151, 0.00598131213337183, 0.0050439117476344109, 0.0047458442859351635, 0.0060265189968049526, 0.0059221405535936356, 0.0051702787168323994, 0.0063230544328689575, 0.0064544277265667915, 0.0054113911464810371, 0.0063165752217173576, 0.006659423466771841, 0.0044197975657880306, 0.0054126218892633915, 0.0074263857677578926, 0.0055930214002728462, 0.0045525995083153248, 0.0063156471587717533, 0.00698453513905406, 0.0057298066094517708, 0.0041099083609879017, 0.0050575933419167995, 0.0060005765408277512, 0.0058520482853055, 0.0046502044424414635, 0.0073246429674327374, 0.0052664284594357014, 0.0051441038958728313, 0.0057579213753342628, 0.0062583433464169502, 0.0068010129034519196, 0.0054827197454869747, 0.0051305391825735569, 0.0086946021765470505, 0.0044907191768288612, 0.0051156948320567608, 0.0051684295758605003, 0.0048682577908039093, 0.0058240648359060287, 0.0050738221034407616, 0.0056578223593533039, 0.0047987988218665123, 0.0051520667038857937, 0.0050137876532971859, 0.0063226106576621532, 0.0052241599187254906, 0.0051165437325835228, 0.0061204209923744202, 0.0042395670898258686, 0.0057050203904509544, 0.0053485017269849777, 0.0073348656296730042, 0.0065982057712972164, 0.0049262405373156071, 0.0054699871689081192, 0.0062798922881484032, 0.0055063189938664436, 0.005300949327647686, 0.0044409451074898243, 0.0054672872647643089, 0.0057134851813316345, 0.0064762728288769722, 0.0054647233337163925, 0.0039928629994392395, 0.0064601795747876167, 0.0053404825739562511, 0.0061738975346088409, 0.0071100504137575626, 0.0067539690062403679, 0.006358481477946043, 0.0063758376054465771, 0.0049175247550010681, 0.0077238786034286022, 0.0072833816520869732, 0.004727962426841259, 0.0054965661838650703, 0.008251492865383625, 0.0063559031113982201, 0.0046420618891716003, 0.0064994366839528084, 0.0059995260089635849, 0.0066030141897499561, 0.0053767305798828602, 0.0073035280220210552, 0.0060221785679459572, 0.0045449850149452686, 0.0071099819615483284, 0.0065366681665182114, 0.007338404655456543, 0.0078424848616123199, 0.0063992943614721298, 0.0052959206514060497, 0.004873241763561964, 0.0049552028067409992, 0.0062433197163045406, 0.0071155093610286713, 0.0059863911010324955, 0.0054927794262766838, 0.0055734892375767231, 0.0070280195213854313, 0.0042303102090954781, 0.0079381205141544342, 0.0048192390240728855, 0.0043588588014245033, 0.0059889825060963631, 0.0056986776180565357, 0.0049518188461661339, 0.0057797455228865147, 0.0060600065626204014, 0.0055660777725279331, 0.0054063876159489155, 0.0059331902302801609, 0.005857373122125864, 0.0055698440410196781, 0.0058009871281683445, 0.0047851130366325378, 0.0051417304202914238, 0.0043205353431403637, 0.0063293622806668282, 0.0073165730573236942, 0.004527572076767683, 0.0068982923403382301, 0.0059930426068603992, 0.0056525282561779022, 0.0045453994534909725, 0.0055743851698935032, 0.0055375159718096256, 0.0054894532077014446, 0.0069850082509219646, 0.0054476833902299404, 0.0041556372307240963, 0.0053733908571302891, 0.005745133850723505, 0.0063529717735946178, 0.0058249803259968758, 0.0047624153085052967, 0.0047936267219483852, 0.0058319615200161934, 0.0043778074905276299, 0.006124839186668396, 0.0046441871672868729, 0.0051202671602368355, 0.0055425167083740234, 0.0043063992634415627, 0.005398901179432869, 0.0060723735950887203, 0.0066539961844682693, 0.0050794016569852829, 0.004821424838155508, 0.0049888156354427338, 0.0079553145915269852, 0.0059753721579909325, 0.0062576238997280598, 0.0052412441000342369, 0.0060662454925477505, 0.0060134171508252621, 0.0047564082778990269, 0.0053810556419193745, 0.0048305303789675236, 0.0052691642194986343, 0.0045148329809308052, 0.0052492138929665089, 0.0049161529168486595, 0.0054297489114105701, 0.0056721800938248634, 0.0065363254398107529, 0.0052364272996783257, 0.0056634433567523956, 0.0050120977684855461, 0.0054641249589622021, 0.0052316309884190559, 0.0090030701830983162, 0.0057446807622909546, 0.0052801221609115601, 0.0051086284220218658, 0.0055797463282942772, 0.0069659887813031673, 0.0046882890164852142, 0.0061017461121082306, 0.0062641450203955173, 0.004571876022964716, 0.010321930982172489, 0.0060908147133886814, 0.0063770925626158714, 0.0059812380932271481, 0.0057895551435649395, 0.0050604003481566906, 0.0045633581466972828, 0.0064587723463773727, 0.005448109470307827, 0.0062966980040073395, 0.00462769391015172, 0.0059380289167165756, 0.0084039950743317604, 0.0051525440067052841, 0.0043781674467027187, 0.0046789897605776787, 0.0044732778333127499, 0.0056899688206613064, 0.0068334382958710194, 0.006386646069586277, 0.0054524927400052547, 0.0056955413892865181, 0.0055950712412595749, 0.0092320563271641731, 0.0053148800507187843, 0.0059643741697072983, 0.0048521291464567184, 0.0055310572497546673, 0.0052898633293807507, 0.0050233700312674046, 0.006590631790459156, 0.0052129672840237617, 0.005076640285551548, 0.0060074776411056519, 0.0049893232062458992, 0.0082606729120016098, 0.0047870064154267311, 0.0048822001554071903, 0.006191884633153677, 0.004602519329637289, 0.0066074971109628677, 0.0047036302275955677, 0.0055428622290492058, 0.0054509183391928673, 0.0071114371530711651, 0.0050650578923523426, 0.0073654418811202049, 0.0067157815210521221, 0.0059883231297135353, 0.0049045886844396591, 0.0057470118626952171, 0.006456729955971241, 0.0061329072341322899, 0.0059668091125786304, 0.0078912349417805672, 0.0059355995617806911, 0.0058259754441678524, 0.0089799342676997185, 0.0046475888229906559, 0.0059109795838594437, 0.0049999081529676914, 0.0056866034865379333, 0.0054418169893324375, 0.0069094868376851082, 0.0068517131730914116, 0.0042767683044075966, 0.0049331290647387505, 0.0058606760576367378, 0.0072507155127823353, 0.0055581764318048954, 0.0050011081621050835, 0.0066010071896016598, 0.0042281327769160271, 0.005633064080029726, 0.0048033213242888451, 0.0051161819137632847, 0.0068805841729044914, 0.0049609714187681675, 0.0053345016203820705, 0.0062028267420828342, 0.005723973736166954, 0.0046978909522294998, 0.0060511804185807705, 0.0053814849816262722, 0.0048722526989877224, 0.0056972759775817394, 0.0051629170775413513, 0.0048525603488087654, 0.0055122086778283119, 0.0073061133734881878, 0.0065824887715280056, 0.0048712617717683315, 0.0050949295982718468, 0.0051115201786160469, 0.0064208474941551685, 0.0049153659492731094, 0.0056954319588840008, 0.0050725215114653111, 0.0062356512062251568, 0.0048141516745090485, 0.0079526146873831749, 0.005183839239180088, 0.005109056830406189, 0.0050883009098470211, 0.0049970461986958981, 0.0057599092833697796, 0.005767215508967638, 0.0047623300924897194, 0.0060261879116296768, 0.0054936795495450497, 0.0048732240684330463, 0.0054205856285989285, 0.0060903234407305717, 0.005239380057901144, 0.0059751407243311405, 0.005808279849588871, 0.0051881461404263973, 0.0049546007066965103, 0.006902783177793026, 0.004706245381385088, 0.0070023187436163425, 0.0046937125734984875, 0.0053019654005765915, 0.00499760452657938, 0.0060900957323610783, 0.0064613628201186657, 0.004350555595010519, 0.0058175674639642239, 0.0059872451238334179, 0.0048354663886129856, 0.0050318213179707527, 0.0087268650531768799, 0.0050642881542444229, 0.0053653009235858917, 0.0061271432787179947, 0.0059730354696512222, 0.0053276801481842995, 0.005362639669328928, 0.0055355094373226166, 0.0060577681288123131, 0.0048736613243818283, 0.0069436030462384224, 0.00467290123924613, 0.0086201699450612068, 0.0046627349220216274, 0.0054905219003558159, 0.004998999647796154, 0.0053902994841337204, 0.0058204145170748234, 0.0048239463940262794, 0.0057085207663476467, 0.005875124130398035, 0.0053397482261061668, 0.0039740526117384434, 0.0059210034087300301, 0.0069954385980963707, 0.0061807148158550262, 0.0070340987294912338, 0.0064333854243159294, 0.0063379844650626183, 0.0068439855240285397, 0.0069815446622669697, 0.0064221988432109356, 0.0056404275819659233, 0.0059247743338346481, 0.0051151895895600319, 0.0048473337665200233, 0.0041552884504199028, 0.005379166454076767, 0.0064918580465018749, 0.0046234223991632462, 0.005733763799071312, 0.0050831981934607029, 0.0071426704525947571, 0.0068023763597011566, 0.0060239196754992008, 0.0050035375170409679, 0.0041566579602658749, 0.0064496593549847603, 0.0059601552784442902, 0.0054239584133028984, 0.0057058637030422688, 0.0048222099430859089, 0.0074120401404798031, 0.0056921695359051228, 0.0057055330835282803, 0.0057970662601292133, 0.0045506097376346588, 0.0056614065542817116, 0.0072775743901729584, 0.005016727838665247, 0.0039782323874533176, 0.0052186185494065285, 0.0068924170918762684, 0.0053496570326387882, 0.005757803563028574, 0.0051124924793839455, 0.0047481837682425976, 0.0058855949901044369, 0.005011274479329586, 0.0059258514083921909, 0.0058428817428648472, 0.0085036465898156166, 0.0056318305432796478, 0.004553978331387043, 0.009508923627436161, 0.0061763692647218704, 0.0056064589880406857, 0.005368400365114212, 0.0047603691928088665, 0.0050957235507667065, 0.0048437290824949741, 0.0038875692989677191, 0.0039811232127249241, 0.0060239033773541451, 0.0062283733859658241, 0.0059026111848652363, 0.0051901894621551037, 0.0045817005448043346, 0.0046240654774010181, 0.0051494883373379707, 0.005926231388002634, 0.004301208071410656, 0.0046352050267159939, 0.00587046192958951, 0.0058194780722260475, 0.0066503160633146763, 0.0051094265654683113, 0.0054326104000210762, 0.0061661992222070694, 0.0061216503381729126, 0.0067258654162287712, 0.0055090240202844143, 0.0057615474797785282, 0.0051678428426384926, 0.0048716380260884762, 0.0077181225642561913, 0.0042715687304735184, 0.0065792337991297245, 0.0060698371380567551, 0.0060652107931673527, 0.0070784194394946098, 0.0060295481234788895, 0.0046350928023457527, 0.0049221795052289963, 0.0047909249551594257, 0.0045650936663150787, 0.0061347805894911289, 0.0042641079053282738, 0.0062322164885699749, 0.0059510604478418827, 0.0068268207833170891, 0.0059053301811218262, 0.0073386188596487045, 0.0073112808167934418, 0.0062742666341364384, 0.0055752862244844437, 0.0086139403283596039, 0.0053399079479277134, 0.0055334134958684444, 0.0051820371299982071, 0.005798746831715107, 0.0056443563662469387, 0.0052730287425220013, 0.0069941212423145771, 0.0056166430003941059, 0.0061097224242985249, 0.00488708121702075, 0.0054706558585166931, 0.006016590166836977, 0.0066832858137786388, 0.0047031533904373646, 0.00463451212272048, 0.0047776186838746071, 0.0062979958020150661, 0.0051582115702331066, 0.0056037595495581627, 0.0060426504351198673, 0.0048584556207060814, 0.0057790107093751431, 0.0069898669607937336, 0.0064389645121991634, 0.0070950803346931934, 0.0055180382914841175, 0.0052571878768503666, 0.0055519766174256802, 0.0037976859603077173, 0.0051096207462251186, 0.0053878705948591232, 0.0053257630206644535, 0.0055401688441634178, 0.0070319157093763351, 0.0049209622666239738, 0.006007359828799963, 0.0059077953919768333, 0.0048597562126815319, 0.004850274883210659, 0.0054832831956446171, 0.0067035937681794167, 0.005136420950293541, 0.0051763933151960373, 0.0048589319922029972, 0.0047140852548182011, 0.0056853895075619221, 0.0050650662742555141, 0.0050305523909628391, 0.006392783485352993, 0.0068513387814164162, 0.0043265116401016712, 0.005330126266926527, 0.0045006615109741688, 0.0064378692768514156, 0.0056155463680624962, 0.0069599817506968975, 0.0047384463250637054, 0.0051841568201780319, 0.0052241063676774502, 0.007213914766907692, 0.0053641349077224731, 0.0057271281257271767, 0.0053512239828705788, 0.0056502819061279297, 0.0051130601204931736, 0.0060919518582522869, 0.0066055441275238991, 0.003881863784044981, 0.0049162153154611588, 0.0080734072253108025, 0.0053279264830052853, 0.0062829372473061085, 0.004211947787553072, 0.0048540886491537094, 0.0052195168100297451, 0.0049942145124077797, 0.0050275335088372231, 0.0045958738774061203, 0.0046499692834913731, 0.0058061494491994381, 0.0048357639461755753, 0.0050941887311637402, 0.0074491812847554684, 0.005008193664252758, 0.0070066158659756184, 0.0064522004686295986, 0.0055686803534626961, 0.0053918496705591679, 0.0057509350590407848, 0.0078842872753739357, 0.0063387472182512283, 0.0051050069741904736, 0.0054160053841769695, 0.0048409844748675823, 0.0045231729745864868, 0.0047785653732717037, 0.0045752660371363163, 0.0052431849762797356, 0.0046074623242020607, 0.005902482196688652, 0.0051155746914446354, 0.0048791486769914627, 0.0068694255314767361, 0.004767262376844883, 0.0047163008712232113, 0.0060501443222165108, 0.0075410567224025726, 0.0065176351927220821, 0.0069649443030357361, 0.00655362568795681, 0.005254566203802824, 0.004969792440533638, 0.0043761702254414558, 0.0080437557771801949, 0.005723798181861639, 0.0057030706666409969, 0.0065283714793622494, 0.0061367363668978214, 0.0052864542230963707, 0.0058186464011669159, 0.0047565028071403503, 0.0076604499481618404, 0.0057681496255099773, 0.0047452119179069996, 0.0039832652546465397, 0.0055373832583427429, 0.0055693634785711765, 0.0068575656041502953, 0.0069688074290752411, 0.0053894966840744019, 0.0046220519579946995, 0.0063534756191074848, 0.0048934514634311199, 0.0056904163211584091, 0.0067216157913208008, 0.0052104112692177296, 0.0060098427347838879, 0.0057372921146452427, 0.005049524363130331, 0.0064951623789966106, 0.0054457308724522591, 0.0049753086641430855, 0.0051586129702627659, 0.0050528696738183498, 0.0053197587840259075, 0.005788454320281744, 0.0045099342241883278, 0.0057393475435674191, 0.005800323560833931, 0.004969538189470768, 0.0053703263401985168, 0.0064477329142391682, 0.0053492090664803982, 0.0058936723507940769, 0.0065563106909394264, 0.0049005364999175072, 0.0053844545036554337, 0.0056166988797485828, 0.0047823297791182995, 0.0060430974699556828, 0.0050954842008650303, 0.0047859074547886848, 0.0062389867380261421, 0.006218309048563242, 0.0050575439818203449, 0.00475330650806427, 0.0056131090968847275, 0.0062994873151183128, 0.0061935903504490852, 0.0059567121788859367, 0.0044244960881769657, 0.0070746727287769318, 0.0047089774161577225, 0.0048433151096105576, 0.0064672180451452732, 0.0041822055354714394, 0.0061549344100058079, 0.0061754141934216022, 0.0053151929751038551, 0.0062918574549257755, 0.0049997973255813122, 0.0059041669592261314, 0.0065044816583395004, 0.005555763840675354, 0.0055996389128267765, 0.0066736969165503979, 0.0048868507146835327, 0.0043918234296143055, 0.0046707796864211559, 0.0077971462160348892, 0.0053019514307379723, 0.0071749831549823284, 0.0044646542519330978, 0.0065549155697226524, 0.0062892180867493153, 0.0062899505719542503, 0.0072904494591057301, 0.0061172447167336941, 0.0084983380511403084, 0.0061979405581951141, 0.0052392114885151386, 0.0056409775279462337, 0.0049290992319583893, 0.005810632836073637, 0.0054944632574915886, 0.0070213265717029572, 0.0051119872368872166, 0.0060238116420805454, 0.0054644499905407429, 0.0053955572657287121, 0.0053415149450302124, 0.0054574809037148952, 0.0050655570812523365, 0.0051740654744207859, 0.0053724600002169609, 0.0053870752453804016, 0.0057933912612497807, 0.0059826974757015705, 0.0064044976606965065, 0.0048492485657334328, 0.0043385820463299751, 0.0049027604982256889, 0.0052874968387186527, 0.006853968370705843, 0.0059697097167372704, 0.0053972667083144188, 0.0068045561201870441, 0.0047365468926727772, 0.0053173480555415154, 0.0047630676999688148, 0.0064190388657152653, 0.0043891239911317825, 0.0049104578793048859, 0.0073665715754032135, 0.0057133054360747337, 0.0059424079954624176, 0.0065055126324295998, 0.0061600957997143269, 0.0061324387788772583, 0.0045628780499100685, 0.0055690794251859188, 0.0058475560508668423, 0.0075996131636202335, 0.0044402270577847958, 0.0050203804858028889, 0.0043279808014631271, 0.0054393359459936619, 0.0059219184331595898, 0.0072631733492016792, 0.0065078716725111008, 0.0062933042645454407, 0.0045699249021708965, 0.0064788935706019402, 0.0068119796924293041, 0.0078555066138505936, 0.0062597715295851231, 0.0051283016800880432, 0.0064623439684510231, 0.0043967599049210548, 0.0043874168768525124, 0.0052291341125965118, 0.0068780640140175819, 0.0067563159391283989, 0.0054429257288575172, 0.004417231772094965, 0.0053923884406685829, 0.006141317542642355, 0.0044222730211913586, 0.0052874353714287281, 0.0055339932441711426, 0.0057700672186911106, 0.0070644472725689411, 0.0059908023104071617, 0.0055666598491370678, 0.0045431922189891338, 0.0059661096893250942, 0.0052678654901683331, 0.0070307496935129166, 0.0044267978519201279, 0.0059702284634113312, 0.0057688523083925247, 0.0048311306163668633, 0.0052424655295908451, 0.0068566454574465752, 0.0038514863699674606, 0.004517565481364727, 0.0057344459928572178, 0.0052646123804152012, 0.0062505039386451244, 0.0052253948524594307, 0.0043844864703714848, 0.0065972725860774517, 0.0047115976922214031, 0.0067492756061255932, 0.0048640007153153419, 0.0052876602858304977, 0.0050385268405079842, 0.0092629715800285339, 0.0051878280937671661, 0.004305696114897728, 0.0041417991742491722, 0.0042271544225513935, 0.0057144328020513058, 0.00721766147762537, 0.005796405952423811, 0.0061748316511511803, 0.0042824000120162964, 0.0062789488583803177, 0.0046934252604842186, 0.0059122699312865734, 0.0061584049835801125, 0.0063639497384428978, 0.005900778342038393, 0.0050469017587602139, 0.006528148427605629, 0.0058564888313412666, 0.0058800717815756798, 0.0055778692476451397, 0.0051222085021436214, 0.006585828959941864, 0.0057282578200101852, 0.0057965111918747425, 0.0052327965386211872, 0.0064134020358324051, 0.0076900320127606392, 0.0056202970445156097, 0.0045054135844111443, 0.0066597186960279942, 0.0066371196880936623, 0.0052528465166687965, 0.0060342238284647465, 0.0046089407987892628, 0.0058525376953184605, 0.0064662611111998558, 0.0076154326088726521, 0.0059484061785042286, 0.0051976325921714306, 0.0049701114185154438, 0.0051758680492639542, 0.0055675464682281017, 0.0050011966377496719, 0.0048547075130045414, 0.0052185924723744392, 0.0067302822135388851, 0.0060834735631942749, 0.0051159299910068512, 0.006733614020049572, 0.0082290498539805412, 0.0056734401732683182, 0.0057898028753697872, 0.0048229265958070755, 0.0048203547485172749, 0.0054983305744826794, 0.0058578825555741787, 0.0072006126865744591, 0.0046225185506045818, 0.0056253960356116295, 0.0064996820874512196, 0.0070702363736927509, 0.0053111566230654716, 0.0053044147789478302, 0.0062739821150898933, 0.0053281048312783241, 0.0057440432719886303, 0.0051105380989611149, 0.0060168388299643993, 0.0058564222417771816, 0.0052560344338417053, 0.0068396027199923992, 0.0043701096437871456, 0.0069662211462855339, 0.005619855597615242, 0.0061779976822435856, 0.0061353631317615509, 0.0072744530625641346, 0.0058277556672692299, 0.0058379997499287128, 0.0054906914010643959, 0.0044638300314545631, 0.0075003653764724731, 0.0066483072005212307, 0.0056426231749355793, 0.0042258775793015957, 0.0052273040637373924, 0.0049471673555672169, 0.0057499674148857594, 0.0042466646991670132, 0.004835162777453661, 0.0044303848408162594, 0.0076849977485835552, 0.0042905681766569614, 0.0057308590039610863, 0.00705345394089818, 0.0041902502998709679, 0.0051483758725225925, 0.0063201258890330791, 0.0066966600716114044, 0.0041703223250806332, 0.005791292991489172, 0.0051529724150896072, 0.0047381254844367504, 0.0049044531770050526, 0.0081159509718418121, 0.0063409651629626751, 0.0068906648084521294, 0.0047004800289869308, 0.0052842125296592712, 0.0046198908239603043, 0.00413887994363904, 0.006987494882196188, 0.0046721766702830791, 0.005660028662532568, 0.0058625033125281334, 0.0059492518194019794, 0.0077536539174616337, 0.0060492684133350849, 0.0054305833764374256, 0.0072164195589721203, 0.0054899794049561024, 0.0067435791715979576, 0.0072608590126037598, 0.005145687609910965, 0.004346383735537529, 0.004663384985178709, 0.0059028370305895805, 0.0070139546878635883, 0.0065912432037293911, 0.0046022608876228333, 0.0050197495147585869, 0.0047365203499794006, 0.0050278715789318085, 0.0049787089228630066, 0.0058553325943648815, 0.0056559429503977299, 0.0052630221471190453, 0.0067988913506269455, 0.0055744904093444347, 0.0051777600310742855, 0.0049056657589972019, 0.0061274748295545578, 0.0053190942853689194, 0.0047509633004665375, 0.0057316259481012821, 0.0047990744933485985, 0.0059800310991704464, 0.0061490777879953384, 0.0049408427439630032, 0.0059815817512571812, 0.0061806817539036274, 0.0067817582748830318, 0.0051925443112850189, 0.00489004235714674, 0.0056112068705260754, 0.0062172850593924522, 0.0054434053599834442, 0.0056779934093356133, 0.0068538626655936241, 0.0069543244317173958, 0.0053611546754837036, 0.0054651345126330853, 0.0064802910201251507, 0.0043727890588343143, 0.0054339696653187275, 0.0060282140038907528, 0.0065448805689811707, 0.0051133516244590282, 0.0060609253123402596, 0.0050883595831692219, 0.0080036688596010208, 0.0062888236716389656, 0.0056271972134709358, 0.006214445922523737, 0.0060177543200552464, 0.0047302441671490669, 0.0053774043917655945, 0.0052770338952541351, 0.0054309172555804253, 0.0045905313454568386, 0.0047485074028372765, 0.0059666289016604424, 0.0058014951646327972, 0.0064832437783479691, 0.0050116749480366707, 0.0070936805568635464, 0.0052252011373639107, 0.0054884995333850384, 0.0059054605662822723, 0.0067638442851603031, 0.0068205022253096104, 0.0064894636161625385, 0.0055861095897853374, 0.0058159492909908295, 0.005166688933968544, 0.0056126406416296959, 0.0066402601078152657, 0.0050019435584545135, 0.0050058714114129543, 0.0056875781156122684, 0.0065276045352220535, 0.0045923902653157711, 0.0063894488848745823, 0.0059819812886416912, 0.0051229279488325119, 0.0036540473811328411, 0.0055359182879328728, 0.0045853559859097004, 0.0041445442475378513, 0.0051120975986123085, 0.0052772755734622478, 0.0046866065822541714, 0.005304697435349226, 0.0048963781446218491, 0.0062237069942057133, 0.0049265683628618717, 0.0066847666166722775, 0.0047360141761600971, 0.0068689440377056599, 0.0052298698574304581, 0.0052642161026597023, 0.0061575695872306824, 0.0044988971203565598, 0.0049468120560050011, 0.00495495880022645, 0.0057169878855347633, 0.0070967250503599644, 0.0068311328068375587, 0.0048110322095453739, 0.0051262523047626019, 0.0050894687883555889, 0.0060123014263808727, 0.0078109903261065483, 0.0075021833181381226, 0.0059594386257231236, 0.0055444985628128052, 0.0061208568513393402, 0.0050060786306858063, 0.0069262441247701645, 0.0052265729755163193, 0.00489027239382267, 0.0058815758675336838, 0.0057248128578066826, 0.0077353869564831257, 0.0050636813975870609, 0.0070962137542665005, 0.0063534718938171864, 0.0064678969793021679, 0.006071391049772501, 0.0049863425083458424, 0.0053593558259308338, 0.0057472200132906437, 0.0073518240824341774, 0.0054860198870301247, 0.0060242675244808197, 0.005159041378647089, 0.0053943288512527943, 0.0043780994601547718, 0.0053746365010738373, 0.0049362624995410442, 0.0074140066280961037, 0.0058921715244650841, 0.0065111527219414711, 0.0053268498741090298, 0.0057651526294648647, 0.0050969673320651054, 0.0050029992125928402, 0.0048817056231200695, 0.0063051157630980015, 0.0063881161622703075, 0.0056931781582534313, 0.0049960962496697903, 0.0068755978718400002, 0.0057959076948463917, 0.007317043375223875, 0.0058972993865609169, 0.0056919930502772331, 0.0047834739089012146, 0.0065868981182575226, 0.0072280140593647957, 0.0054878159426152706, 0.0046979440376162529, 0.0050947670824825764, 0.0050286920741200447, 0.00481423269957304, 0.005312751978635788, 0.0047462265938520432, 0.0038462849333882332, 0.0052294963970780373, 0.0056748357601463795, 0.006468829233199358, 0.0049916161224246025, 0.006189324427396059, 0.0062474887818098068, 0.0043516401201486588, 0.0054746987298130989, 0.0057222056202590466, 0.005688993725925684, 0.0079809073358774185, 0.0050622923299670219, 0.0045051751658320427, 0.0059123728424310684, 0.0058115925639867783, 0.0048992154188454151, 0.0045777121558785439, 0.0054980190470814705, 0.0063818935304880142, 0.0063221869058907032, 0.0049548926763236523, 0.0052210865542292595, 0.004355807788670063, 0.0058173979632556438, 0.0060997195541858673, 0.0057253781706094742, 0.0050098886713385582, 0.0044667129404842854, 0.0059894677251577377, 0.0056112702004611492, 0.0052234702743589878, 0.0054275281727313995, 0.0041074394248425961, 0.0054636849090456963, 0.0058268429711461067, 0.004812220111489296, 0.0048328214325010777, 0.0065755043178796768, 0.0046168128028512001, 0.0049729929305613041, 0.0060910265892744064, 0.005544902291148901, 0.0047017829492688179, 0.00714858528226614, 0.0044405101798474789, 0.0046373470686376095, 0.0057353433221578598, 0.005338380578905344, 0.0066721504554152489, 0.0070620211772620678, 0.0070518124848604202, 0.0043489853851497173, 0.0044775353744626045, 0.0049382909201085567, 0.0060294573195278645, 0.0059291948564350605, 0.0070870323106646538, 0.0074112671427428722, 0.0059168427251279354, 0.004900631494820118, 0.005734921433031559, 0.0048996806144714355, 0.0056453351862728596, 0.0043131718412041664, 0.0061525031924247742, 0.0055304169654846191, 0.00794941745698452, 0.0039214650169014931, 0.0062415371648967266, 0.0044415984302759171, 0.007279012817889452, 0.0049824588932096958, 0.0049292002804577351, 0.0044314810074865818, 0.0058162854984402657, 0.0057451487518846989, 0.0044804159551858902, 0.0053756674751639366, 0.0056810099631547928, 0.005205200519412756, 0.0053197629749774933, 0.004074939526617527, 0.0064426367171108723, 0.0062983641400933266, 0.0051235314458608627, 0.0056392354890704155, 0.0055510164238512516, 0.005322745069861412, 0.0058392803184688091, 0.0061945049092173576, 0.005878958385437727, 0.005064972210675478, 0.0056825601495802402, 0.005186242051422596, 0.00754953408613801, 0.0060634957626461983, 0.0043752556666731834, 0.0065700551494956017, 0.0061524277552962303, 0.0067698112688958645, 0.0065244380384683609, 0.0061488915234804153, 0.0061878957785665989, 0.0068287313915789127, 0.0051642907783389091, 0.0056285555474460125, 0.0062938067130744457, } };
const TfArray<1280, int> quant8_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[32] = { -79066, 1506, 2383, 50395, -14144, -35458, 4360, 41862, -15427, 32472, -2334, 54737, -18814, 39663, -74661, -32382, -9897, -19443, 24004, 6640, 19100, 7803, -15397, -5416, -14965, -34381, 19109, 2273, -21916, -42705, 18921, -15597, };
const TfArray<1, int> tensor_dimension9 = { 1, { 32 } };
const TfArray<32, float> quant9_scale = { 32, { 9.6753006801009178e-05, 0.00011884263949468732, 8.8387030700687319e-05, 9.26614084164612e-05, 0.00013272500655148178, 0.00011985001765424386, 0.00017416939954273403, 0.00011126613389933482, 0.00010065917012980208, 0.00012613151920959353, 0.0001005252925097011, 0.00011563758016563952, 0.00013524449605029076, 0.00011609065404627472, 0.00010356762504670769, 0.00010033926082542166, 0.00012643176887650043, 0.00011825537512777373, 0.00011313614231767133, 8.7460946815554053e-05, 7.8057237260509282e-05, 9.8335171060170978e-05, 0.00010510563151910901, 8.6758140241727233e-05, 0.00010819894669111818, 9.9379241873975843e-05, 0.00010515595931792632, 9.9392083939164877e-05, 0.00011211165110580623, 7.9399673268198967e-05, 0.00010906961688306183, 0.00012479729775805026, } };
const TfArray<32, int> quant9_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data10[32*1*1*96] = { 
  /* [0][0][][] */ -91,2,103,-71,-26,35,-49,3,47,121,57,-28,-5,-10,38,-71,23,-11,81,23,12,2,51,-53,20,-54,74,32,73,53,32,27,-1,-14,45,92,-86,33,26,17,-15,36,27,-127,51,-34,5,19,49,67,19,65,-20,57,-28,-19,64,66,-31,-17,43,10,-27,-32,19,5,-67,26,-4,74,-36,62,34,44,-3,26,35,-22,26,-61,-53,51,-7,39,21,43,36,-20,-22,44,-58,79,37,-105,35,8, 
  /* [1][0][][] */ 55,40,28,0,46,37,3,-5,20,-18,12,23,-27,25,-2,11,28,22,13,-40,40,-29,-36,3,8,-18,41,-33,-91,-20,-32,-29,-21,23,18,-25,-11,11,-32,-19,-42,26,38,-1,-127,-5,17,78,7,39,4,0,2,-3,-90,28,-4,-41,9,-8,43,8,46,-23,79,-64,50,17,4,-18,-73,-3,56,-4,2,34,42,5,4,-19,23,7,-43,-49,-21,-11,-1,5,-34,6,31,-30,-85,-6,94,-5, 
  /* [2][0][][] */ -12,7,-68,85,-52,68,31,-32,-53,-10,24,9,7,17,-40,42,-34,78,-97,58,-60,-127,-51,23,90,-22,25,-88,79,-5,78,-1,26,-1,-40,-85,-27,-1,-38,-81,-96,-1,92,58,76,51,0,-12,-38,-2,33,104,-106,14,65,99,8,45,90,70,7,24,-2,-51,-48,-2,-58,-37,-107,67,-65,4,94,4,-31,18,47,13,-58,78,25,50,39,46,-19,-1,-73,82,0,51,-78,-1,-48,-70,-22,-94, 
  /* [3][0][][] */ 56,-73,-55,-53,-4,20,-7,52,4,-34,-13,26,-93,28,46,-127,23,-11,-7,39,107,-11,59,32,47,21,15,-71,-29,-60,-10,-46,-61,2,18,18,-91,51,-54,-84,12,-61,-58,-26,29,25,-6,15,-70,21,-39,-17,14,69,17,-40,20,13,-25,0,-41,72,16,23,50,19,-10,-26,-50,-73,-64,-84,33,-19,23,-25,12,23,46,-34,-48,27,-36,6,59,-42,41,-42,-50,-25,-86,21,36,-14,14,-24, 
  /* [4][0][][] */ 43,44,-5,-29,-32,-11,37,-2,2,-24,-63,38,19,-41,22,-85,-23,-24,15,-52,-24,-16,81,24,9,24,11,-6,33,-14,5,23,-5,43,32,-68,22,-23,-45,-2,-36,-25,-24,0,9,-36,-21,-32,-102,4,-10,-29,1,-69,-59,12,10,36,-32,-23,-14,19,33,26,12,-6,10,25,36,-5,-19,-2,49,-16,14,9,-17,47,30,16,2,83,43,38,57,-18,20,37,-27,127,19,54,14,75,-67,-4, 
  /* [5][0][][] */ 44,-59,52,10,-61,18,11,26,6,-16,-55,23,-44,-34,11,-26,-28,-29,-19,37,51,-14,17,-30,-13,25,-40,23,-12,-4,26,-18,-13,-24,-3,127,27,-3,-20,-16,74,50,3,30,21,-38,9,-9,6,95,-10,67,2,37,18,20,35,-46,28,-2,54,77,53,38,62,-38,5,-1,49,60,-3,-24,-38,14,-32,-14,-11,38,14,-33,-21,-45,-42,-15,-21,21,5,89,-35,-3,-18,-23,-28,47,46,-36, 
  /* [6][0][][] */ -127,-33,24,-9,1,19,-14,-10,30,0,-24,32,13,34,8,58,31,-13,-21,22,9,30,-18,6,11,-58,-24,15,-17,-27,-19,7,18,27,-2,-4,24,19,-25,-5,-13,5,-4,14,27,-26,-20,-6,-17,-40,-20,29,-15,38,-11,-25,23,-25,-8,18,-6,-6,-101,-20,-28,84,9,59,17,4,-27,-23,9,11,-32,-13,2,-15,25,-31,28,-14,-31,-8,-3,-16,-68,-5,-32,43,15,11,-1,3,33,-11, 
  /* [7][0][][] */ 57,-3,8,37,-55,48,-21,10,-23,-127,3,2,24,-1,7,34,20,-36,-15,47,-10,111,17,-50,16,-16,11,-60,18,-25,17,88,55,17,40,-94,-61,2,-55,31,31,19,49,8,63,-13,35,-7,-11,34,-2,10,-44,-2,-43,10,-35,-81,23,15,32,19,42,-73,-44,-13,-13,36,-3,-18,18,-27,-17,72,-6,-87,55,-48,15,-33,-22,22,-20,-20,52,-34,-53,-37,68,-11,-21,-126,28,-2,-25,23, 
  /* [8][0][][] */ 7,-22,59,26,37,-28,-31,9,4,54,7,-28,-71,-23,-90,-114,-23,20,-77,13,17,-66,22,37,-28,13,-27,34,36,-23,32,21,-38,21,-15,111,-47,-10,3,-15,-17,123,35,-52,6,15,-12,-81,124,7,23,-87,-3,60,-12,15,65,51,-9,127,18,-5,-15,0,26,20,-80,15,66,-25,-47,-102,-23,-29,-70,66,-17,19,-4,-75,89,37,-105,-16,9,-28,-52,38,50,-8,19,-70,-89,18,27,-36, 
  /* [9][0][][] */ 25,-20,-32,-50,22,8,-30,22,21,18,0,-8,19,13,33,21,-33,67,-5,49,-37,9,-17,-36,23,-67,29,12,-13,8,-9,-12,-48,-44,20,1,9,2,0,-47,45,-42,-59,-9,-1,10,7,16,-38,60,-32,39,26,-2,-127,74,13,57,59,58,-53,-19,7,4,33,3,-9,34,-13,39,23,-72,-23,-23,-30,-59,30,36,18,-18,32,-61,6,-18,-4,32,-30,-115,-33,55,24,-49,29,-18,6,-52, 
  /* [10][0][][] */ -42,-47,-34,3,92,-3,6,37,-25,-97,-29,11,35,-43,-73,-65,32,16,6,39,61,-13,80,-62,-42,54,-103,6,61,16,14,-14,72,-38,59,-39,-10,-16,-62,22,30,36,30,-42,16,-59,50,43,127,75,-25,-14,-55,19,14,-40,-58,14,60,49,64,31,-3,62,-42,14,-27,69,-26,-44,8,-5,16,2,-36,-38,-85,-1,-21,121,-98,-18,112,-10,46,59,-49,-62,7,63,19,-22,21,-19,22,-86, 
  /* [11][0][][] */ 5,111,64,-105,-64,9,-13,-32,-9,-76,0,5,-77,-14,-9,54,41,-72,-14,24,84,-48,-27,40,9,7,-37,-49,-73,-48,-56,-108,-15,-123,33,1,-3,17,-14,4,-33,-60,0,-19,45,83,7,-19,57,23,-6,12,-53,-12,-60,18,85,-62,-35,-14,-31,-21,18,-5,14,-5,-30,-20,73,-14,-24,-61,38,-3,-42,6,-25,19,33,6,-13,37,43,-21,-1,-6,-15,-28,-64,-127,42,-17,60,43,-75,-64, 
  /* [12][0][][] */ 25,93,57,15,-56,26,7,29,11,10,27,22,40,26,-44,-29,-7,28,6,18,-66,13,-2,14,-53,53,-41,-59,5,-1,12,-24,2,127,-26,51,56,-25,38,-5,-54,-60,-16,64,21,34,9,-29,49,1,-29,-13,-24,-72,9,-11,-11,-3,-11,-5,-27,23,30,11,-15,-54,-13,-5,3,-23,-1,16,2,6,-6,-38,15,16,21,-37,19,-32,-8,-23,-6,17,16,-10,-14,36,-1,-22,30,-15,-5,-13, 
  /* [13][0][][] */ -3,-28,-127,4,33,-3,5,5,10,-48,20,-20,7,56,-37,-38,-4,-27,-13,51,-66,53,-11,75,14,20,-12,87,-31,-54,-23,-26,-11,52,-28,-51,21,21,12,-46,38,-23,72,-28,5,23,26,-74,31,-3,-19,6,-53,45,-64,-29,29,20,-1,-4,-7,10,-4,12,8,35,-61,-18,6,65,31,7,-28,8,-6,-12,36,9,-39,-28,-30,4,-31,-13,34,1,9,-40,-105,45,-20,-54,-27,-25,16,8, 
  /* [14][0][][] */ 95,-55,110,-58,9,42,23,-35,-29,29,24,-14,30,-31,-38,61,-20,-24,30,41,54,49,34,71,20,-7,24,54,127,-33,77,55,27,-11,-23,-49,110,8,67,55,-76,-17,28,-2,-28,57,18,-43,41,86,-16,39,-3,78,25,28,-18,39,27,-43,-121,-42,52,3,95,13,24,4,-56,-17,-72,22,4,65,-34,-1,17,-28,-19,56,29,35,24,15,15,6,31,38,-1,-14,32,4,-38,32,-67,38, 
  /* [15][0][][] */ 37,118,19,27,60,61,17,33,16,49,-35,-13,58,7,34,-57,22,44,-17,-52,5,1,2,49,-4,3,-13,-25,-8,-29,-14,38,10,-53,-100,-77,-42,8,15,5,-48,3,31,7,50,-26,-4,29,-26,39,-23,94,31,2,43,-90,-11,-29,24,20,63,16,7,72,96,13,70,54,-9,58,34,-127,-62,15,8,30,-40,45,-28,-37,16,32,-92,-6,2,-62,9,-64,-8,-62,-1,34,-1,91,106,67, 
  /* [16][0][][] */ -21,-67,15,50,6,51,15,-10,41,-2,21,-2,5,13,-16,22,-5,-1,41,-50,35,24,18,-6,-38,42,-83,-56,-11,11,11,2,8,-11,34,-18,-5,-11,-5,24,-49,-6,-8,-18,-32,-21,-30,1,66,4,35,27,-13,14,-46,52,-27,-8,-21,-13,25,12,-19,30,-14,17,12,-36,11,6,2,71,6,-4,-5,87,1,21,-14,28,-3,30,37,-23,-13,12,24,-5,-6,-8,23,-127,78,2,26,46, 
  /* [17][0][][] */ -52,-34,121,127,57,-29,-10,-6,-49,-23,3,11,26,-2,17,-49,10,-15,-18,8,-92,18,-40,11,-15,35,-53,-34,44,9,-10,23,24,29,15,35,-35,-15,43,-55,-30,-2,-21,-11,53,20,-3,45,23,-24,28,-10,4,3,-68,1,74,-58,1,-45,-53,-65,-42,20,16,42,79,22,-1,30,13,-4,35,-24,15,59,-94,37,4,-54,-15,5,-54,-26,4,27,26,62,-88,-15,-46,14,58,42,38,-14, 
  /* [18][0][][] */ -25,-7,-5,32,-58,6,-2,-9,-36,-91,4,-3,-13,12,15,53,-127,-44,2,5,47,-14,-39,-21,4,-22,12,40,-48,50,2,72,-4,-2,36,-18,43,-3,3,-8,-32,24,-31,-30,-27,-13,34,1,13,17,14,2,-50,0,3,-9,43,37,32,-1,-17,44,-25,-34,-45,3,29,9,24,30,30,76,-34,3,-18,43,-20,54,-13,-30,-26,49,-63,23,-11,14,60,-98,56,23,0,21,-3,-14,-107,50, 
  /* [19][0][][] */ -69,119,-11,-47,16,8,-12,47,-30,50,56,54,-39,38,14,48,-44,-11,-12,-44,49,18,-63,-16,31,-57,-18,100,87,30,-27,43,-47,-60,52,3,51,-62,7,-22,-50,23,24,29,0,0,-22,110,-17,-45,-65,-60,7,-33,-19,0,-90,-27,-50,-58,39,16,-84,-22,-41,59,84,-59,-4,-13,7,-5,8,7,-5,-47,-13,6,-15,-10,-22,33,32,-13,-20,15,35,13,20,-74,-10,-27,14,-87,81,-127, 
  /* [20][0][][] */ 1,-123,126,24,77,-52,9,-13,68,-51,45,15,-47,75,-76,84,-108,37,18,-28,-24,-29,6,13,40,-11,19,-37,68,76,1,13,-98,-40,-9,20,2,-23,-114,-57,-90,-59,-102,33,31,-33,16,-15,25,-47,-76,-87,-79,-70,127,44,-75,82,-11,45,11,-5,-2,-35,89,-9,-31,-118,13,-46,-11,64,-64,-15,-30,-41,-11,20,21,-67,-3,-32,-53,-65,-7,-32,7,-40,-61,94,-6,25,-69,-15,0,52, 
  /* [21][0][][] */ -38,-19,-15,4,-26,52,-39,22,40,110,72,13,-91,-50,-3,-31,-19,-22,-10,-9,-41,71,112,31,-47,14,-1,-95,-39,-61,-47,-24,-43,-36,39,-1,38,54,-80,62,-5,2,29,50,-127,48,-7,1,89,5,-53,-90,-27,19,3,-27,18,-51,-30,-38,-8,-23,-39,-74,-10,4,-10,-19,24,4,-41,31,-86,-13,25,-19,-4,-3,111,-36,27,38,-10,-4,27,-68,-2,25,36,2,-4,27,59,-63,-16,11, 
  /* [22][0][][] */ -22,-48,-121,8,-47,85,-2,25,-29,17,16,61,-23,-27,-23,56,0,-126,20,-27,51,3,-51,-35,-22,-15,-36,-15,117,-7,22,42,16,-48,1,39,-8,-87,70,53,29,7,-20,-61,38,18,40,-2,104,-40,-17,-65,61,-11,-28,-14,36,15,29,45,-36,-12,-5,-24,127,8,1,-3,41,-29,23,36,21,14,-48,50,-4,-47,-8,-69,68,-83,-73,8,-18,-5,23,20,-42,21,38,5,-21,66,-100,6, 
  /* [23][0][][] */ -25,8,-28,56,-10,-63,14,-21,1,65,-5,-90,-79,28,-23,88,-28,11,-83,-91,4,118,34,-2,7,-49,90,-6,-23,-88,0,61,-61,49,115,-29,-62,-48,-3,-3,-31,3,41,127,27,-25,-21,-115,3,3,-21,30,55,40,-59,29,14,19,-44,-24,-37,37,32,-15,59,-107,-14,-36,23,-38,-7,17,-62,-26,30,-94,-118,50,-19,55,110,103,126,-43,39,-64,-101,17,-119,-2,109,-2,98,14,-15,-28, 
  /* [24][0][][] */ 67,76,-47,61,-49,-25,-24,-46,-15,2,20,-37,23,19,26,54,-15,-18,-17,69,-13,77,-40,-54,26,-12,18,-21,12,-3,-31,-2,1,63,51,79,-11,54,-25,-54,-15,38,-24,-127,-29,-2,22,14,16,51,-6,54,-29,20,68,47,22,-56,-47,42,25,31,8,-43,117,24,-43,37,14,12,59,12,-70,2,12,21,-42,3,-20,21,8,-47,45,-52,-38,7,-9,-29,-12,-60,-54,-37,18,-28,9,7, 
  /* [25][0][][] */ -40,87,-65,41,-10,53,-26,-67,38,-51,-7,18,-18,-15,30,5,-31,72,75,23,-22,18,82,-31,-32,58,-25,89,91,67,-19,-32,-54,18,63,-4,-19,90,-34,-40,8,106,-124,28,-33,6,1,11,57,-32,-7,46,-31,-17,-22,27,27,-41,-35,14,-70,-42,1,3,127,-28,29,49,-15,-25,-3,-36,-121,0,-7,-42,86,10,83,62,-67,-22,83,-29,-23,28,33,69,4,-31,-22,-38,-20,16,-40,37, 
  /* [26][0][][] */ 4,8,-19,59,-24,-45,53,-42,-9,4,20,91,30,-127,-47,18,-9,-28,-11,-21,-47,-34,-35,34,-40,48,-67,56,-106,11,13,-6,3,49,-28,-19,-78,-4,-9,23,10,-86,18,13,25,20,-23,12,23,-15,-14,54,-31,-62,71,-5,-8,-20,-16,-76,-26,-20,0,19,24,39,94,-27,-20,-16,17,-9,22,-51,55,-49,-69,15,-19,21,24,38,-12,-9,16,-41,-12,-28,16,21,-5,72,-52,11,-19,-25, 
  /* [27][0][][] */ -11,35,-5,-92,13,63,4,37,60,-11,-73,-44,58,-44,25,-24,-40,55,37,9,-12,-51,-34,-34,-27,4,-9,-65,-37,-1,1,15,9,12,21,15,19,-36,38,18,-16,90,66,-12,-7,-29,-3,-12,-83,12,-23,-14,-6,4,53,-100,97,45,3,-11,43,71,-72,36,-8,106,45,-11,-15,66,21,23,-3,18,6,-117,30,127,-7,57,5,-22,34,11,40,27,55,-2,-52,-3,27,34,-42,45,-20,-28, 
  /* [28][0][][] */ 18,-18,20,26,-48,-27,-11,14,-15,-4,27,36,10,44,-13,75,19,5,-26,42,-58,-61,-77,-3,-14,-4,-5,-52,46,-17,10,-25,1,41,18,3,-25,54,14,-46,71,2,61,48,-69,54,-2,-46,28,6,0,67,127,-24,11,-32,60,-32,-50,-37,16,17,0,-22,31,7,32,-13,56,48,25,-25,-7,-44,40,18,-35,24,-11,12,29,10,13,-10,-56,23,0,-48,31,-31,42,11,-34,6,22,-31, 
  /* [29][0][][] */ 17,-51,39,8,38,21,-61,23,16,45,19,0,-23,66,29,-99,-9,-84,-42,4,-27,-48,60,-115,-18,10,36,31,-95,49,46,7,-13,37,79,10,49,-10,-33,-37,14,26,16,-9,13,-26,27,-15,8,-2,-96,-30,69,66,55,25,52,-8,35,23,-6,-4,21,-10,-30,-20,-39,14,11,26,12,-59,-41,-22,-9,127,-36,-15,21,79,1,-84,98,6,6,-12,22,35,20,71,-13,15,119,-56,13,22, 
  /* [30][0][][] */ -35,101,4,67,5,-61,-4,4,-54,56,-17,8,-61,20,-34,-98,62,-24,-30,-92,31,-67,127,-37,-23,2,-44,-41,-11,2,30,-7,-19,-49,31,-29,-12,-7,-35,-19,45,-41,-2,44,39,-64,-9,-13,0,-35,-29,29,23,9,-4,31,-22,44,4,-3,-37,-7,-22,-1,63,19,-38,8,-5,-52,47,44,-49,-26,39,-66,-59,-57,44,-65,22,-31,-19,45,22,-5,-35,-78,-36,51,-9,-51,-51,2,-44,-31, 
  /* [31][0][][] */ 9,66,16,34,13,-55,36,-7,50,-43,-5,4,-45,2,-30,29,5,29,-13,22,53,35,-47,29,30,2,-24,-72,6,18,-4,-8,-63,-13,-7,-26,34,-2,22,12,127,10,51,2,-26,16,2,2,-1,31,-9,7,-70,51,5,-14,21,4,-18,10,-23,50,-2,-8,-23,-6,18,-82,-47,13,-33,-21,68,20,-42,-11,-15,50,-16,-31,-34,47,-34,-14,-19,-38,9,1,4,91,7,-23,1,-25,-1,-1, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant10_scale = { 32, { 0.007597943302243948, 0.0093326261267066002, 0.0069409692659974098, 0.0072766328230500221, 0.010422798804938793, 0.0094117345288395882, 0.013677395880222321, 0.0087376488372683525, 0.0079046916216611862, 0.0099050160497426987, 0.0078941779211163521, 0.0090809352695941925, 0.010620651766657829, 0.0091165145859122276, 0.0081330901011824608, 0.0078795691952109337, 0.0099285943433642387, 0.0092865088954567909, 0.0088844988495111465, 0.0068682446144521236, 0.0061297779902815819, 0.007722189649939537, 0.0082538686692714691, 0.0068130539730191231, 0.0084967846050858498, 0.0078041795641183853, 0.0082578212022781372, 0.0078051881864666939, 0.0088040465489029884, 0.0062351985834538937, 0.0085651576519012451, 0.0098002413287758827, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data11[96] = { -417, 1849, 2024, -4189, -4984, 123, -5711, -1689, -95, -2345, 13874, -8870, -10923, 21608, 2094, 208, 25593, 20076, -8561, -1778, -4991, -59, 25176, 15618, 6438, 847, -6161, 12263, 2726, 10102, 13718, 12367, -739, -4361, 22781, 39776, 21230, -6188, -731, -10274, 10637, -4141, -444, -8791, -1924, -239, 13676, -525, 28614, -8554, 17157, 17387, 1817, -7899, -8, -6280, -1133, 3108, 22951, -3353, 30656, -829, -465, -15377, 32486, 2632, -5808, -5551, -4108, 16316, -171, -3690, 39987, 7209, 19840, -7409, -3593, -10941, -3545, -2789, 20952, -5933, -1842, 10004, -9926, 17565, 2314, -6212, 11605, 36870, 13004, 41335, 13364, 12668, 13011, 42160, };
const TfArray<1, int> tensor_dimension11 = { 1, { 96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.00025900756008923054, 0.0014889510348439217, 0.0014723899075761437, 0.00010265990567859262, 8.9859539002645761e-05, 0.00045619881711900234, 8.6625434050802141e-05, 0.00010149024456040934, 7.8602803114335984e-05, 9.2941714683547616e-05, 0.00010017595923272893, 6.8986009864602238e-05, 6.2063671066425741e-05, 9.6332238172180951e-05, 0.00036360567901283503, 0.00024325524282176048, 6.2313185480888933e-05, 0.00014899902453180403, 7.2954731876961887e-05, 9.6513329481240362e-05, 8.6051848484203219e-05, 0.00038827027310617268, 9.6887750260066241e-05, 0.00011727478704415262, 9.2857233539689332e-05, 0.00011046844883821905, 7.0928945206105709e-05, 0.00029750203248113394, 0.0010676505044102669, 0.00014056471991352737, 9.8565375083126128e-05, 0.00014434067998081446, 6.8642162659671158e-05, 9.7632211691234261e-05, 8.9756016677711159e-05, 6.6179418354295194e-05, 0.00021254362945910543, 0.00017252458201255649, 9.4628172519151121e-05, 0.00012947581126354635, 0.0003547413507476449, 0.00016515054448973387, 7.625380385434255e-05, 0.00012804802099708468, 7.83090217737481e-05, 0.00025755492970347404, 7.8520410170312971e-05, 5.8416586398379877e-05, 7.1864524215925485e-05, 6.8349028879310936e-05, 0.00010776161798276007, 0.00019298633560538292, 8.5372019384521991e-05, 7.3789007728919387e-05, 0.0010107794078066945, 0.00010397422011010349, 0.00010500050120754167, 0.00026812206488102674, 7.7151285950094461e-05, 8.3454557170625776e-05, 5.5288408475462347e-05, 6.2995444750413299e-05, 0.0004787598445545882, 0.00026858705678023398, 8.9091357949655503e-05, 0.00036796394851990044, 0.00023707255604676902, 7.9559620644431561e-05, 9.5004754257388413e-05, 0.00010230430052615702, 6.446136103477329e-05, 0.00010710561036830768, 5.2031144150532782e-05, 0.00021280153305269778, 9.5314186182804406e-05, 0.00014679080049972981, 7.0188092649914324e-05, 0.00012220616918057203, 7.8205870522651821e-05, 0.000172456304426305, 6.745853170286864e-05, 5.4832533351145685e-05, 0.00025563751114532351, 0.00010557731002336368, 0.00021598665625788271, 9.5169634732883424e-05, 0.0001503947569290176, 0.00028471622499637306, 0.00025070953415706754, 6.3897008658386767e-05, 9.3336951977107674e-05, 4.5724824303761125e-05, 0.00030598568264394999, 0.00010706012835726142, 0.0001178234742837958, 5.3673757065553218e-05, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data12[1*3*3*96] = { 
  /* [0][0][][] */ 5,-4,-2,94,17,-10,-48,18,-13,-13,16,38,19,2,43,33,-11,-67,31,-59,35,32,-1,-90,20,-19,-10,-9,-23,-38,-28,32,-15,-6,-48,-55,-2,-14,-3,-38,-9,33,32,20,3,17,-50,19,19,-3,-47,-36,36,-39,8,8,-3,46,-9,127,-35,-30,1,19,-7,-15,9,-1,7,-32,-48,11,-17,-5,-13,24,13,24,-103,23,45,7,35,3,12,-98,56,16,-110,12,-44,-14,-61,62,19,-40, 39,3,-3,127,116,-13,105,-21,-44,-22,67,78,31,7,127,127,-84,-58,15,-43,127,37,65,-25,100,-12,86,5,-38,-1,-80,-9,-9,-32,1,-81,-38,8,-42,-53,-1,60,119,51,100,-7,13,119,89,11,-38,-42,127,-109,0,18,-4,119,-36,98,-60,-79,19,-19,12,-34,-50,-32,63,-47,-61,70,-33,-11,-22,54,7,127,-31,40,29,5,44,92,8,-87,127,-5,-2,21,-51,-69,-3,85,110,-32, 8,-2,-3,98,18,-14,-23,-6,-26,-17,-16,29,16,6,39,18,-4,-75,33,-19,34,26,21,-70,32,-15,-5,-7,-23,-54,-120,10,-18,-4,-77,-46,1,-1,-4,-39,-6,10,37,18,2,0,-68,10,-4,5,-5,-32,34,-44,0,8,0,40,-4,79,-34,-38,-4,-8,-4,-17,4,-2,9,-30,-43,17,-18,-4,-18,28,10,22,8,9,45,13,-92,55,2,-76,45,17,-94,17,-32,-12,-68,82,17,-40, 
  /* [0][1][][] */ 52,-73,-113,27,53,47,-52,65,25,26,-25,30,49,-22,-34,-18,-9,-77,50,-53,68,83,1,-127,36,-25,49,-90,-70,-53,-46,-123,16,14,-46,-32,-70,98,15,70,-86,68,52,99,41,-2,-1,30,-90,44,-127,-79,20,121,107,55,16,-68,-101,-17,-57,19,51,89,-58,-71,52,43,39,-44,57,36,-44,-127,-56,98,32,111,93,-120,-23,69,102,-48,29,-127,-34,107,-67,-3,-22,-26,-58,-26,-6,-90, 127,-127,-127,35,127,127,-11,127,127,127,-127,127,127,-127,-53,-116,-127,-127,127,87,76,127,-127,-73,-127,-66,127,-127,-127,12,-116,-103,127,127,-52,-127,-127,127,127,127,-127,127,127,127,127,67,-111,127,-123,127,-112,-127,103,127,127,127,127,-127,-127,-101,-127,127,127,127,-127,-127,127,127,127,-127,127,127,-127,-87,-77,127,127,36,127,127,-127,127,127,-127,127,-60,-80,92,-127,-127,-127,-127,-127,-127,-127,-127, 44,-58,-111,26,47,39,127,26,19,19,17,28,43,-22,-36,2,-5,-100,41,37,60,84,-8,-125,19,-28,44,-77,-66,-53,-127,-127,22,10,-127,-33,-62,81,17,60,-68,-47,52,85,40,30,-42,25,-72,39,-90,-69,12,119,101,56,3,-43,-96,25,-68,17,53,99,-54,-78,58,39,40,-44,51,35,-59,-108,-81,86,31,112,83,-18,-21,76,52,-15,25,-97,-23,127,-64,0,-6,-23,-48,-39,-4,-81, 
  /* [0][2][][] */ 10,4,5,-34,-36,4,-68,-37,0,18,-62,30,11,5,-17,-2,14,33,37,-99,-17,12,-59,-48,-11,37,-26,-8,-8,-114,12,23,30,1,-74,-3,-6,28,-2,41,-20,5,-24,-16,-14,-6,-7,6,-53,7,-22,-2,-22,46,-13,10,8,-22,-9,63,-37,18,8,13,-20,-26,-29,15,-11,-19,22,-16,-24,-12,-98,11,16,-34,20,-89,-32,41,-28,-35,6,-55,-29,21,-20,-24,34,15,-26,-22,-20,-50, 42,-5,-2,-12,-76,19,-78,-34,47,99,-103,-15,29,-101,-27,-6,45,66,56,127,-29,33,-107,20,-46,127,-33,-13,0,-71,-2,6,73,69,4,20,12,-51,52,9,-10,22,-62,-14,-19,8,-37,-25,-127,42,-8,-9,-39,90,1,12,47,-14,-6,34,-85,62,22,12,-78,-15,-30,77,-32,-7,83,-48,-44,-5,-127,7,62,-87,78,8,-77,75,-31,-89,-38,-26,-32,25,-8,-111,79,8,11,-48,-86,-95, 12,2,11,-36,-30,-3,91,-42,-12,13,-40,3,11,23,-16,-7,12,30,38,50,-8,8,-57,49,0,33,-36,-8,3,-127,-82,22,19,4,-115,-6,-3,-18,-3,35,-6,-7,-19,-7,-19,-127,-127,-1,-53,8,-21,-5,-16,55,-17,12,1,-11,8,75,-28,19,8,15,-11,-27,-24,12,-12,-12,21,-20,-30,-15,-89,13,9,-45,4,4,-20,42,-16,-44,4,-84,-31,16,-36,-16,33,17,-13,-51,-14,-60, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.019399991258978844, 0.111524298787117, 0.11028385162353516, 0.0076893558725714684, 0.0067305923439562321, 0.034169863909482956, 0.0064883534796535969, 0.0076017463579773903, 0.0058874483220279217, 0.0069614509120583534, 0.0075033050961792469, 0.0051671387627720833, 0.0046486468054354191, 0.007215405348688364, 0.027234520763158798, 0.018220122903585434, 0.0046673356555402279, 0.011160213500261307, 0.0054644010961055756, 0.0072289691306650639, 0.0064453915692865849, 0.029081929475069046, 0.0072570140473544598, 0.0087840287014842033, 0.0069551230408251286, 0.0082742255181074142, 0.0053126667626202106, 0.022283274680376053, 0.079968363046646118, 0.010528473183512688, 0.0073826699517667294, 0.010811298154294491, 0.0051413839682936668, 0.0073127751238644123, 0.0067228381521999836, 0.0049569215625524521, 0.01591978408396244, 0.012922307476401329, 0.0070877689868211746, 0.0096979010850191116, 0.026570571586489677, 0.012369982898235321, 0.0057115056551992893, 0.0095909573137760162, 0.0058654439635574818, 0.019291186705231667, 0.0058812773786485195, 0.0043754754588007927, 0.0053827427327632904, 0.0051194280385971069, 0.008071480318903923, 0.014454918913543224, 0.0063944710418581963, 0.0055268891155719757, 0.075708642601966858, 0.0077877994626760483, 0.0078646689653396606, 0.020082678645849228, 0.0057787280529737473, 0.0062508508563041687, 0.0041411709971725941, 0.0047184377908706665, 0.035859711468219757, 0.020117506384849548, 0.0066730543039739132, 0.027560960501432419, 0.017757032066583633, 0.005959115456789732, 0.007115975022315979, 0.007662720512598753, 0.0048282365314662457, 0.008022344671189785, 0.0038971980102360249, 0.015939101576805115, 0.0071391519159078598, 0.010994815267622471, 0.0052571762353181839, 0.0091533949598670006, 0.0058577177114784718, 0.012917193584144115, 0.0050527285784482956, 0.0041070254519581795, 0.019147569313645363, 0.0079078730195760727, 0.016177671030163765, 0.0071283248253166676, 0.011264755390584469, 0.021325601264834404, 0.01877845823764801, 0.0047859661281108856, 0.0069910548627376556, 0.0034248465672135353, 0.022918710485100746, 0.0080189378932118416, 0.0088251261040568352, 0.0040202317759394646, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data13[96] = { 1203, -10731, -38199, 16817, 4495, -11314, 1635, 12462, 1929, 7281, 6112, 8298, 2213, 10665, -15937, 28708, 4148, 20528, 2585, 4617, 1944, 223, 11378, -7620, 8311, 13257, 2621, 9098, -2575, -4934, -1962, -3469, -670, 4058, 5190, 7106, 29980, -1871, 3678, 8175, 5373, -3558, 1780, 8744, 4644, -4993, 3685, 2883, -243, 3442, 3408, 11583, 943, 2601, -9701, 3470, -298, 2919, 7221, 6214, 4660, 655, -2196, 14375, 8487, 313, 15815, 5257, 4779, 9545, -671, 8081, 3149, -3829, 3301, 9196, 1491, 3740, -1665, -2394, 1312, 2650, -6948, 5160, 15643, -3015, 8480, -3573, 998, 7630, 7606, 2302, 9215, 5688, 13014, 7066, };
const TfArray<1, int> tensor_dimension13 = { 1, { 96 } };
const TfArray<96, float> quant13_scale = { 96, { 4.9594018491916358e-05, 8.4903304014005698e-06, 6.1347450355242472e-06, 3.9407259464496747e-05, 0.00011033665214199573, 2.7660957130137831e-05, 8.1339618191123009e-05, 6.885162292746827e-05, 0.00019578327191993594, 9.6619442047085613e-05, 7.299132994376123e-05, 9.1522982984315604e-05, 0.0001742577733239159, 6.9294132117647678e-05, 3.0134970074868761e-05, 2.8983013180550188e-05, 0.00014367351832333952, 3.6678909964393824e-05, 0.0001185667933896184, 6.8503846705425531e-05, 0.00014270936662796885, 2.3182745280792005e-05, 6.0532074712682515e-05, 4.9922549806069583e-05, 9.8263422842137516e-05, 6.3001316448207945e-05, 0.00011412536696298048, 3.222952364012599e-05, 1.1635151167865843e-05, 6.0588205087697133e-05, 8.5357009083963931e-05, 4.5405369746731594e-05, 0.00015660795907024294, 0.00017254892736673355, 6.5749838540796191e-05, 0.00010015390580520034, 3.3562511816853657e-05, 4.7436253225896508e-05, 0.00013910984853282571, 6.791104533476755e-05, 3.1676310754846781e-05, 5.6265747844008729e-05, 0.00010780375305330381, 4.782748146681115e-05, 0.00011083906429121271, 6.0632875829469413e-05, 8.574581443099305e-05, 0.00012335271458141506, 6.7151479015592486e-05, 0.00016040643095038831, 6.106554064899683e-05, 3.8869082345627248e-05, 0.00011397801426937804, 8.4990919276606292e-05, 1.323308333667228e-05, 0.00011123124568257481, 0.00016901975322980434, 4.5008571760263294e-05, 5.9384732594480738e-05, 6.1864499002695084e-05, 0.00010820464376593009, 0.00022642873227596283, 2.9339682441786863e-05, 3.2176503736991435e-05, 6.964949716348201e-05, 2.8244743589311838e-05, 4.1364844946656376e-05, 9.2376743850763887e-05, 0.00010954854224110022, 7.0610243710689247e-05, 0.0001539869699627161, 7.5062664109282196e-05, 0.00012794586655218154, 6.3864019466564059e-05, 6.1256941989995539e-05, 4.0191676816903055e-05, 0.00013960455544292927, 8.7892309238668531e-05, 0.00010830030805664137, 7.2205286414828151e-05, 0.00013913746806792915, 9.9760392913594842e-05, 5.1380429795244709e-05, 7.0966823841445148e-05, 5.3406150982482359e-05, 8.7828288087621331e-05, 7.0678048359695822e-05, 4.2896263039438054e-05, 5.1441689720377326e-05, 9.5561226771678776e-05, 0.00010309497156413272, 0.00013352948008105159, 4.7931258450262249e-05, 4.9671998567646369e-05, 6.9762470957357436e-05, 7.6956988777965307e-05, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data14[96*1*1*16] = { 
  /* [0][0][][] */ -54,37,2,-21,16,-14,50,-97,25,20,-35,-65,-16,127,-2,24, 
  /* [1][0][][] */ -26,77,33,-25,59,90,-43,-14,127,52,32,-56,-7,-59,-88,-68, 
  /* [2][0][][] */ 89,-48,-65,-30,-121,-127,-5,-91,-84,-84,-29,40,-14,100,72,93, 
  /* [3][0][][] */ -31,-127,17,-28,3,-18,-18,-52,-58,-71,84,-64,-39,11,12,82, 
  /* [4][0][][] */ -47,-8,127,-29,8,19,51,-15,8,-30,27,40,49,11,52,43, 
  /* [5][0][][] */ 30,28,-11,93,-47,26,97,25,127,91,46,-120,7,-97,-76,28, 
  /* [6][0][][] */ -127,-37,-89,90,67,94,-54,55,53,-83,-13,43,20,69,34,3, 
  /* [7][0][][] */ 127,67,12,126,69,-59,-12,-110,-51,38,-62,-8,81,-59,38,97, 
  /* [8][0][][] */ 20,-9,-40,29,46,-58,28,27,13,-32,-45,-13,-40,-2,-127,26, 
  /* [9][0][][] */ -4,-11,-39,-42,24,-23,59,-19,-39,-13,43,-127,-115,1,-18,60, 
  /* [10][0][][] */ -58,20,-127,3,68,86,76,48,22,-106,-62,24,29,32,-4,21, 
  /* [11][0][][] */ 72,-71,-2,99,4,3,-26,-21,109,51,-39,-81,-127,-54,-4,63, 
  /* [12][0][][] */ 14,-65,21,48,-18,-56,-28,9,41,127,7,68,-86,-78,-125,41, 
  /* [13][0][][] */ -115,-108,-105,-56,57,-25,39,87,-73,127,-22,-90,23,15,17,30, 
  /* [14][0][][] */ 117,-127,-30,-87,-8,-120,-27,67,-71,63,-44,75,-76,-54,56,2, 
  /* [15][0][][] */ 127,-70,40,-55,-84,42,-70,-5,42,-95,-7,-40,-43,11,38,18, 
  /* [16][0][][] */ 2,16,25,0,8,-15,-99,-8,4,4,98,-59,6,-11,127,-36, 
  /* [17][0][][] */ 101,62,10,127,21,17,-40,31,116,34,34,-5,-81,93,-15,-61, 
  /* [18][0][][] */ 44,-9,-27,-81,-61,6,-57,53,24,-63,2,-43,25,14,-127,105, 
  /* [19][0][][] */ -127,-8,-58,-24,-22,23,47,3,60,-44,-54,62,-47,-126,33,38, 
  /* [20][0][][] */ 42,20,90,32,-46,81,14,-19,-30,34,29,36,-127,-5,10,78, 
  /* [21][0][][] */ 43,7,-65,5,127,-47,-54,31,-41,65,-39,94,2,35,36,-108, 
  /* [22][0][][] */ -54,95,42,20,7,-113,99,22,-76,96,35,127,41,48,-34,-21, 
  /* [23][0][][] */ 127,-21,121,44,-13,-11,-26,-81,-104,22,-69,-71,48,-17,-46,-91, 
  /* [24][0][][] */ 3,-79,57,-20,-9,40,87,127,-53,-38,116,-41,-29,-96,-24,60, 
  /* [25][0][][] */ 127,-41,-33,-36,-11,85,33,77,-91,-73,12,59,-53,-115,-104,-38, 
  /* [26][0][][] */ 73,10,76,35,-34,-25,-44,127,-2,-39,62,118,91,-57,57,-33, 
  /* [27][0][][] */ 127,-47,-95,-13,77,96,25,-75,-8,-20,72,16,122,2,-77,-21, 
  /* [28][0][][] */ -11,-32,46,22,54,7,62,46,26,-30,112,-14,-7,52,-91,-127, 
  /* [29][0][][] */ -45,4,-127,14,-5,37,-15,7,50,-52,41,68,-17,18,92,72, 
  /* [30][0][][] */ 69,4,49,7,-83,0,-44,-127,7,-88,4,16,76,37,-6,-54, 
  /* [31][0][][] */ -24,-7,-97,-22,46,-5,37,2,111,-122,-23,127,-92,-8,62,87, 
  /* [32][0][][] */ -15,52,-16,-52,71,95,-47,7,-127,-21,-11,27,3,-7,57,20, 
  /* [33][0][][] */ 14,17,40,16,-13,90,35,-15,-56,58,-8,39,-127,-13,-39,75, 
  /* [34][0][][] */ -47,34,-127,1,-18,-19,98,27,78,-48,88,91,-31,-35,11,66, 
  /* [35][0][][] */ -7,-50,53,-69,-101,66,39,-22,127,13,24,-5,46,29,8,-64, 
  /* [36][0][][] */ -30,-13,-7,-47,-46,-27,-107,27,-34,119,95,37,42,27,-127,24, 
  /* [37][0][][] */ -120,-53,-92,-44,-32,86,-12,9,40,-127,-65,13,-70,-29,39,64, 
  /* [38][0][][] */ -45,33,103,-23,9,-46,114,40,-32,-15,53,-18,-3,-30,-21,127, 
  /* [39][0][][] */ -74,-99,-98,-56,72,-73,12,28,-127,-42,-18,-36,-4,-60,-65,5, 
  /* [40][0][][] */ 40,93,-48,-22,-60,87,47,-44,-11,38,103,-14,-2,-26,34,-127, 
  /* [41][0][][] */ -106,-44,24,109,-81,-18,-40,35,-102,-71,-127,-33,16,5,-4,-44, 
  /* [42][0][][] */ 18,21,26,49,-44,34,-15,-2,81,-13,-51,22,127,121,-7,-6, 
  /* [43][0][][] */ 4,-125,60,54,-78,24,-51,-33,32,-127,85,-69,-16,-127,22,57, 
  /* [44][0][][] */ 37,35,94,17,17,-127,-8,35,29,-33,119,-48,-26,-7,-42,92, 
  /* [45][0][][] */ -127,7,-94,-4,17,-2,35,36,104,2,36,109,-43,-20,56,88, 
  /* [46][0][][] */ -79,-36,-107,-110,75,4,-106,-27,102,61,14,-14,-127,78,20,27, 
  /* [47][0][][] */ 49,-113,53,6,83,127,28,27,41,67,31,14,11,62,100,38, 
  /* [48][0][][] */ -82,111,-57,35,59,96,51,-100,-41,-96,-127,-91,-8,35,-77,19, 
  /* [49][0][][] */ 45,-49,-61,-25,119,-26,-127,-37,3,21,17,10,-106,-118,29,-65, 
  /* [50][0][][] */ 77,-31,78,-14,-93,-67,67,-22,32,59,-109,-60,-56,-51,50,-127, 
  /* [51][0][][] */ -118,127,1,125,93,-5,97,-46,-62,26,-38,10,86,-81,8,-31, 
  /* [52][0][][] */ 41,-20,81,18,36,34,-116,-47,127,8,-18,59,14,-44,-37,15, 
  /* [53][0][][] */ -49,-42,127,-29,-22,86,95,-8,-51,-56,50,-1,-30,13,21,104, 
  /* [54][0][][] */ 20,5,27,-15,-73,-19,14,115,-9,-127,6,-35,-92,36,78,-45, 
  /* [55][0][][] */ -15,-87,-3,-30,127,-47,14,-17,-26,-20,50,-86,-90,57,4,43, 
  /* [56][0][][] */ -30,-81,50,-54,11,105,127,-10,2,12,-43,54,58,-5,-49,77, 
  /* [57][0][][] */ 33,127,-7,-4,46,90,-43,-8,19,-18,66,-10,65,-31,5,17, 
  /* [58][0][][] */ 10,51,60,-119,-72,-15,-125,-109,-42,46,-127,-46,-76,14,-92,-79, 
  /* [59][0][][] */ 53,-83,127,-23,3,-43,-56,-4,-48,-54,27,-24,5,18,-28,-62, 
  /* [60][0][][] */ -44,-65,113,-108,0,76,127,11,63,29,-1,-12,-15,-50,40,78, 
  /* [61][0][][] */ 31,30,34,75,-56,42,-28,-17,-33,-8,53,-45,-127,-31,8,28, 
  /* [62][0][][] */ 42,-41,21,23,-33,22,-35,127,-41,-61,8,70,26,-127,9,-9, 
  /* [63][0][][] */ 24,-15,-80,-114,-12,-94,46,76,-85,-105,-127,14,-34,-6,-10,55, 
  /* [64][0][][] */ -63,3,26,33,97,-79,2,-79,-36,-78,-17,20,-68,-127,-38,27, 
  /* [65][0][][] */ 43,-6,21,54,-14,23,4,127,-40,-52,16,59,50,-85,-2,-20, 
  /* [66][0][][] */ -22,-114,89,6,-40,46,-72,-53,90,16,43,-9,-23,0,127,30, 
  /* [67][0][][] */ -41,-46,-68,29,-59,127,88,-31,-88,-56,-7,-60,-2,-46,124,-96, 
  /* [68][0][][] */ -9,91,26,91,-27,-53,-127,-39,24,-93,-34,-17,-48,24,-17,-17, 
  /* [69][0][][] */ -35,42,103,60,-6,94,63,-15,-110,71,0,127,-66,19,-74,59, 
  /* [70][0][][] */ -52,63,56,2,-23,-24,25,-36,-12,-127,60,-95,42,53,33,28, 
  /* [71][0][][] */ 117,31,33,-20,60,127,-100,15,30,-108,55,-55,19,118,74,19, 
  /* [72][0][][] */ -86,8,47,-6,-78,33,58,24,3,-100,13,-127,25,-21,19,40, 
  /* [73][0][][] */ 5,-43,-94,-71,16,-14,-88,-49,-1,23,-10,73,9,-7,127,-43, 
  /* [74][0][][] */ -54,-49,-127,21,-42,-119,82,-36,-102,2,-75,41,-8,-79,-28,-45, 
  /* [75][0][][] */ 15,-115,27,-28,-30,-104,-43,-83,14,-40,41,127,-58,33,-19,-108, 
  /* [76][0][][] */ -40,-8,44,84,-52,-43,39,-57,64,-50,-32,-52,-5,-11,-127,98, 
  /* [77][0][][] */ -16,9,43,7,-39,-8,-79,-28,-24,-19,72,-40,-26,-34,127,-10, 
  /* [78][0][][] */ 47,-127,-3,2,-22,119,-12,-81,74,-102,-34,-55,7,-25,-34,18, 
  /* [79][0][][] */ 30,-6,113,-56,-83,-2,-9,-57,-55,55,-77,-60,7,-19,-43,-127, 
  /* [80][0][][] */ -16,68,10,-44,-51,3,-9,13,44,-71,-67,-16,-1,-127,-52,47, 
  /* [81][0][][] */ -93,10,52,-41,-67,3,-114,-77,5,13,55,-68,-56,-127,-67,99, 
  /* [82][0][][] */ 78,-5,75,-107,20,-62,-29,-27,-33,-37,-127,-20,-18,-44,0,-33, 
  /* [83][0][][] */ -10,70,-74,-26,58,-33,40,127,48,-28,23,99,-42,-21,-30,33, 
  /* [84][0][][] */ -36,101,120,-14,-57,-111,-5,47,31,95,114,10,76,127,26,2, 
  /* [85][0][][] */ -31,-77,14,2,-127,-75,-1,22,34,54,56,37,-8,53,-35,-26, 
  /* [86][0][][] */ -8,-24,-4,127,92,35,6,-25,-29,-9,-10,-14,-58,0,46,-118, 
  /* [87][0][][] */ -1,-127,61,30,28,-53,-78,112,2,-43,-60,17,-21,81,22,16, 
  /* [88][0][][] */ 52,127,8,-80,31,54,76,95,87,14,-57,-36,22,20,-22,-3, 
  /* [89][0][][] */ -77,127,17,-78,-15,-38,21,9,-96,-63,78,-71,41,-4,-6,48, 
  /* [90][0][][] */ -3,-91,-40,35,127,-36,0,68,-84,15,23,-7,-15,75,-26,-20, 
  /* [91][0][][] */ -58,106,110,39,-5,-41,41,-127,75,-57,26,-112,-47,65,-81,113, 
  /* [92][0][][] */ -66,46,-25,105,-60,127,-23,61,-13,32,-39,-75,58,4,-25,-20, 
  /* [93][0][][] */ -67,-19,-72,37,-7,-61,-70,-25,124,8,99,106,-127,-25,84,73, 
  /* [94][0][][] */ -59,-127,69,-70,4,77,99,-65,19,10,0,63,68,-51,-4,34, 
  /* [95][0][][] */ 14,51,27,34,70,-69,-2,-48,1,4,-1,-69,-73,-106,127,81, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant14_scale = { 96, { 0.0016060282941907644, 0.00027494668029248714, 0.00019866456568706781, 0.0012761453399434686, 0.0035730879753828049, 0.0008957588579505682, 0.0026340621989220381, 0.00222965725697577, 0.0063401493243873119, 0.0031288766767829657, 0.0023637153208255768, 0.0029638353735208511, 0.005643078126013279, 0.0022439870517700911, 0.00097587605705484748, 0.00093857169849798083, 0.0046526528894901276, 0.0011877918150275946, 0.0038396087475121021, 0.0022183950059115887, 0.0046214298345148563, 0.00075073866173624992, 0.0019602410029619932, 0.0016166673740372062, 0.0031821143347769976, 0.0020402036607265472, 0.0036957799457013607, 0.0010437050368636847, 0.00037678703665733337, 0.001962058711796999, 0.0027641595806926489, 0.0014703852357342839, 0.005071515217423439, 0.0055877398699522018, 0.0021292103920131922, 0.003243334824219346, 0.0010868719546124339, 0.0015361523255705833, 0.0045048650354146957, 0.0021991978865116835, 0.0010257901158183813, 0.0018220823258161545, 0.0034910638350993395, 0.0015488216886296868, 0.0035893579479306936, 0.0019635052885860205, 0.0027767503634095192, 0.0039945938624441624, 0.0021746004931628704, 0.0051945229060947895, 0.001977516571059823, 0.0012587172677740455, 0.0036910080816596746, 0.0027523043099790812, 0.00042853367631323636, 0.0036020581610500813, 0.0054734526202082634, 0.0014575355453416705, 0.0019230860052630305, 0.0020033896435052156, 0.0035040460061281919, 0.0073325568810105324, 0.00095012184465304017, 0.001041988143697381, 0.0022554951719939709, 0.00091466389130800962, 0.0013395388377830386, 0.0029914830811321735, 0.003547566244378686, 0.0022866073995828629, 0.0049866386689245701, 0.0024307924322783947, 0.0041433363221585751, 0.0020681410096585751, 0.0019837147556245327, 0.0013015475124120712, 0.0045208851806819439, 0.0028462614864110947, 0.0035071440506726503, 0.0023382606450468302, 0.0045057595707476139, 0.0032305915374308825, 0.0016638785600662231, 0.0022981548681855202, 0.0017294785939157009, 0.002844188129529357, 0.0022888032253831625, 0.0013891315320506692, 0.0016658623935654759, 0.0030946079641580582, 0.0033385769929736853, 0.0043241530656814575, 0.0015521823661401868, 0.0016085535753518343, 0.0022591536398977041, 0.0024921372532844543, } };
const TfArray<96, int> quant14_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data15[16] = { -12573, 26662, -15078, -39388, -13968, 12945, -24461, -23041, -28207, -7474, 18004, 3928, -8594, 25202, -6236, -23682, };
const TfArray<1, int> tensor_dimension15 = { 1, { 16 } };
const TfArray<16, float> quant15_scale = { 16, { 2.7899859560420737e-05, 2.0205963664921001e-05, 2.5743487640284002e-05, 2.7064839741797186e-05, 2.7052265068050474e-05, 3.301361357443966e-05, 3.7863788747927174e-05, 1.9916607925551943e-05, 2.2234626158024184e-05, 2.5124820240307599e-05, 3.3046959288185462e-05, 3.5260214644949883e-05, 2.4478951672790572e-05, 2.2940901544643566e-05, 3.1918050808599219e-05, 2.0046201825607568e-05, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data16[16*1*1*96] = { 
  /* [0][0][][] */ 40,9,5,12,-12,-43,42,54,-61,8,29,40,-2,-39,-41,-13,-29,27,11,17,-61,57,3,18,51,18,39,11,-18,9,-22,8,-4,44,-20,13,-30,8,45,8,-17,-6,-21,-36,6,26,25,-74,-41,18,-12,-17,36,-7,-37,29,-24,-3,51,19,89,-34,0,45,43,-19,-47,-2,52,25,-10,17,-3,9,32,-12,-71,-40,22,52,-31,-35,-127,4,-16,-20,-15,-9,43,2,12,-42,3,-45,19,-39, 
  /* [1][0][][] */ 17,40,102,-41,20,24,1,-70,-12,1,-17,69,-20,-13,-2,16,-50,-5,-3,-52,-38,-27,-94,31,-12,-52,3,-1,35,-8,45,-21,-14,26,-23,-9,-6,-66,-33,0,20,16,30,34,-12,-1,42,54,-83,20,25,-50,-127,-79,-45,-95,32,22,18,-17,-15,-123,-21,-22,-8,34,-37,23,30,33,-82,-53,36,22,11,-38,69,-4,-33,1,9,64,-39,58,-3,-29,-6,-18,29,26,43,15,42,-89,34,-29, 
  /* [2][0][][] */ -31,-19,22,86,20,-103,-23,24,-3,-106,-22,90,5,52,56,-47,4,-3,-19,-86,66,-71,-16,-67,-26,127,-114,-55,110,12,7,-18,-18,47,37,-12,16,32,24,-7,26,11,42,54,39,11,-51,18,53,12,-5,2,-74,78,-110,82,-1,-16,-45,55,9,-42,-10,102,18,-11,37,24,-64,30,-23,15,83,-21,77,54,-7,-39,-41,2,-31,4,15,-37,15,-19,7,-56,-14,25,-46,16,47,50,3,-4, 
  /* [3][0][][] */ 47,-50,-11,88,-18,20,-2,-6,22,-32,-42,-7,-3,50,-33,-22,-32,34,1,36,0,48,52,127,12,65,-74,-14,14,-22,44,-33,14,-2,41,-48,38,-1,-46,71,7,-2,-3,71,79,44,-44,-14,-23,12,31,12,46,25,80,53,4,-38,21,-15,1,38,-17,32,5,101,-26,53,47,54,-17,9,-21,-34,10,60,-38,-9,-51,-18,-17,6,78,20,-11,-13,40,50,-9,33,-11,-10,14,13,-18,65, 
  /* [4][0][][] */ 21,-16,-106,49,-3,0,0,10,-15,-34,26,-51,60,21,19,-14,7,-51,-20,-74,2,45,22,127,6,61,8,-47,-64,41,10,-47,-10,82,-22,-33,-2,34,33,-39,-20,7,37,-97,52,36,127,-37,-40,-12,17,7,-41,39,7,18,-26,49,17,-56,4,14,-12,70,39,35,54,38,-108,64,-11,2,4,-8,68,10,-4,56,-5,25,3,-6,-55,5,14,-6,6,-7,-8,4,-11,-22,11,-99,36,38, 
  /* [5][0][][] */ 27,-1,5,4,-6,24,16,-4,7,2,14,-23,36,0,24,9,-60,13,-31,-25,40,-18,-10,-64,17,-36,-7,-40,16,-8,-13,-20,-6,24,-46,16,-33,-14,7,12,-9,9,3,-67,6,26,-8,-6,70,2,-1,35,-100,-22,-40,122,16,22,-24,-5,-47,-127,-8,-34,7,39,20,28,4,23,26,-36,-15,-8,-20,47,13,23,19,5,52,4,-63,-24,8,19,-9,30,-1,-21,7,-7,-17,-23,-23,-4, 
  /* [6][0][][] */ 46,3,125,12,1,22,17,-62,30,17,5,7,-36,-17,-19,-4,-9,-27,24,0,-31,-6,33,68,14,-4,41,-8,29,14,39,31,25,-19,-18,-7,-2,33,20,-10,26,16,5,-16,12,-51,-3,-24,127,1,17,4,32,-43,-8,10,-18,-1,-1,-23,25,75,4,47,-3,7,-11,4,53,11,-45,-16,-21,6,-47,4,-10,26,13,13,-34,-24,-20,5,-7,-11,-9,-17,62,0,11,-32,-19,-7,-50,-20, 
  /* [7][0][][] */ 3,9,127,25,-39,7,-49,103,21,-8,9,34,19,19,-71,-8,17,-54,15,13,-37,18,17,-47,-37,86,27,-11,-5,49,-34,5,4,-12,15,-23,-61,-11,-60,-70,-76,-32,-33,-60,31,123,-64,-26,-3,12,14,-7,97,25,106,78,24,-51,28,-24,14,30,-39,50,-7,83,-11,18,78,14,-18,29,-51,-6,3,-43,-57,16,10,-1,-24,-23,-54,32,20,17,8,-4,-82,-19,23,-12,-12,-16,37,30, 
  /* [8][0][][] */ -34,12,76,74,-43,-123,-72,-22,112,48,28,86,-49,17,-48,-20,-11,54,9,84,-3,53,26,-9,-53,20,41,-11,-37,-12,25,-39,84,-62,26,-50,-33,-7,-70,37,1,-4,26,6,-4,101,33,-20,46,25,49,-29,111,23,67,95,4,-23,-8,25,23,-75,-2,8,-33,-27,-17,80,-71,-16,-72,-12,29,-109,-74,34,65,127,-76,62,-40,2,-55,21,-50,-29,13,14,-2,-4,-49,75,46,27,86,27, 
  /* [9][0][][] */ 9,1,-16,-95,-3,-6,25,6,-12,49,2,-6,-52,-13,-42,40,20,-2,32,1,27,-63,-50,-6,4,-5,7,1,-96,17,43,5,-3,-6,43,0,-29,23,7,-1,-31,-21,-54,11,16,60,62,-48,31,2,13,-21,71,-108,-65,127,-45,14,41,74,28,100,-4,10,0,61,-43,-12,-12,-46,53,-26,-28,18,36,-10,-16,-71,12,-43,-29,-2,19,-4,41,25,-55,48,5,49,8,-10,-8,-2,-22,2, 
  /* [10][0][][] */ 11,-13,-49,27,34,-6,-6,53,24,22,7,13,-4,1,11,-42,-2,63,-21,-53,30,7,11,-71,20,-6,11,-16,-24,-55,10,-7,38,-57,-31,-1,-8,-16,-24,12,-26,6,-19,-22,3,-28,22,-4,2,7,47,47,18,-3,-35,-104,20,-14,-13,16,16,-47,5,-14,-45,-8,-127,26,4,-1,7,39,16,-29,25,25,38,39,-6,19,53,-5,-14,-4,-45,-26,24,-22,-38,-36,-24,51,-12,18,10,28, 
  /* [11][0][][] */ -17,16,40,10,5,31,3,-13,38,38,-18,-28,10,-11,-9,4,-43,22,42,-39,-29,-127,-30,48,-41,-68,33,35,43,-45,8,6,14,35,-47,-7,-4,9,-28,26,-54,-34,-47,32,-33,1,121,-9,39,25,23,5,48,-65,-3,-75,41,-36,-32,1,-2,7,13,14,-24,-37,-1,47,-53,-4,17,38,-3,-24,-60,-23,11,16,-21,-5,-17,48,24,10,-33,5,-7,-9,4,30,28,48,33,-12,-41,7, 
  /* [12][0][][] */ 47,2,127,23,15,49,23,-27,-27,-6,-8,-29,6,6,50,24,95,-22,40,-10,-9,-35,-31,27,24,-4,45,48,17,25,-30,-12,-7,-23,18,-15,-1,49,19,-9,-48,18,-7,-29,-48,17,-7,-23,-30,33,-10,5,-4,-8,75,29,-13,5,30,65,-122,44,-29,-35,-13,-6,-37,5,28,55,-13,-14,-17,7,-57,27,-42,-81,14,-23,-3,-17,9,-7,15,48,-98,-31,-32,-71,42,31,38,-26,112,7, 
  /* [13][0][][] */ -28,5,63,61,4,-2,23,-22,13,5,34,-90,12,15,55,8,-58,77,-5,-12,-37,-83,2,-30,-80,65,-20,95,-27,5,5,-57,6,45,3,-36,-35,0,-54,22,99,31,-42,-5,19,19,23,-61,-36,-31,9,11,-14,-38,57,-55,-15,55,-27,19,-32,-64,22,-127,-3,30,50,7,-41,12,-59,11,9,-60,-23,-77,-60,-3,6,4,-3,13,-83,6,10,-13,-9,-45,-49,-87,-11,17,-31,5,39,33, 
  /* [14][0][][] */ 5,-3,23,46,14,-55,-11,-76,9,-14,-11,23,55,35,24,-4,8,23,-22,2,48,-3,-33,19,-10,-14,-48,-20,1,-43,-18,-56,-4,-3,65,-23,-5,-17,-7,-8,-18,-16,-1,27,9,41,13,-24,8,-12,25,-28,43,-35,-37,85,-4,31,9,38,-36,127,-12,-97,24,18,-37,17,4,19,16,-25,6,-34,-7,-22,-34,21,-22,-36,-2,9,9,-1,-35,-13,54,-28,22,40,-47,12,4,-30,10,10, 
  /* [15][0][][] */ -61,12,11,39,-16,23,10,63,-63,-36,-25,37,4,53,53,-9,-28,25,-83,59,-11,16,-30,-66,26,-50,-49,-127,56,-15,-52,-51,-25,70,5,-27,-18,-28,1,-86,46,33,70,126,32,1,6,-23,104,-57,-22,-67,79,57,26,27,-36,74,-7,4,4,81,-55,72,-25,67,-86,-11,55,58,-61,21,55,60,57,-26,29,-5,-65,32,108,-41,-6,-52,-55,-36,59,-46,-43,-21,-4,50,23,-17,9,-32, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant16_scale = { 16, { 0.0018463314045220613, 0.0013371717650443316, 0.0017036290373653173, 0.0017910721944645047, 0.0017902400577440858, 0.0021847446914762259, 0.0025057152379304171, 0.0013180230744183064, 0.0014714227290824056, 0.0016626873984932899, 0.0021869514603167772, 0.002333418233320117, 0.0016199457459151745, 0.001518162083812058, 0.0021122435573488474, 0.0013265992747619748, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data17[96] = { -4820, -14766, -2905, -10232, 28534, -7335, 26882, 38390, 60, 37909, 2854, 20706, -2744, -8292, 4323, -12443, -12518, 1713, -148, -4911, 4922, 2220, -2923, -1921, 1414, 2178, -703, -1196, -16463, 111, 16933, -1496, 141, 18778, 5202, -1588, 11943, -8809, -508, 4239, -17937, 17537, 7582, -1637, -9838, -12307, -8020, -8338, -8384, 90, -889, 2331, 844, 5431, -4078, -8330, 60, 13076, -9499, 735, -9567, 3340, -457, -398, 4594, -9006, 6228, 1988, -7386, 22095, 25070, 1022, -4253, 13634, -2898, 16765, -13416, -8950, -3434, 5877, -23988, 148, -32539, -5554, -9467, 13265, 7334, -30738, 3014, 354, -14352, 1017, 7802, -841, -5183, -17798, };
const TfArray<1, int> tensor_dimension17 = { 1, { 96 } };
const TfArray<96, float> quant17_scale = { 96, { 8.1802798376884311e-05, 6.3934690842870623e-05, 8.8009554019663483e-05, 5.5902019084896892e-05, 3.7172088923398405e-05, 5.9924761444563046e-05, 4.4777771108783782e-05, 4.8589528887532651e-05, 0.00017286674119532108, 7.3674527811817825e-05, 0.00010674796794774011, 8.9350338384974748e-05, 6.9483183324337006e-05, 7.0553382101934403e-05, 9.4301365606952459e-05, 5.8104724303120747e-05, 6.7964865593239665e-05, 8.8892717030830681e-05, 0.00012050334044033661, 0.00012649274140130728, 0.00010137129720533267, 9.7579482826404274e-05, 0.00010868379467865452, 0.00010144943371415138, 8.6960273620206863e-05, 0.00012610886187758297, 0.00010058928455691785, 0.00012841375428251922, 7.4722192948684096e-05, 8.1112200859934092e-05, 0.00013297205441631377, 0.0001018466500681825, 0.00020608703198377043, 7.3666735261213034e-05, 6.4803847635630518e-05, 5.5690663430141285e-05, 5.9675836382666603e-05, 7.0600792241748422e-05, 0.00012228217383380979, 0.00011098800314357504, 3.3443626307416707e-05, 4.251897189533338e-05, 8.0429439549334347e-05, 0.00010136168566532433, 9.8638236522674561e-05, 9.1598063590936363e-05, 0.00010230844054603949, 8.160994912032038e-05, 9.1381181846372783e-05, 0.0001440361374989152, 0.00023416396288666874, 0.00014647227362729609, 0.00013849131937604398, 7.2938200901262462e-05, 7.7866214269306511e-05, 0.00010688664042390883, 5.0229391490574926e-05, 0.00015750572492834181, 7.9194564023055136e-05, 0.00010149205627385527, 5.5702617828501388e-05, 0.00020154881349299103, 7.3630457336548716e-05, 0.00010365108028054237, 8.2983089669141918e-05, 9.7562915470916778e-05, 0.00021477360860444605, 0.00014571291103493422, 7.2557057137601078e-05, 7.7320823038462549e-05, 0.00011406593694118783, 0.0001951888989424333, 8.1718513683881611e-05, 9.0683737653307617e-05, 0.00015831136261112988, 6.5955333411693573e-05, 0.00020215845142956823, 0.00016824492195155472, 7.1741393185220659e-05, 6.6532156779430807e-05, 0.0001558225485496223, 5.5953354603843763e-05, 3.1016959837870672e-05, 0.00010055680468212813, 5.3848925745114684e-05, 8.4813254943583161e-05, 0.00018257896590512246, 3.9107959310058504e-05, 7.3076851549558342e-05, 5.6683540606172755e-05, 4.1380149923497811e-05, 0.00015445567260030657, 0.00015171848644968122, 9.168919496005401e-05, 5.6057742767734453e-05, 6.9402696681208909e-05, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data18[1*3*3*96] = { 
  /* [0][0][][] */ 56,59,10,-4,-77,-45,-108,-35,-17,-94,-127,25,41,-39,-53,17,74,8,-76,-7,-29,37,-89,44,-5,-104,110,120,78,-100,-12,14,-4,-39,-104,-25,-18,18,8,-21,34,-118,51,34,12,-40,56,-21,48,69,12,-28,14,-25,29,45,127,-127,39,-55,103,-48,-103,23,15,84,-9,-41,77,-44,-60,-8,16,-14,-23,-35,-2,127,-46,-95,57,-116,91,88,84,-22,-94,77,48,55,66,-9,7,-106,50,-42, 127,46,-39,-34,-38,-120,59,-92,82,-82,-28,-127,127,-48,-26,95,15,-18,127,32,-94,30,127,36,127,124,76,-64,45,-23,-10,127,-69,-105,-127,-127,-102,-78,124,87,64,62,-44,-80,19,17,-2,127,-3,127,-32,-76,-10,1,75,1,-25,-43,119,96,31,-23,120,-6,67,104,44,65,-1,-67,-96,-83,-127,38,-68,-105,9,-67,-127,9,-6,56,80,33,70,43,4,106,66,73,44,-11,-35,24,7,23, 37,55,16,38,-75,-55,-127,-37,10,-91,100,-49,-46,-41,-54,-12,63,30,48,24,-28,-25,7,19,-55,-127,127,127,92,-112,-3,13,2,-36,-70,17,-47,19,4,-58,16,-127,-78,24,34,-31,69,-14,66,-34,-15,63,1,-31,60,42,117,-50,110,20,127,-43,100,13,27,116,2,-17,45,-36,-56,6,73,-19,16,-66,106,-46,-41,-127,44,-65,127,127,-64,-44,-43,64,46,51,58,13,-9,-127,77,16, 
  /* [0][1][][] */ 18,98,109,43,-105,127,-53,-127,-121,-116,-60,-67,62,121,-27,74,114,-55,-55,-47,-9,103,10,59,-63,42,-66,34,127,52,-76,-18,127,-91,-2,87,-3,47,-30,122,120,-59,127,120,60,53,127,-12,127,55,-121,-127,127,-127,16,106,110,-26,127,127,57,108,-127,127,6,80,-84,0,127,-102,-110,119,-18,51,-8,-127,127,-11,90,-105,84,-6,98,27,127,-126,0,107,46,91,78,119,-113,109,74,56, -11,73,38,51,-127,76,-92,68,86,-127,93,-52,-1,26,127,127,13,127,-9,-13,127,-127,72,-91,27,-78,12,-28,-30,16,-82,-34,32,100,92,-82,-127,-47,-127,59,-29,-92,-68,20,127,93,-21,89,-88,30,-48,-29,-32,87,-65,-34,-93,-97,-71,-40,-78,-47,47,-59,-127,15,-127,-104,-21,-61,-127,-10,78,-25,123,-23,113,109,26,-42,127,-93,11,-26,-19,52,72,66,91,-39,127,77,-33,-107,-127,122, 11,127,127,67,-116,119,-18,-126,108,-89,82,17,-65,127,-47,91,127,-91,-24,127,-37,7,-3,127,70,56,64,42,34,65,-127,-23,-125,-87,37,-123,5,42,-15,-87,127,-63,50,127,-23,78,106,-21,123,-31,127,81,-14,-107,100,127,102,-77,-28,123,98,127,95,95,-14,-59,-87,-38,81,-127,-90,-127,56,23,127,-89,74,96,94,-91,114,18,125,70,85,-127,-35,119,45,116,30,-127,127,116,118,20, 
  /* [0][2][][] */ -57,46,55,121,-67,64,-88,1,-30,-67,7,-35,70,26,-11,11,1,-51,34,6,-27,43,-53,28,-17,-25,-53,81,121,95,56,-17,8,-33,70,125,-82,39,54,-1,41,-54,-112,-29,47,39,25,-60,83,-41,-21,-40,36,-43,18,37,-105,5,-26,8,71,-41,88,19,21,127,32,32,41,8,-71,-9,62,-115,-32,121,25,46,43,115,44,105,109,50,107,-19,-68,-59,-71,-120,-29,61,34,17,92,20, 33,-92,-11,127,-53,-49,-2,-99,-127,-4,-123,-111,-14,-60,-65,-9,108,0,-98,22,10,42,-39,22,-42,60,-77,3,31,-28,-40,-8,41,-127,74,35,-72,127,58,-127,99,-51,-82,18,34,127,9,62,36,-25,69,0,-35,35,127,7,-70,-48,-16,-85,111,-21,-118,65,79,-50,122,127,68,-43,-109,67,-65,-70,27,-100,7,-4,61,27,-27,127,46,-60,44,-4,-127,127,-127,-127,61,-85,-53,3,10,127, 1,77,69,100,-77,32,-106,-28,27,-43,-42,18,-24,63,-25,10,7,-91,98,5,-26,-6,-26,15,-18,-25,35,47,17,-127,20,0,-7,-36,-69,70,-30,43,103,-70,31,-67,-70,-52,26,13,37,-28,123,-33,21,62,8,-33,92,21,-108,26,-19,-39,80,-36,-80,6,57,60,44,-54,25,-57,-72,4,26,-127,-10,68,62,-26,25,99,21,120,120,83,81,-32,-29,-21,-79,-95,-14,-47,90,27,106,124, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0072763422504067421, 0.0056869778782129288, 0.007828432135283947, 0.0049724732525646687, 0.0033064498566091061, 0.0053302953019738197, 0.003982973750680685, 0.0043220287188887596, 0.015376461669802666, 0.0065533341839909554, 0.0094952099025249481, 0.0079476945102214813, 0.0061805150471627712, 0.0062757087871432304, 0.0083880871534347534, 0.0051684034988284111, 0.0060454611666500568, 0.0079069891944527626, 0.010718747973442078, 0.011251503601670265, 0.009016956202685833, 0.0086796749383211136, 0.0096674012020230293, 0.0090239066630601883, 0.0077350987121462822, 0.011217357590794563, 0.0089473966509103775, 0.01142237801104784, 0.0066465237177908421, 0.0072149136103689671, 0.01182783767580986, 0.0090592391788959503, 0.018331399187445641, 0.0065526412799954414, 0.0057642892934381962, 0.0049536731094121933, 0.005308153573423624, 0.0062799262814223766, 0.010876975022256374, 0.0098723601549863815, 0.0029748037923127413, 0.0037820539437234402, 0.007154182530939579, 0.009016101248562336, 0.0087738512083888054, 0.008147628977894783, 0.009100315161049366, 0.0072591886855661869, 0.008128337562084198, 0.012811985798180103, 0.020828837528824806, 0.013028679415583611, 0.012318775057792664, 0.0064878379926085472, 0.0069261840544641018, 0.0095075452700257301, 0.0044678943231701851, 0.014010102488100529, 0.0070443404838442802, 0.0090276980772614479, 0.0049547366797924042, 0.017927726730704308, 0.0065494142472743988, 0.0092197423800826073, 0.0073813293129205704, 0.0086782015860080719, 0.019104069098830223, 0.012961133383214474, 0.0064539355225861073, 0.0068776714615523815, 0.010146141983568668, 0.017362013459205627, 0.0072688451036810875, 0.0080663003027439117, 0.014081763103604317, 0.00586671382188797, 0.017981953918933868, 0.014965351670980453, 0.0063813827000558376, 0.0059180217795073986, 0.013860384002327919, 0.0049770395271480083, 0.0027589523233473301, 0.0089445076882839203, 0.0047898511402308941, 0.0075441217049956322, 0.016240362077951431, 0.0034786451142281294, 0.0065001710318028927, 0.0050419894978404045, 0.0036807558499276638, 0.013738800771534443, 0.013495328836143017, 0.0081557352095842361, 0.0049863248132169247, 0.0061733555048704147, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data19[96] = { 10585, 946, 9668, 8723, 5846, 4141, 3035, 13698, -474, 11111, 9444, 6831, 1738, 3716, 1844, 895, 2777, 5911, 382, 752, 6500, 7556, -4866, 9959, 592, 7693, -3999, -6359, 7899, 5113, 9141, 6174, 1064, 10141, 5179, 2097, 1868, 4064, 5595, 2462, 4320, 824, -844, 7768, 4520, 4527, -906, 1852, -1512, -1304, 513, 6394, 6248, 3075, 8171, 8865, 3066, -2048, 2810, 1972, 4793, 11264, 1615, 3815, 3544, -1230, 5019, 727, 8507, 14889, -2772, 3249, 2892, 5233, -7202, 1010, -7789, 435, 7719, 2923, 10385, 1470, 8750, 967, 1270, 5123, -3648, 7418, 5233, 11671, 2785, 5152, -1860, 11015, 3152, -1240, };
const TfArray<1, int> tensor_dimension19 = { 1, { 96 } };
const TfArray<96, float> quant19_scale = { 96, { 5.331118154572323e-05, 9.747842705110088e-05, 5.3104333346709609e-05, 6.076577483327128e-05, 0.00011076646478613839, 9.2272981419228017e-05, 0.00011288750101812184, 6.6360560595057905e-05, 6.0338556068018079e-05, 6.618939369218424e-05, 7.3033414082601666e-05, 5.6887816754169762e-05, 5.9075253375340253e-05, 0.00011036368232453242, 7.6835829531773925e-05, 0.00018089717195834965, 8.7715037807356566e-05, 7.3709423304535449e-05, 7.2778362664394081e-05, 7.4988289270550013e-05, 6.9431567681021988e-05, 6.8888213718309999e-05, 7.1584188845008612e-05, 5.8577057643560693e-05, 9.0260524302721024e-05, 5.6651457271073014e-05, 4.2765779653564095e-05, 6.4088024373631924e-05, 5.8897618146147579e-05, 9.8600408819038421e-05, 5.0580012612044811e-05, 0.00010455898882355541, 7.8397817560471594e-05, 6.6001135564874858e-05, 6.8956294853705913e-05, 0.0001304283068748191, 0.00010201133409282193, 0.00012497193529270589, 6.4097417634911835e-05, 7.2213711973745376e-05, 0.00013290607603266835, 0.00013814987323712558, 7.0710440922994167e-05, 4.7762783651705831e-05, 7.4291798227932304e-05, 4.5235508878249675e-05, 6.7991197283845395e-05, 9.3457754701375961e-05, 5.8913923567160964e-05, 9.888051135931164e-05, 7.0515845436602831e-05, 6.3255116401705891e-05, 6.7229775595478714e-05, 7.397792796837166e-05, 5.418579894467257e-05, 6.0978825786150992e-05, 0.00011009975423803553, 4.5409997255774215e-05, 0.00010844387725228444, 8.7975080532487482e-05, 6.3875762862153351e-05, 3.4375363611616194e-05, 0.00011498080129968002, 5.7073353673331439e-05, 0.00014787609688937664, 7.1863338234834373e-05, 2.8531578209367581e-05, 6.3214967667590827e-05, 6.2463652284350246e-05, 5.0270198698854074e-05, 4.7367033403133973e-05, 5.0671103963395581e-05, 0.00010212199413217604, 5.9208745369687676e-05, 4.8287678509950638e-05, 6.615530583076179e-05, 3.9671740523772314e-05, 3.0707793484907597e-05, 7.9323763202410191e-05, 7.2229238867294043e-05, 3.957187436753884e-05, 0.00010052247671410441, 8.6753374489489943e-05, 9.7184492915403098e-05, 0.00010152496543014422, 0.0001135815546149388, 6.3224200857803226e-05, 7.710442878305912e-05, 7.9877128882799298e-05, 6.2186591094359756e-05, 0.000123931749840267, 5.1606897613964975e-05, 9.4079965492710471e-05, 4.3561733036767691e-05, 0.00010524375829845667, 9.0687957708723843e-05, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data20[96*1*1*16] = { 
  /* [0][0][][] */ -21,24,48,-71,-89,-23,-127,-7,59,40,-23,-36,5,76,-13,15, 
  /* [1][0][][] */ 13,-115,-52,107,1,4,-101,-31,-64,0,17,91,52,16,34,-127, 
  /* [2][0][][] */ 6,-9,-60,18,109,2,-46,-30,61,57,41,-55,-112,-127,-4,-64, 
  /* [3][0][][] */ -66,48,62,-17,-69,27,-127,-38,72,16,75,47,-18,-57,22,98, 
  /* [4][0][][] */ 31,-48,23,127,-35,59,-55,-99,113,-35,-77,-13,-7,-124,-64,115, 
  /* [5][0][][] */ 82,40,21,-61,-26,60,9,-127,61,-32,95,42,-1,-20,11,-82, 
  /* [6][0][][] */ 23,58,-4,-34,-54,16,65,-13,12,67,-91,-12,-47,127,87,23, 
  /* [7][0][][] */ 76,-62,-36,-32,-62,-60,-74,113,-32,127,0,21,-70,-22,-118,-18, 
  /* [8][0][][] */ -9,100,2,1,-21,-42,35,98,127,20,-53,-70,-97,26,5,-113, 
  /* [9][0][][] */ 38,-18,116,38,27,-48,-30,16,48,-69,98,-21,-49,-48,127,69, 
  /* [10][0][][] */ 117,1,-8,-120,80,127,33,-35,93,-59,32,-79,15,42,-49,16, 
  /* [11][0][][] */ -30,56,-47,-31,-73,37,36,33,127,38,28,-18,-75,-105,38,-24, 
  /* [12][0][][] */ -8,19,88,-19,-111,-99,-43,-78,27,81,-118,-41,19,61,-127,100, 
  /* [13][0][][] */ 81,-11,22,-38,58,-28,-58,67,28,8,-85,4,-44,63,-8,-127, 
  /* [14][0][][] */ -106,11,-127,5,83,81,20,-48,-86,-7,-104,5,57,-77,-36,-3, 
  /* [15][0][][] */ -35,26,-12,-55,49,9,-67,77,-35,-2,-14,38,34,0,-127,-12, 
  /* [16][0][][] */ 95,95,22,98,-10,127,-28,-11,-83,61,-31,33,-115,38,-52,-24, 
  /* [17][0][][] */ 5,32,-96,50,-53,-96,55,71,-127,58,-115,9,57,-53,-72,34, 
  /* [18][0][][] */ -58,91,-127,-71,25,59,33,8,2,-93,-26,19,-78,-98,-12,85, 
  /* [19][0][][] */ -91,74,-44,1,94,46,30,52,-41,22,72,127,-6,14,44,39, 
  /* [20][0][][] */ -9,-79,104,52,7,9,-1,-127,-52,-13,65,-52,-23,-30,63,-47, 
  /* [21][0][][] */ -17,35,127,-43,58,62,-8,-6,-99,15,-110,22,70,26,16,-28, 
  /* [22][0][][] */ -43,-10,93,30,33,-27,-1,-81,100,-89,126,-10,-46,127,-12,32, 
  /* [23][0][][] */ 127,-44,-25,-37,-93,82,0,9,40,55,87,-25,88,7,30,-25, 
  /* [24][0][][] */ -15,5,97,17,-38,-9,-38,21,9,-127,12,16,-28,-16,-33,-125, 
  /* [25][0][][] */ 81,78,-99,-11,-60,-9,58,-49,27,127,-18,86,85,36,65,-19, 
  /* [26][0][][] */ -91,31,-83,81,-96,-127,43,-32,22,-87,-28,95,-125,25,62,-52, 
  /* [27][0][][] */ -36,0,-104,-96,-23,42,73,-80,-38,42,-116,-15,-51,-127,36,98, 
  /* [28][0][][] */ -55,-109,-50,-104,127,0,-65,19,84,13,1,-74,-56,65,67,66, 
  /* [29][0][][] */ -127,8,3,-6,-2,-31,65,-14,13,30,-76,-31,-48,-4,15,43, 
  /* [30][0][][] */ 25,-39,-90,-11,-19,-97,60,16,27,-110,127,77,-81,-3,-118,68, 
  /* [31][0][][] */ 23,79,127,49,34,-93,10,21,3,-58,116,6,39,-17,42,84, 
  /* [32][0][][] */ -5,-54,31,79,-22,-80,43,58,127,47,-35,-36,-73,-34,-26,-44, 
  /* [33][0][][] */ 70,21,70,53,126,-26,21,-8,51,50,-61,127,-29,28,-65,-15, 
  /* [34][0][][] */ 99,-51,95,-127,-5,8,-26,-45,-22,-8,93,-88,40,-58,73,41, 
  /* [35][0][][] */ -5,-38,2,59,26,-127,72,26,-62,-4,-47,43,37,10,-51,-3, 
  /* [36][0][][] */ 127,44,-64,-83,63,68,27,9,89,-86,62,-18,-9,79,0,4, 
  /* [37][0][][] */ -36,127,-67,-19,-70,29,-38,43,-13,-1,-26,-37,-30,-15,56,-1, 
  /* [38][0][][] */ -99,67,46,69,-64,9,-4,108,86,42,18,-23,-22,127,-43,-34, 
  /* [39][0][][] */ 36,8,-47,-52,11,-52,127,0,-5,48,32,58,29,-35,-48,-61, 
  /* [40][0][][] */ 40,-50,21,46,-2,1,-76,100,-44,-57,28,70,37,-127,8,-7, 
  /* [41][0][][] */ 52,-60,50,47,78,-40,-51,93,6,-59,74,47,-3,-127,17,36, 
  /* [42][0][][] */ 35,30,10,9,-102,29,-11,-84,68,-80,122,-18,-76,-127,79,102, 
  /* [43][0][][] */ 122,4,-127,-81,127,80,48,78,-15,-92,117,-29,98,107,-42,-40, 
  /* [44][0][][] */ -24,-53,-67,9,127,-13,70,96,35,-28,34,26,14,6,39,104, 
  /* [45][0][][] */ -23,30,54,-108,-71,-86,85,-60,15,-87,36,-61,65,95,46,127, 
  /* [46][0][][] */ -17,-20,-65,-9,-127,48,29,8,-71,-121,22,-74,23,31,0,51, 
  /* [47][0][][] */ 22,10,-49,-15,-14,52,-33,-14,44,-6,127,41,12,32,12,89, 
  /* [48][0][][] */ -30,-27,-82,-21,10,-83,-127,2,57,-33,4,30,-11,57,15,-7, 
  /* [49][0][][] */ -72,-55,-63,20,39,-35,34,-13,-127,17,-53,-43,-36,32,-54,-43, 
  /* [50][0][][] */ -32,127,12,49,58,-52,-18,57,-43,3,43,-4,-27,-13,-36,3, 
  /* [51][0][][] */ 27,-91,-52,-2,84,127,28,84,-49,19,40,-51,6,-50,65,28, 
  /* [52][0][][] */ -73,127,8,-44,5,47,77,-22,-57,-23,-18,0,31,-33,-71,-83, 
  /* [53][0][][] */ -42,-59,-74,-85,41,-3,-86,-127,13,102,-42,-59,-63,26,-16,0, 
  /* [54][0][][] */ 84,2,22,-106,-41,24,11,-113,-127,82,-73,5,-30,-58,17,-47, 
  /* [55][0][][] */ -77,127,28,58,4,-89,-65,110,-55,36,5,-94,34,22,-19,59, 
  /* [56][0][][] */ 8,-104,-26,4,-4,-111,127,-47,96,116,-77,12,-47,59,3,-110, 
  /* [57][0][][] */ 2,-31,6,2,17,-58,-3,-77,13,-36,-100,-59,-65,127,-3,62, 
  /* [58][0][][] */ -46,-31,-6,-33,-8,49,40,5,5,5,-34,127,-3,27,-14,-43, 
  /* [59][0][][] */ -7,-22,-127,18,20,-18,39,31,37,-47,-28,57,-69,59,-7,-16, 
  /* [60][0][][] */ -127,-19,-44,-52,-116,35,-27,-16,-50,-39,-54,-17,105,43,82,-86, 
  /* [61][0][][] */ 56,51,13,62,-69,82,-26,23,77,63,47,-127,5,-84,-36,9, 
  /* [62][0][][] */ 81,-50,-11,44,5,-97,44,127,-2,12,-110,111,50,-12,-25,-16, 
  /* [63][0][][] */ -74,40,-19,41,-71,72,10,30,68,43,-50,-90,35,40,103,-127, 
  /* [64][0][][] */ -45,-10,18,-23,-33,-17,-45,3,-17,35,-38,37,72,59,-127,12, 
  /* [65][0][][] */ 42,-11,42,-127,-13,-42,-26,-16,14,-19,-54,9,26,-31,27,-53, 
  /* [66][0][][] */ -9,64,-4,54,14,35,127,49,33,98,38,-77,24,-22,12,-38, 
  /* [67][0][][] */ -20,-9,41,-34,-41,127,-25,-34,-90,-112,7,-72,-42,-66,-8,11, 
  /* [68][0][][] */ 11,55,127,-21,100,-26,-77,-82,41,76,49,17,67,4,-19,-45, 
  /* [69][0][][] */ -71,35,-3,-127,-115,120,-108,-75,-85,90,45,-59,23,-34,-45,63, 
  /* [70][0][][] */ -17,-127,62,61,27,9,-73,20,18,-104,10,54,-100,-19,83,-64, 
  /* [71][0][][] */ -45,14,69,45,37,21,-17,69,34,25,127,-41,-41,-117,-39,41, 
  /* [72][0][][] */ 42,-119,38,92,31,-62,-39,82,10,78,127,21,-13,81,99,1, 
  /* [73][0][][] */ -44,58,-23,-127,-19,-77,57,23,48,-75,57,-28,-102,-52,13,76, 
  /* [74][0][][] */ -5,-43,-34,-97,-64,-13,21,3,127,-64,-64,86,8,21,38,0, 
  /* [75][0][][] */ -14,-34,-6,-53,-98,8,-61,27,83,41,-12,-6,-23,-19,27,127, 
  /* [76][0][][] */ 57,-33,93,-7,-56,-13,-71,-11,53,-127,96,-1,-67,36,41,40, 
  /* [77][0][][] */ 51,-20,127,-16,-97,-50,-120,-77,-81,-32,-82,84,72,-5,-3,63, 
  /* [78][0][][] */ 6,-24,-83,2,8,-127,-5,-42,-57,118,-122,89,23,44,-58,-20, 
  /* [79][0][][] */ -64,35,-92,70,-6,-98,62,-24,-127,-16,55,-68,12,-121,-42,0, 
  /* [80][0][][] */ 1,-127,25,-54,-76,-81,23,87,51,4,-33,49,-112,90,65,-122, 
  /* [81][0][][] */ 0,-50,-99,-55,-25,23,104,-35,16,13,-50,-127,31,-50,-5,95, 
  /* [82][0][][] */ 107,-17,6,-121,66,127,-36,70,77,-67,17,-65,-20,100,6,33, 
  /* [83][0][][] */ -56,-85,14,-127,23,103,55,12,-26,-1,-75,-86,20,-86,-49,11, 
  /* [84][0][][] */ -10,-127,-9,14,-96,-60,66,-72,61,-7,40,4,-74,-34,-110,-113, 
  /* [85][0][][] */ -127,-84,-13,-16,15,0,-56,13,0,74,-35,-61,59,-42,4,41, 
  /* [86][0][][] */ -17,-13,-100,-4,-27,-18,62,-37,-25,-60,-14,65,-127,-67,26,-38, 
  /* [87][0][][] */ -77,73,74,-100,-90,-58,94,66,-60,-9,127,-61,-22,53,117,14, 
  /* [88][0][][] */ -12,20,24,60,112,102,26,-126,17,-69,-23,-9,-29,-127,93,-67, 
  /* [89][0][][] */ -95,6,-71,-28,-50,51,1,99,-53,-15,-58,-83,127,102,-106,-23, 
  /* [90][0][][] */ -42,-34,3,-79,-13,57,-43,53,35,82,67,-88,-96,28,127,-81, 
  /* [91][0][][] */ 17,48,-87,-58,49,55,126,87,17,-52,-48,-16,-50,-26,-52,-127, 
  /* [92][0][][] */ 33,75,93,10,1,-7,5,-13,25,-33,-63,-19,37,-127,-14,29, 
  /* [93][0][][] */ 79,118,11,87,90,-127,54,46,80,-32,-65,112,16,56,-37,-125, 
  /* [94][0][][] */ -31,4,10,65,5,127,51,8,-47,82,-26,26,-86,-38,37,68, 
  /* [95][0][][] */ -56,-127,88,107,71,-41,-73,49,24,-57,32,17,-61,21,-21,-24, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant20_scale = { 96, { 0.001819312572479248, 0.0033265764359384775, 0.00181225361302495, 0.002073710085824132, 0.0037800478748977184, 0.0031489338725805283, 0.0038524309638887644, 0.0022646393626928329, 0.002059130696579814, 0.0022587981075048447, 0.0024923589080572128, 0.0019413698464632034, 0.0020160188432782888, 0.0037663024850189686, 0.0026221212465316057, 0.0061733480542898178, 0.0029933883342891932, 0.0025154286995530128, 0.0024836550001055002, 0.0025590716395527124, 0.0023694413248449564, 0.0023508986923843622, 0.0024429024197161198, 0.0019990173168480396, 0.0030802562832832336, 0.0019333036616444588, 0.0014594371896237135, 0.0021870860364288092, 0.0020099568646401167, 0.003364865668118, 0.0017261079046875238, 0.003568209707736969, 0.0026754261925816536, 0.0022523736115545034, 0.0023532221093773842, 0.0044510336592793465, 0.0034812677185982466, 0.0042648278176784515, 0.0021874066442251205, 0.0024643857032060623, 0.004535590298473835, 0.0047145416028797626, 0.0024130844976752996, 0.0016299663111567497, 0.0025353031232953072, 0.0015437197871506214, 0.0023202868178486824, 0.0031893658451735973, 0.0020105133298784494, 0.003374424297362566, 0.002406443702057004, 0.0021586620714515448, 0.0022943024523556232, 0.0025245917495340109, 0.0018491599475964904, 0.0020809806883335114, 0.0037572954315692186, 0.0015496744308620691, 0.0037007865030318499, 0.0030022626742720604, 0.0021798424422740936, 0.0011731034610420465, 0.0039238673634827137, 0.0019477014429867268, 0.005046461708843708, 0.0024524286855012178, 0.00097367673879489303, 0.0021572918631136417, 0.002131652319803834, 0.0017155350651592016, 0.0016164608532562852, 0.0017292165430262685, 0.0034850442316383123, 0.0020205744076520205, 0.0016478790203109384, 0.0022576346527785063, 0.0013538490748032928, 0.0010479429038241506, 0.0027070252690464258, 0.0024649156257510185, 0.0013504410162568092, 0.0034304584842175245, 0.0029605703894048929, 0.0033165456261485815, 0.0034646696876734495, 0.0038761163596063852, 0.0021576071158051491, 0.0026312875561416149, 0.0027259096968919039, 0.002122197300195694, 0.0042293299920856953, 0.0017611515941098332, 0.0032105995342135429, 0.0014866000274196267, 0.0035915784537792206, 0.0030948431231081486, } };
const TfArray<96, int> quant20_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data21[16] = { 13857, -3001, 9178, -6992, -183, -12875, 10597, -7681, 5101, 9765, -19689, 3452, -6143, 10299, -4880, 13752, };
const TfArray<1, int> tensor_dimension21 = { 1, { 16 } };
const TfArray<16, float> quant21_scale = { 16, { 4.0597540646558627e-05, 2.3502812837250531e-05, 4.3065272620879114e-05, 3.6672143323812634e-05, 3.3704949601087719e-05, 3.2177307730307803e-05, 4.1426068492000923e-05, 3.9446997107006609e-05, 3.5102315450785682e-05, 3.3900108974194154e-05, 4.740489021060057e-05, 2.5901570552377962e-05, 3.2285548513755202e-05, 4.7596873628208414e-05, 3.3140844607260078e-05, 3.9968774217413738e-05, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data22[16*1*1*96] = { 
  /* [0][0][][] */ 21,-21,-3,-62,12,-7,-40,45,92,-41,9,48,-127,1,1,-36,-2,-29,33,-12,29,-1,0,-41,4,30,12,-31,-32,-29,14,-45,5,19,-56,10,22,-4,-34,23,29,32,-16,4,47,-68,-14,-44,10,28,2,51,-8,-48,-5,10,55,-10,5,-11,-26,-58,58,8,-70,14,-25,-13,-76,23,-37,0,22,-3,-6,-9,-1,8,14,14,-3,-28,-8,47,25,-4,-4,39,36,-7,27,-69,-26,-71,71,54, 
  /* [1][0][][] */ 1,-35,-15,-8,20,-32,83,9,-73,-20,28,72,-20,-9,69,50,76,-47,42,1,46,23,-3,53,48,15,-22,8,103,6,41,28,66,21,11,-13,127,-58,-123,-13,8,105,-24,-29,-42,35,28,-64,-27,-77,-25,85,57,-80,49,9,-50,-16,-35,6,11,-39,-24,8,37,14,60,62,-27,-26,-70,-17,16,-27,34,22,-33,0,-24,-2,-26,-90,-17,6,-89,-42,-28,28,-28,-59,63,0,-75,-14,-2,7, 
  /* [2][0][][] */ -51,-57,-15,-9,27,44,22,-28,-25,-47,-58,-53,74,10,1,-41,6,-46,8,7,49,-16,0,-62,-19,-20,-8,-81,-83,-29,-46,-39,-27,1,23,12,-36,13,-29,-21,-53,49,-6,-12,-6,89,7,-30,14,33,13,32,24,-11,-19,3,49,13,-4,-24,-53,-19,4,-8,48,-15,-48,12,-13,103,23,-31,-18,-127,17,-28,23,46,36,-39,35,27,-5,-12,-1,-23,34,-96,-11,26,-12,-19,22,105,35,34, 
  /* [3][0][][] */ 34,-32,27,-39,26,30,-11,-18,6,2,33,-67,24,28,-60,-61,-21,-19,-24,-7,35,-11,38,10,-21,-1,32,14,5,1,23,-34,-12,-4,22,63,-31,-24,-8,-36,7,62,38,86,4,-28,-65,60,-2,-90,-15,23,14,-7,14,21,39,-18,28,-11,22,-127,-6,69,30,-7,107,20,0,27,27,-23,-28,-15,11,2,-36,16,-44,-13,16,0,48,22,15,18,9,-64,46,31,26,-1,-19,-27,56,-5, 
  /* [4][0][][] */ -1,5,-27,-127,-11,-3,1,29,-23,-67,-63,-12,51,14,-3,-27,-25,12,1,-5,26,3,20,-65,-26,3,-35,-46,-11,25,-7,28,-9,-28,-28,39,53,-85,-6,-20,8,45,-7,-42,72,-9,35,-3,92,-9,-84,-1,-10,41,13,2,-17,-52,7,15,28,44,54,35,25,-18,-41,68,45,95,60,-62,20,-10,32,17,-20,-5,-5,-78,17,-2,56,47,38,18,20,-76,-47,1,-9,-4,43,-1,-56,34, 
  /* [5][0][][] */ -89,-26,8,57,1,-3,-24,57,-18,-32,0,0,2,-9,-27,3,52,-64,-36,-19,-42,38,-10,-29,82,-16,-1,-74,32,127,63,40,60,-16,55,32,-55,-14,115,-23,44,-62,-25,105,-37,-97,-66,-24,10,21,8,8,-20,30,-30,-17,30,9,15,28,0,-10,3,-20,44,29,-37,32,-58,-67,6,12,49,-83,-27,0,-16,49,-22,0,-25,-3,-15,-2,-20,12,32,78,28,22,-2,-9,56,49,54,19, 
  /* [6][0][][] */ -12,41,-1,-16,55,-59,20,-13,57,23,8,-19,-10,-13,-15,-14,-31,-36,-11,34,-12,11,17,-8,-23,13,-16,-4,13,127,-25,15,-15,16,-17,-12,4,4,-21,-32,-79,-6,-34,-16,7,-57,9,6,47,13,-21,-20,4,0,-22,18,-23,17,2,19,52,-20,-16,-6,-27,12,-75,22,8,-24,38,1,14,-50,17,20,-8,-37,-6,-19,-14,-14,-22,14,3,27,7,66,8,-11,23,-28,-96,4,-69,42, 
  /* [7][0][][] */ -37,43,-23,55,-1,7,-13,18,-42,-27,-50,127,40,8,-25,-7,27,0,-10,-14,-19,-23,-33,14,33,9,-10,6,-23,-7,8,24,-8,12,20,-37,31,-29,-30,10,-69,-32,34,12,10,-28,6,10,51,9,28,-12,-6,21,1,17,5,-15,32,-6,39,78,-37,10,-14,-9,-13,-30,-5,20,-10,-1,15,-6,-10,16,6,4,13,43,9,-6,-1,-18,-26,16,8,-28,3,-8,16,3,65,26,5,6, 
  /* [8][0][][] */ 39,-68,17,27,0,-14,-16,-8,-52,14,-36,-76,-24,2,-9,-20,-23,55,39,19,30,-14,26,-61,-63,-14,-30,-75,-88,54,-18,-21,-80,-30,-52,-17,-54,-10,127,-15,56,-34,42,70,13,-96,-2,9,-11,-9,25,-31,-7,120,10,36,-12,20,-31,8,45,17,-62,-14,-20,-8,-12,37,11,103,-53,-1,44,-36,-23,30,-10,-19,52,-42,-4,26,25,30,75,42,18,20,25,14,-13,-8,13,-66,26,47, 
  /* [9][0][][] */ -28,76,22,76,10,-11,-11,5,-91,-32,-73,21,-98,-40,12,5,59,-64,31,-52,-5,49,-45,37,29,9,12,-22,-49,-7,83,62,70,22,11,-68,111,20,16,40,18,-54,88,33,6,-99,31,21,-70,10,5,-18,11,31,25,31,-51,-17,29,22,-10,-9,-13,16,-86,-47,-32,-23,-26,-76,6,32,-25,-85,-15,26,4,-67,69,29,47,127,27,4,-77,-1,4,-60,-5,-15,83,40,2,-29,24,-82, 
  /* [10][0][][] */ -23,12,-14,-1,-12,36,23,-31,83,4,38,-19,52,6,-1,18,-31,0,1,14,-7,-48,5,9,32,8,-19,-43,78,127,-14,-6,54,-18,-5,-29,-28,26,-64,-15,-121,119,92,-39,23,-5,-18,35,44,44,5,-26,-1,-94,11,9,-11,25,-43,1,-24,22,10,-41,30,32,-32,-18,11,75,29,8,30,40,5,14,-10,59,-49,-34,-1,7,19,-33,25,37,34,13,18,-30,-26,-27,-18,34,30,21, 
  /* [11][0][][] */ -17,-59,-35,-23,6,-76,47,3,108,95,108,-127,96,68,15,84,-17,-52,55,25,-50,-78,-37,-37,20,-35,31,16,-24,-93,53,27,23,8,6,40,33,77,-43,-13,-72,45,97,13,-10,-24,-55,50,-64,5,-99,-34,23,15,-47,-28,-26,11,-22,11,15,84,-25,-4,-49,-41,12,-13,-32,-77,15,41,53,101,24,91,9,50,-20,-14,3,-9,-79,100,-75,14,32,-16,31,18,32,15,-42,19,-18,-73, 
  /* [12][0][][] */ 99,-20,-19,-34,18,-19,-13,55,16,3,10,69,17,28,-59,-3,6,123,33,-47,-14,12,16,-17,-42,10,22,-29,-27,-70,-9,16,-40,49,1,-17,48,30,11,-1,25,-20,6,7,-3,-33,84,-36,8,-14,54,32,38,46,3,-2,-59,4,1,7,6,-16,-7,-9,-10,20,17,-9,127,9,-10,-20,-4,3,-9,12,1,38,13,7,-27,-23,-1,1,-15,-27,-28,-4,-38,-17,4,47,-32,-12,34,-40, 
  /* [13][0][][] */ -9,-11,1,-2,47,14,24,3,15,-26,-10,-7,13,10,-2,23,-34,-13,-31,0,16,-5,3,-79,40,-29,-5,17,2,-127,12,-39,9,5,0,19,76,-5,2,20,-78,16,-44,-30,-5,-33,4,-32,-13,-2,27,-53,27,16,-4,-30,23,23,27,8,-44,24,17,-16,-49,18,16,-15,-23,-6,-8,-3,24,64,-9,22,11,-22,-12,20,14,-43,33,-26,-37,15,-14,-47,-23,12,22,-14,33,20,38,15, 
  /* [14][0][][] */ -22,8,22,-78,77,9,36,6,-81,-41,-81,49,-23,-31,-3,-96,20,1,49,-9,32,55,17,-4,84,-80,-6,-47,27,-14,67,47,89,14,9,-71,-35,29,-61,-10,-65,48,27,-39,8,-95,14,-67,-39,27,47,22,3,59,15,69,-71,-28,-22,-4,-46,-27,-58,41,-35,7,-100,82,12,102,22,18,1,-18,35,2,-39,46,92,12,-41,127,35,-39,63,-15,8,10,-31,-13,-8,7,106,-13,37,59, 
  /* [15][0][][] */ -41,26,8,-66,-7,44,-49,-29,-127,-73,-75,54,-13,66,2,-39,32,-41,20,20,0,0,3,8,-47,-11,-27,-32,30,-39,-65,-2,-72,22,-50,-77,-57,-18,51,9,-26,-5,72,38,-36,-77,16,29,5,-48,110,-15,-12,31,13,-8,22,14,-51,-35,-26,-43,-52,5,10,3,-41,-4,-11,103,-5,-56,-39,97,-2,-36,-60,20,-9,-47,-61,-6,49,-56,-12,-28,23,101,16,-7,-3,2,71,12,-27,-32, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant22_scale = { 16, { 0.0021980446763336658, 0.001272496534511447, 0.0023316533770412207, 0.0019855145364999771, 0.0018248637206852436, 0.0017421537777408957, 0.0022429029922932386, 0.002135751536116004, 0.001900520408526063, 0.0018354301573708653, 0.0025666102301329374, 0.0014023708645254374, 0.0017480141250416636, 0.0025770047213882208, 0.0017943219281733036, 0.0021640018094331026, } };
const TfArray<16, int> quant22_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data23[96] = { -9216, -23311, -593, 1141, 15975, -3025, 157, 12278, 1542, 1055, 722, -8382, 2282, -7321, -745, 578, -11080, 7603, -828, 9291, -166, -2880, 386, 4750, 2898, 349, 12732, -7573, -3116, -7261, -9931, -4160, 3144, -11458, 5749, -433, -1956, -294, -4669, -6364, -6088, -75, 2091, 12880, -6110, 10834, 5436, -4623, -3013, -10400, 2691, -1414, 4177, 4238, -3357, 1024, 1043, 18370, -19168, -6002, -327, 1147, 4460, -2224, 8469, 12418, 7467, -21, -13494, -11494, 1046, 180, -4, -477, -770, -3047, -203, 663, -233, 2375, -10989, 3578, -3215, -1073, 1338, -3152, 6505, -2507, -4784, -6595, 9645, 18518, -3938, 1785, -492, -3262, };
const TfArray<1, int> tensor_dimension23 = { 1, { 96 } };
const TfArray<96, float> quant23_scale = { 96, { 8.8531174696981907e-05, 4.8862617404665798e-05, 0.00013800509623251855, 0.00014231435488909483, 6.8630790337920189e-05, 0.00010292574006598443, 0.00036907393950968981, 0.00026219245046377182, 0.00013191155449021608, 0.00013550497533287853, 0.00011124312732135877, 6.9362795329652727e-05, 0.00012092164251953363, 5.5650943977525458e-05, 0.00015843758592382073, 0.00013852030679117888, 6.5752457885537297e-05, 0.00016572096501477063, 0.00025007865042425692, 6.2626371800433844e-05, 6.6415683249942958e-05, 4.0036866266746074e-05, 0.00012568969395942986, 0.00010733434464782476, 0.00012755158240906894, 0.00012178198812762275, 7.9390178143512458e-05, 0.00011053885100409389, 0.00011122537398478016, 0.00014109739277046174, 8.608583448221907e-05, 0.00010208693129243329, 0.00011136823741253465, 7.4821538873948157e-05, 0.00018247573461849242, 8.8550863438285887e-05, 0.00010464826482348144, 7.5790034316014498e-05, 0.0001783531770342961, 0.0001492426818003878, 0.00012003921438008547, 0.00010477309842826799, 0.00012302561663091183, 0.00010310258221579716, 7.4573719757609069e-05, 0.00012038075510645285, 7.3373572377022356e-05, 9.4824346888344735e-05, 7.1230642788577825e-05, 7.7661497925873846e-05, 0.00012308597797527909, 7.2750917752273381e-05, 5.3235347877489403e-05, 6.2833503761794418e-05, 0.00026387823163531721, 0.00017476672655902803, 8.1566300650592893e-05, 6.2780993175692856e-05, 7.1773276431486011e-05, 7.4961972131859511e-05, 8.4125545981805772e-05, 8.9702232799027115e-05, 5.9729023632826284e-05, 0.00011091715714428574, 0.00011093547072960064, 9.7153708338737488e-05, 7.9764860856812447e-05, 0.00019475143926683813, 8.2762104284483939e-05, 5.9654445067280903e-05, 0.00022208361770026386, 8.1441859947517514e-05, 0.00019343316671438515, 0.00010703439329518005, 0.00011620832810876891, 0.0001045969474944286, 3.8707756175426766e-05, 7.9066085163503885e-05, 0.00026660601724870503, 9.9650838819798082e-05, 3.9984868635656312e-05, 0.00010098712664330378, 5.8007179177366197e-05, 6.9374196755234152e-05, 6.8956207542214543e-05, 0.00010349261719966307, 6.2896680901758373e-05, 0.00020740648324135691, 5.4095940868137404e-05, 8.2119797298219055e-05, 0.00017714845307637006, 0.00010441090125823393, 9.8582248028833419e-05, 0.00010271277278661728, 0.00012068214709870517, 9.8035947303287685e-05, } };
const TfArray<96, int> quant23_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data24[1*3*3*96] = { 
  /* [0][0][][] */ 36,114,27,127,-70,108,8,-34,-110,66,-127,127,-26,4,30,-47,0,-7,-16,-63,-34,-45,-35,-89,4,-24,-103,-41,1,24,-36,10,22,53,89,-88,35,16,-4,-19,50,27,-7,-14,-61,-49,-25,72,-35,-60,-36,-108,-127,-124,15,21,65,-59,127,-82,48,11,-40,39,-30,-34,25,15,48,67,-14,1,-8,127,7,86,9,-66,-13,33,-53,-39,-93,33,-5,-127,-50,39,-108,14,14,0,-9,0,28,-25, 16,123,31,-3,-91,103,34,-21,36,126,-96,3,-13,25,8,19,73,16,-60,-66,-44,81,-21,127,14,5,7,35,-3,49,-127,11,-9,16,34,-99,20,-91,2,-8,-5,6,-19,117,-44,-43,9,127,127,-13,-4,-44,24,-127,31,10,78,-64,23,-68,28,-68,-27,127,127,-1,24,63,14,70,-36,127,-73,-19,81,-100,-80,23,6,14,119,-10,86,37,-35,-99,-76,-22,-91,28,11,-23,51,-15,-18,15, -1,127,10,118,-94,-5,-6,-56,-127,94,-88,115,8,18,-30,-1,33,-16,18,-60,-38,-30,-40,38,23,1,-73,-37,21,9,-36,-31,-1,43,-49,-33,33,-46,-16,1,28,-59,-78,-12,-27,-54,39,61,-12,15,-11,-127,-23,33,-12,-24,43,-56,110,78,-114,-10,-127,-66,-27,-47,0,-13,8,78,12,-2,1,98,47,-27,-22,-109,17,-27,-19,19,-127,-45,108,69,-97,20,59,6,2,0,-6,-14,6,24, 
  /* [0][1][][] */ 118,127,104,-92,-127,-29,127,-55,53,-62,3,43,-18,127,127,127,-41,-48,110,-117,-127,127,-57,-71,-42,99,-36,33,0,-11,33,27,127,70,85,127,127,127,127,92,69,127,127,-127,45,127,-78,19,-78,-19,-24,114,59,72,127,126,11,-47,54,95,13,127,-31,121,-27,-17,127,127,127,105,-127,-32,117,49,15,60,127,127,-127,127,57,-6,-40,127,-29,-1,65,127,41,14,-103,-92,-10,119,25,-49, -32,-48,-20,-19,-95,-127,5,-127,-63,9,74,5,-65,-63,-33,-51,7,-127,41,2,122,117,127,-117,-89,127,-127,127,-24,127,110,127,-23,65,-74,5,10,-49,-19,127,10,-35,0,-113,24,-7,-50,-48,103,83,-127,-42,-90,-67,17,42,-127,127,60,-64,99,-11,-85,-104,-86,-13,-51,-36,56,-127,42,10,-99,-54,-127,-18,-58,-68,10,-7,93,-127,74,8,-38,79,92,59,-119,-60,-127,-127,58,-127,-75,-71, 46,112,-127,-54,-124,22,-123,-71,75,-72,14,116,127,117,-111,-40,-26,-45,-127,-20,-83,92,-53,8,127,37,-26,-26,127,6,42,12,-61,79,-127,8,-71,-62,26,104,127,-1,-16,-120,22,-64,127,-33,-37,127,98,126,114,120,-96,-127,-7,-89,74,127,-36,113,101,2,-9,-11,-64,-113,69,23,126,-44,-109,53,32,47,126,101,105,-69,114,99,31,-18,127,54,127,49,60,36,-59,-57,17,-14,-31,127, 
  /* [0][2][][] */ 28,46,41,95,-20,64,9,-44,55,-34,108,98,-23,2,13,-33,39,-2,5,0,24,-118,-18,-48,7,1,23,1,-7,10,12,-17,24,-12,75,54,101,-6,1,-35,30,31,60,8,-25,-56,-53,-44,-19,-41,30,27,8,24,-4,42,45,-18,-34,55,-127,34,-33,-89,-26,-22,13,9,64,93,-50,-25,20,52,9,-127,-1,26,-13,36,-123,-25,-85,47,0,56,-37,12,98,20,-3,16,-31,7,81,-25, 127,-30,12,-13,39,25,-39,-97,3,-127,-97,-1,6,-18,12,-13,127,19,-34,-110,-1,58,-13,91,14,-108,-94,-114,10,73,36,2,-9,-82,52,55,26,15,17,39,-5,30,-12,32,127,-39,-5,-26,-87,-33,-18,32,68,-25,26,-59,18,-109,47,78,-92,-70,-38,-6,37,-127,24,-30,2,68,-61,-21,127,-21,105,51,70,-51,-58,-10,30,-5,72,-44,55,11,-70,-20,106,127,-5,-22,127,-13,127,50, -26,86,-2,62,-21,14,-13,-1,48,-21,103,97,-4,17,-19,-6,76,-8,-7,127,18,-116,-24,-4,8,-10,-65,32,18,-4,80,8,9,-127,-50,-100,-24,-23,-6,-30,33,16,-10,-12,31,-41,72,-15,48,76,0,17,24,60,-3,-29,82,-26,-55,-20,0,23,91,-66,-35,-61,-61,-10,-27,113,36,-3,-22,48,27,86,9,22,14,2,-127,20,53,-60,31,44,-96,-15,127,8,-24,16,-13,-8,77,-20, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant24_scale = { 96, { 0.0085182972252368927, 0.0047014658339321613, 0.013278582133352757, 0.013693210668861866, 0.006603520829230547, 0.0099033145233988762, 0.035511575639247894, 0.02522764727473259, 0.01269227359443903, 0.013038025237619877, 0.010703597217798233, 0.0066739534959197044, 0.011634845286607742, 0.0053546256385743618, 0.015244555659592152, 0.013328154571354389, 0.0063265734352171421, 0.015945348888635635, 0.024062082171440125, 0.0060257879085838795, 0.0063903876580297947, 0.0038522693794220686, 0.012093618512153625, 0.010327502153813839, 0.012272764928638935, 0.011717625893652439, 0.0076387687586247921, 0.010635833255946636, 0.010701889172196388, 0.013576117344200611, 0.0082830116152763367, 0.0098226061090826988, 0.010715635493397713, 0.007199182640761137, 0.017557460814714432, 0.0085201915353536606, 0.010069052688777447, 0.0072923698462545872, 0.017160795629024506, 0.01435984019190073, 0.011549939401447773, 0.010081063956022263, 0.01183728501200676, 0.009920329786837101, 0.0071753384545445442, 0.011582802049815655, 0.0070598623715341091, 0.0091238142922520638, 0.0068536740727722645, 0.0074724382720887661, 0.011843092739582062, 0.0069999517872929573, 0.0051222015172243118, 0.0060457172803580761, 0.02538985013961792, 0.016815714538097382, 0.0078481510281562805, 0.0060406648553907871, 0.0069058849476277828, 0.007212695199996233, 0.0080943964421749115, 0.008630974218249321, 0.0057470104657113552, 0.010672233067452908, 0.01067399512976408, 0.0093479407951235771, 0.00767481978982687, 0.018738605082035065, 0.007963208481669426, 0.0057398346252739429, 0.021368453279137611, 0.0078361770138144493, 0.018611762672662735, 0.01029864139854908, 0.011181339621543884, 0.010064114816486835, 0.0037243850529193878, 0.0076075848191976547, 0.025652311742305756, 0.0095882099121809006, 0.0038472663145512342, 0.0097167845815420151, 0.005581337958574295, 0.0066750501282513142, 0.0066348318941891193, 0.0099578583613038063, 0.0060517960228025913, 0.019956247881054878, 0.0052050063386559486, 0.0079014068469405174, 0.017044879496097565, 0.010046213865280151, 0.0094853918999433517, 0.0098828235641121864, 0.011611801572144032, 0.0094328280538320541, } };
const TfArray<96, int> quant24_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data25[96] = { 4868, 12670, 6701, 2362, 1383, 3796, 1371, -2570, 15424, 2600, 4864, 4920, 3285, 3256, 11805, -894, 6103, 2840, 3653, 5318, 1176, 5243, 4427, 4256, 7179, -4196, -1359, 1551, 3378, -134, 5807, 3640, -3100, 2533, 2197, 3508, 1526, 1557, -34, -3786, 2152, -226, -1450, 2375, 8524, 7305, 1163, 15187, 2886, 4842, 2514, 9450, 3457, 6111, 1514, 1796, 10274, 4379, 6769, 3618, 4781, -1563, 4584, 1897, 9173, 1734, 3402, 6404, 3835, 11062, 4438, 3284, -3037, -590, 457, 253, 826, 3230, 6208, 2621, 2886, 3752, 2952, 936, 3348, 7610, 3701, -5094, 6459, 6647, 2278, 13025, 2130, 2657, 4115, 4280, };
const TfArray<1, int> tensor_dimension25 = { 1, { 96 } };
const TfArray<96, float> quant25_scale = { 96, { 6.7348744778428227e-05, 6.5767053456511348e-05, 9.1404821432661265e-05, 4.2907948227366433e-05, 9.1237401647958905e-05, 5.5705513659631833e-05, 6.1446073232218623e-05, 2.7130325179314241e-05, 3.4414195397403091e-05, 6.2670864281244576e-05, 6.9553243520203978e-05, 4.9267233407590538e-05, 7.5644435128197074e-05, 0.00014184189785737544, 5.9174013586016372e-05, 7.5618532719090581e-05, 8.8069798948708922e-05, 0.0001198655809275806, 7.7785567555110902e-05, 7.4735944508574903e-05, 9.7999210993293673e-05, 0.00011290815018583089, 0.00013735961692873389, 6.579978798981756e-05, 8.4454455645754933e-05, 7.6040647400077432e-05, 6.3793464505579323e-05, 0.00011989871563855559, 6.1060054576955736e-05, 3.8969043089309707e-05, 6.8029483372811228e-05, 9.3227914476301521e-05, 7.6022835855837911e-05, 0.00012839464761782438, 4.3592557631200179e-05, 5.310225606081076e-05, 6.5310894569847733e-05, 9.2799215053673834e-05, 7.9903817095328122e-05, 8.9311724877916276e-05, 7.0894981035962701e-05, 9.8975389846600592e-05, 7.0157177106011659e-05, 4.8218957090284675e-05, 7.0923691964708269e-05, 4.4604428694583476e-05, 9.1178240836597979e-05, 3.4794578823493794e-05, 8.1106329162139446e-05, 9.1173897089902312e-05, 6.8836619902867824e-05, 6.9102497946005315e-05, 0.00014048711454961449, 6.0125254094600677e-05, 6.6217478888574988e-05, 6.7470136855263263e-05, 7.1332215156871825e-05, 0.00011608345084823668, 6.1787359300069511e-05, 9.7811331215780228e-05, 5.7831577578326687e-05, 7.0900692662689835e-05, 6.0445916460594162e-05, 7.256447133840993e-05, 7.357343565672636e-05, 0.00012871671060565859, 7.2054237534757704e-05, 6.6878099460154772e-05, 8.0435791460331529e-05, 6.5898610046133399e-05, 4.1942326788557693e-05, 0.00010587243014015257, 6.1043538153171539e-05, 4.418108073878102e-05, 9.4097253168001771e-05, 0.000102612902992405, 0.00019150529988110065, 0.00010466649837326258, 5.8466914197197184e-05, 9.7781135991681367e-05, 0.00014175214164424688, 6.833420047769323e-05, 7.7429009252227843e-05, 8.0106648965738714e-05, 9.1753689048346132e-05, 7.0396868977695704e-05, 0.0001071898514055647, 2.9174838346079923e-05, 7.9227422247640789e-05, 0.00010017748718382791, 6.6432825406081975e-05, 6.9721812906209379e-05, 6.8806963099632412e-05, 8.4974788478575647e-05, 4.9605881940806285e-05, 7.5661082519218326e-05, } };
const TfArray<96, int> quant25_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ -10,12,72,-89,-42,74,57,110,-8,35,-54,22,-127,17,57,98, 
  /* [1][0][][] */ 26,99,127,44,7,51,-74,-80,62,-14,-34,12,72,47,15,-38, 
  /* [2][0][][] */ 23,4,-79,-108,46,21,13,13,-44,-16,124,127,116,51,-47,-17, 
  /* [3][0][][] */ 14,51,18,69,65,-43,127,-5,15,10,-4,-36,7,-48,-31,-78, 
  /* [4][0][][] */ -13,34,57,-24,-20,-3,-64,0,76,11,54,-65,-69,-127,-60,33, 
  /* [5][0][][] */ 66,-93,78,3,-21,-75,-9,-37,-65,-15,78,59,113,90,-121,-127, 
  /* [6][0][][] */ -60,127,-2,14,21,45,6,0,-2,20,38,-26,23,-40,29,8, 
  /* [7][0][][] */ 102,127,-26,31,82,103,93,83,59,-18,-58,-44,33,-24,-38,12, 
  /* [8][0][][] */ 127,24,79,-35,-10,33,23,68,119,-8,109,5,-2,-107,-8,-25, 
  /* [9][0][][] */ -8,94,-29,-25,60,127,-29,33,-44,34,21,-47,25,10,39,38, 
  /* [10][0][][] */ -62,127,-1,29,-45,10,5,51,75,46,-18,-65,-82,-22,23,-46, 
  /* [11][0][][] */ 88,19,67,91,28,41,8,3,103,39,58,-72,63,79,-49,127, 
  /* [12][0][][] */ -16,-52,-111,37,-25,86,-18,-66,41,-127,69,71,-87,9,7,4, 
  /* [13][0][][] */ -30,-1,-29,-12,-29,83,-50,40,-67,-81,-18,-127,-3,-52,56,61, 
  /* [14][0][][] */ 18,-127,-18,31,82,-21,47,39,74,93,-38,46,119,96,-25,-121, 
  /* [15][0][][] */ -24,-21,-35,44,50,-63,11,69,9,-19,-127,11,-81,75,21,-68, 
  /* [16][0][][] */ -127,-24,-43,-3,55,29,-12,8,-23,-46,36,-4,-30,100,-49,-6, 
  /* [17][0][][] */ 18,32,70,34,-45,87,58,-16,-13,53,32,13,-127,-37,-29,47, 
  /* [18][0][][] */ 18,127,51,-35,-50,27,-17,-16,80,18,-20,19,43,-80,0,14, 
  /* [19][0][][] */ -45,40,-104,-96,87,-16,106,59,-24,-23,96,18,-71,127,-87,90, 
  /* [20][0][][] */ 90,105,-127,101,-66,-107,1,24,19,-61,-50,-18,50,17,98,-72, 
  /* [21][0][][] */ -82,5,43,-41,-7,7,22,99,17,19,-127,-54,-3,29,32,-27, 
  /* [22][0][][] */ -58,-6,-2,96,46,-40,48,-127,82,-113,10,-32,71,74,23,-66, 
  /* [23][0][][] */ -65,-67,2,-37,3,53,22,8,63,-107,55,38,-127,-40,-18,53, 
  /* [24][0][][] */ -52,-22,30,7,-2,-72,-35,-68,28,61,-83,0,37,-32,-127,-13, 
  /* [25][0][][] */ -35,-7,-76,127,116,3,72,-36,-50,8,-49,-19,-20,-14,-21,41, 
  /* [26][0][][] */ 90,4,-35,-27,-60,8,-127,32,50,103,106,44,-23,-94,-57,-2, 
  /* [27][0][][] */ 7,-9,-127,-17,20,33,19,-16,-40,-33,-28,7,-14,-35,-69,-41, 
  /* [28][0][][] */ -34,-26,90,23,7,127,-58,88,85,-6,15,-84,82,-70,92,110, 
  /* [29][0][][] */ 96,-91,53,-19,-15,-109,-76,-42,-127,31,-23,-9,18,14,23,41, 
  /* [30][0][][] */ -13,-42,-26,-127,-83,-39,-22,-19,-10,-21,33,-30,-38,-21,-37,43, 
  /* [31][0][][] */ -127,-18,-94,-22,22,39,12,52,25,-34,51,41,-64,1,-9,-43, 
  /* [32][0][][] */ -48,-19,60,-28,10,-81,-52,62,127,-48,-21,-33,-27,47,-86,98, 
  /* [33][0][][] */ 34,23,79,103,38,42,-127,6,57,31,-63,-14,-2,99,19,40, 
  /* [34][0][][] */ -61,87,-27,30,4,127,-44,95,-8,63,-7,-109,-27,-75,55,38, 
  /* [35][0][][] */ 69,-34,127,-43,22,-44,63,-110,-88,-17,7,-76,12,-11,-65,-113, 
  /* [36][0][][] */ -40,-43,-8,3,-2,110,-102,3,89,-61,18,16,-12,-29,127,46, 
  /* [37][0][][] */ 36,79,31,126,34,-127,109,-25,-4,-4,18,6,-47,18,3,-34, 
  /* [38][0][][] */ 0,127,-1,11,46,-10,-14,-1,-46,41,34,-25,-16,-18,36,-57, 
  /* [39][0][][] */ 79,-7,-39,9,17,-29,-2,-44,-127,19,-111,-15,67,-22,6,41, 
  /* [40][0][][] */ -17,33,49,-34,14,1,78,15,8,57,127,13,-8,17,-13,-88, 
  /* [41][0][][] */ -29,-127,-50,-16,16,26,13,-16,6,1,-76,33,18,36,-51,-21, 
  /* [42][0][][] */ 21,1,-10,-17,-18,40,-2,-93,81,-127,38,11,-44,-5,108,33, 
  /* [43][0][][] */ -65,112,-32,-44,5,14,7,-18,-30,20,127,-124,16,-96,41,54, 
  /* [44][0][][] */ -84,127,30,-3,-109,109,51,-118,-9,7,6,-24,57,3,-96,116, 
  /* [45][0][][] */ 12,6,63,-15,-24,-19,-16,-89,-108,-127,-50,-12,30,-9,-79,-107, 
  /* [46][0][][] */ 77,11,74,36,-52,127,-69,23,-78,72,-81,-3,-125,17,-21,-16, 
  /* [47][0][][] */ 82,14,-22,-98,-44,6,-54,-57,9,-69,-127,37,13,47,104,1, 
  /* [48][0][][] */ -59,49,28,13,-127,73,-110,-52,92,54,60,26,70,-95,-13,-29, 
  /* [49][0][][] */ 0,76,-71,49,-60,-40,47,66,48,127,-68,26,-26,38,79,35, 
  /* [50][0][][] */ -13,-56,-4,-29,-39,46,-28,16,62,-45,45,-60,2,39,83,127, 
  /* [51][0][][] */ 5,-80,23,76,19,7,76,62,-3,91,10,22,63,127,-73,-46, 
  /* [52][0][][] */ 119,-94,9,-127,-4,26,-85,33,59,-13,-57,-60,21,-20,-11,-38, 
  /* [53][0][][] */ -37,97,-13,-49,-88,-66,-62,110,16,-7,72,2,-127,7,83,79, 
  /* [54][0][][] */ -54,68,-1,111,3,-52,-39,46,30,-26,40,-127,2,-40,37,11, 
  /* [55][0][][] */ 9,-21,-1,6,81,0,-39,-8,6,44,72,-81,-56,-127,88,-36, 
  /* [56][0][][] */ -2,-11,-88,17,22,-34,95,-80,17,39,18,71,125,13,127,-90, 
  /* [57][0][][] */ -42,-56,34,-28,-57,39,40,14,85,-14,35,13,44,127,-83,5, 
  /* [58][0][][] */ -56,29,-75,-127,89,-25,-76,-66,-82,-116,42,16,-80,-99,-32,29, 
  /* [59][0][][] */ -127,69,123,23,-10,9,-65,22,-47,-23,17,-22,-28,-79,4,-23, 
  /* [60][0][][] */ -107,-65,-54,106,-50,122,127,-38,81,-85,9,-15,31,89,-10,116, 
  /* [61][0][][] */ 0,93,-37,66,29,-25,39,-5,109,-127,-19,-54,-8,21,-37,-64, 
  /* [62][0][][] */ -24,20,-27,-79,-15,59,-1,-46,127,81,114,40,-59,-28,2,55, 
  /* [63][0][][] */ 3,50,4,19,-10,38,55,-38,22,0,9,8,33,63,-127,-43, 
  /* [64][0][][] */ 114,19,94,26,65,-54,83,20,23,-17,-3,-101,-8,-26,54,127, 
  /* [65][0][][] */ 55,-12,-4,-38,-84,-24,49,-84,31,-34,127,35,7,40,60,-61, 
  /* [66][0][][] */ -28,-92,57,-127,42,-7,49,-3,24,-4,23,33,23,-51,67,76, 
  /* [67][0][][] */ 34,17,-43,-76,-63,-41,31,107,45,78,34,-5,0,44,-127,2, 
  /* [68][0][][] */ 61,-2,7,43,-23,47,-45,-3,-43,-26,35,80,-127,44,-21,20, 
  /* [69][0][][] */ 17,11,-127,13,52,51,-47,53,-6,66,-67,39,28,97,-50,-126, 
  /* [70][0][][] */ -107,-42,102,57,108,69,97,23,-62,74,96,-79,3,-127,42,48, 
  /* [71][0][][] */ 47,0,-7,24,-103,-83,-14,-121,98,9,127,70,35,15,-58,-7, 
  /* [72][0][][] */ 127,5,6,-75,59,114,-19,58,49,-53,10,-83,3,40,-10,-32, 
  /* [73][0][][] */ -7,127,-53,-6,-43,-24,101,101,74,42,-72,-48,-69,-75,13,-97, 
  /* [74][0][][] */ 38,-92,-120,-37,-127,36,-75,-17,45,0,-67,-35,3,56,-60,-10, 
  /* [75][0][][] */ 33,-6,127,10,-46,10,-53,-17,-31,-13,6,-56,22,-53,41,30, 
  /* [76][0][][] */ 34,-22,45,43,18,-127,83,29,71,82,-66,-8,-54,-35,57,-47, 
  /* [77][0][][] */ -78,26,-79,-53,-5,21,55,-29,-39,-23,-92,-56,-47,-127,-106,43, 
  /* [78][0][][] */ 10,11,37,-35,-31,94,18,-50,15,26,83,-23,27,-127,64,7, 
  /* [79][0][][] */ 46,-82,9,55,92,-14,-20,-73,54,92,40,-1,43,80,78,127, 
  /* [80][0][][] */ -44,-35,-24,39,-15,41,16,30,-24,-68,-127,5,36,-84,44,12, 
  /* [81][0][][] */ -16,-21,38,-11,30,-39,-11,-30,127,12,80,72,-49,7,79,47, 
  /* [82][0][][] */ -72,51,108,26,74,89,-30,8,-34,-127,-112,76,81,-97,-108,-47, 
  /* [83][0][][] */ 9,32,37,-22,-2,-111,-70,31,-92,-59,66,-127,39,55,11,45, 
  /* [84][0][][] */ -70,79,-8,-18,3,-11,51,85,-127,25,-126,27,-31,32,-90,53, 
  /* [85][0][][] */ 105,-79,21,-19,-3,-39,58,53,-127,-12,15,-105,-37,-125,32,-24, 
  /* [86][0][][] */ -24,11,19,-120,-52,57,21,-127,-47,-13,106,54,42,-34,-37,55, 
  /* [87][0][][] */ 56,79,-40,67,18,92,15,4,-7,38,31,-127,74,-96,7,53, 
  /* [88][0][][] */ -45,68,-18,-127,55,-70,64,-25,-106,23,-79,-54,92,-22,16,-61, 
  /* [89][0][][] */ 101,45,-124,-127,29,-13,-5,-83,-119,-79,72,18,-7,-25,11,16, 
  /* [90][0][][] */ -16,-38,-47,-48,-80,59,-45,16,-7,74,20,-107,21,-127,8,15, 
  /* [91][0][][] */ 127,16,74,7,26,97,16,10,-15,0,54,27,-116,85,-29,21, 
  /* [92][0][][] */ 40,-21,90,4,-21,-49,70,-40,60,25,81,-37,-2,7,-67,-127, 
  /* [93][0][][] */ -37,28,127,26,-25,36,4,-29,-72,-39,27,38,-5,-16,-30,-31, 
  /* [94][0][][] */ -127,-12,-90,7,59,-47,32,93,105,-102,25,111,-67,-3,13,72, 
  /* [95][0][][] */ -1,-82,-56,-18,-39,13,45,8,127,24,43,52,69,50,-54,0, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0021959028672426939, 0.0021443318109959364, 0.0029802501667290926, 0.0013990117004141212, 0.0029747914522886276, 0.0018162757623940706, 0.0020034464541822672, 0.00088458304526284337, 0.001122073270380497, 0.0020433806348592043, 0.0022677804809063673, 0.0016063558869063854, 0.0024663833901286125, 0.0046247486025094986, 0.0019293660297989845, 0.0024655389133840799, 0.0028715119697153568, 0.0039082118310034275, 0.0025361948646605015, 0.0024367622099816799, 0.003195259952917695, 0.003681365167722106, 0.0044786040671169758, 0.0021453991066664457, 0.0027536337729543447, 0.0024793019983917475, 0.0020799830090254545, 0.0039092921651899815, 0.00199086032807827, 0.0012705839471891522, 0.0022180983796715736, 0.0030396920628845692, 0.0024787210859358311, 0.0041863019578158855, 0.0014213334070518613, 0.0017313966527581215, 0.0021294588223099709, 0.0030257143080234528, 0.0026052603498101234, 0.0029120047111064196, 0.0023115277290344238, 0.0032270881347358227, 0.002287471666932106, 0.0015721769304946065, 0.0023124637082219124, 0.0014543253928422928, 0.0029728624504059553, 0.0011344756931066513, 0.0026444683317095041, 0.0029727208893746138, 0.0022444149944931269, 0.0022530837450176477, 0.0045805759727954865, 0.0019603811670094728, 0.0021590178366750479, 0.002199860755354166, 0.0023257837165147066, 0.0037848956417292356, 0.0020145741291344166, 0.0031891341786831617, 0.0018855959642678499, 0.0023117139935493469, 0.0019708364270627499, 0.0023659614380449057, 0.0023988585453480482, 0.0041968026198446751, 0.0023493252228945494, 0.0021805574651807547, 0.0026226053014397621, 0.0021486212499439716, 0.0013675276422873139, 0.0034519657492637634, 0.0019903217907994986, 0.001440522144548595, 0.0030680366326123476, 0.0033456890378147364, 0.0062440219335258007, 0.0034126464743167162, 0.0019063111394643784, 0.0031881495378911495, 0.0046218223869800568, 0.0022280334960669279, 0.0025245693977922201, 0.002611873671412468, 0.0029916248749941587, 0.0022952868603169918, 0.0034949202090501785, 0.00095124432118609548, 0.0025832066312432289, 0.0032662826124578714, 0.0021660393103957176, 0.0022732766810804605, 0.0022434480488300323, 0.0027705992106348276, 0.0016173975309357047, 0.0024669261183589697, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data27[16] = { -41238, 14171, 27488, 8955, 18744, 35092, 2990, 68972, 26328, -72125, -31747, 25284, -5063, -2507, 25604, -10919, };
const TfArray<1, int> tensor_dimension27 = { 1, { 16 } };
const TfArray<16, float> quant27_scale = { 16, { 5.4619020374957472e-05, 5.0915801693918183e-05, 4.4941411033505574e-05, 7.8437646152451634e-05, 7.096395711414516e-05, 4.7520181396976113e-05, 7.1837217546999454e-05, 4.712849113275297e-05, 6.0755101003451273e-05, 4.7174682549666613e-05, 7.5133400969207287e-05, 4.0536073356634006e-05, 8.73143071657978e-05, 4.6345547161763534e-05, 5.487349335453473e-05, 6.3779058109503239e-05, } };
const TfArray<16, int> quant27_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data28[16*1*1*96] = { 
  /* [0][0][][] */ 17,15,13,17,20,-32,-34,-66,7,104,27,47,36,-25,-4,56,12,-68,-20,59,-25,127,-21,-10,-11,38,32,58,45,-10,-7,-9,73,-23,-20,-12,-50,-23,66,-81,-21,-4,34,-73,-31,-52,11,15,63,58,78,-1,-26,25,0,66,32,-6,-43,-56,17,70,-9,-2,51,18,-15,9,28,-28,-9,43,-24,-76,15,-72,1,20,55,-38,-8,-41,-23,51,40,23,-48,-20,-44,-38,6,107,99,-18,-53,-24, 
  /* [1][0][][] */ 19,-13,14,-20,41,-42,-11,24,-6,7,13,6,-14,21,-4,-105,57,49,-24,36,-9,-2,28,-18,51,32,-4,23,-34,27,13,-6,20,-86,-7,-41,-24,-31,-79,-107,-7,-18,-92,-74,-22,-50,11,-26,-50,23,-59,-19,58,-59,32,-41,47,-43,-30,68,-25,13,-12,21,30,-4,41,-29,32,-26,3,36,127,0,49,-38,35,-16,46,-90,6,13,-12,-54,24,4,-60,-15,-6,-4,-67,-13,103,17,-24,-75, 
  /* [2][0][][] */ 3,-29,28,2,-42,-18,-9,-7,-29,-4,3,-18,-42,14,28,13,103,15,-63,62,-76,6,-23,42,-26,-57,-63,-62,31,-38,-11,-24,-81,-2,-80,-18,-27,-20,-36,117,-30,11,-20,-12,-32,-27,-82,31,22,-120,-33,4,-117,-6,-9,-11,-124,-36,104,41,-3,-21,65,-19,-44,35,-4,-44,78,0,-59,-56,76,-30,-52,79,1,-33,50,127,-3,25,8,-57,-39,-54,41,-1,22,15,-59,24,27,-6,27,-39, 
  /* [3][0][][] */ 22,-35,-7,4,-15,-31,-16,-18,-2,-50,15,-4,0,5,-5,29,-3,-32,-1,37,66,-57,-33,8,-3,11,-13,49,3,1,-11,-6,3,42,-32,9,1,2,14,7,-29,-18,-55,-11,69,-37,69,10,-23,16,11,3,8,-11,-5,40,-20,-15,10,42,6,-25,-3,-58,39,-25,26,12,-89,-11,-25,5,-41,-25,0,42,46,-39,30,74,23,5,-9,44,20,-7,29,28,-3,-48,-7,-8,9,-3,-127,1, 
  /* [4][0][][] */ -1,20,-27,6,17,-33,-127,-12,-41,0,-3,21,-18,-16,14,6,-22,-13,-8,0,-20,5,2,-18,-12,-41,-4,53,44,36,-27,-19,28,-8,14,-15,-7,1,-10,47,-46,-12,6,-28,24,-8,-53,-11,-52,-23,47,-48,10,-25,8,-16,-31,-8,0,46,-12,79,11,-38,1,-29,-30,-5,-27,-4,56,13,-2,-8,-4,36,-94,7,-30,-49,53,4,52,-31,4,-43,-9,7,-23,84,67,-10,23,6,28,-1, 
  /* [5][0][][] */ -4,27,-86,-13,60,-68,-12,33,25,95,-39,-14,-49,37,16,-69,-116,51,8,13,-19,-6,-23,-9,-121,14,-29,19,-29,-2,21,-1,114,41,-74,-29,32,6,66,-41,-3,-46,-6,98,-28,-2,9,12,-11,-55,-4,4,-93,-41,36,-47,-10,5,2,-61,42,30,5,0,36,-126,-37,23,-35,-24,76,127,-90,-36,-40,-9,79,37,107,-105,49,31,-31,-102,-23,-24,48,31,10,-18,-70,-56,-43,-50,-81,25, 
  /* [6][0][][] */ -5,20,-8,9,-20,16,-24,8,-7,-14,-16,21,-1,-2,15,-24,9,9,13,-59,-28,78,6,-18,13,76,-21,37,-17,26,-14,23,4,-3,38,77,-63,-34,-127,-90,-2,14,77,10,-20,26,30,-30,24,-2,-70,-8,-73,-41,-1,42,43,4,34,27,-47,25,-15,17,-6,-23,23,-4,53,-5,26,-3,-76,12,-14,-25,28,7,26,-35,-6,-3,36,74,-39,-8,2,-29,-8,-27,-11,-27,44,-3,-19,-2, 
  /* [7][0][][] */ -65,-52,24,-59,4,-22,-80,41,55,-96,26,-19,62,-9,12,-49,1,-25,-11,-21,-127,-104,0,-9,26,-49,-17,-51,-29,27,28,35,-9,-14,-20,54,24,-17,-26,7,-19,-6,7,-52,27,20,-12,-14,-45,-121,21,34,-87,50,-5,-18,-76,29,-7,-88,60,3,-20,3,-46,40,96,-54,52,-39,-48,-10,-79,-3,33,4,24,-32,-43,5,32,75,45,-121,0,-19,-9,-46,-20,-93,19,57,51,-3,-53,-110, 
  /* [8][0][][] */ -69,-81,-10,-18,12,-31,-1,15,-7,122,-16,0,33,-29,52,-127,27,-11,-8,33,-9,-50,-41,-1,22,-40,-29,17,-29,-48,-22,-10,74,-49,40,26,-4,-40,-54,-75,-7,-21,8,49,-11,6,116,-3,-57,-69,37,-10,-69,41,12,21,34,-4,36,-53,-45,-47,-48,-25,-63,-20,-2,-3,-72,-10,-11,40,37,-10,-32,47,-8,52,-66,-31,4,-27,1,62,-53,16,-31,17,28,36,4,0,-2,-22,-13,5, 
  /* [9][0][][] */ -12,76,33,-2,43,-19,23,44,21,47,31,63,59,-10,-30,-28,-16,-16,60,-12,111,127,53,86,45,32,-52,-23,29,28,102,15,95,17,3,82,103,99,29,-36,35,1,20,-74,40,40,67,46,47,-94,63,87,-36,90,-49,42,-38,26,32,116,-6,-6,0,21,-1,39,-69,75,-41,36,-47,14,95,-15,33,88,-94,-96,48,19,-46,7,9,-51,7,22,-49,37,2,36,-15,38,-19,47,-58,99, 
  /* [10][0][][] */ -6,-16,8,44,-15,-21,-55,-17,-11,-27,1,-6,-13,-2,1,-45,0,2,-1,92,24,66,-2,25,-9,9,-8,42,2,1,-48,-22,-13,47,70,10,-3,-19,24,-103,95,37,1,-6,6,-17,42,-9,30,19,47,36,-21,-1,24,-15,59,13,-22,7,21,-14,13,30,36,14,-7,-7,90,10,3,127,18,20,19,27,-25,-9,-3,-6,-26,-19,25,-16,19,9,37,-6,9,-4,5,-10,-6,-29,12,21, 
  /* [11][0][][] */ -71,-14,-76,40,-83,-21,40,-7,19,-60,-9,-19,19,-5,12,113,13,-73,-51,-2,34,-59,63,-38,-62,43,34,-124,31,-21,11,-23,-89,-91,8,-68,-9,-11,-4,50,2,-50,-22,-34,10,21,-10,-25,-10,-62,-84,59,-57,46,-41,-57,102,-10,127,-4,31,38,-60,-69,14,-119,32,25,42,-22,-3,55,64,-35,-60,-57,-73,-3,98,-35,-53,-45,-38,-15,-111,44,-66,1,35,7,75,75,-57,32,-91,89, 
  /* [12][0][][] */ 14,-12,-2,37,6,-8,3,-14,13,-15,13,11,-11,-2,-7,41,7,-19,-16,28,49,81,-15,0,-4,26,-6,28,30,-36,8,-5,-1,-8,77,11,8,-5,3,-26,-32,-9,48,24,10,-2,-4,0,-8,-18,-12,0,10,-32,-4,-11,30,-15,-30,38,37,-4,6,9,47,-22,-13,27,30,-8,10,-1,-4,-13,-18,25,61,7,-127,-4,6,9,-31,-34,-27,9,-5,-49,-11,-3,-48,15,22,26,-36,30, 
  /* [13][0][][] */ 50,-70,0,28,2,-26,-37,27,-41,-18,18,3,-3,15,29,97,-55,-13,72,35,-77,-52,20,-17,15,-34,20,-81,45,7,0,-32,-81,-25,7,-3,-5,-9,-2,-17,24,-5,50,14,8,-16,-23,-31,-105,-9,55,80,25,19,-36,120,-65,-41,-68,-85,-83,68,-12,17,-21,4,-42,97,54,48,-73,26,86,36,8,51,84,-33,67,5,-27,57,30,9,-82,18,-23,-18,-1,21,-95,-127,19,-40,79,71, 
  /* [14][0][][] */ -5,-14,-20,-50,-1,1,-1,17,26,6,43,62,-34,-9,25,83,-66,-16,19,43,-40,-84,-22,30,-30,66,37,-44,-33,6,-8,-15,-28,81,-46,6,27,54,-25,-64,-8,-28,-53,-59,-4,-22,-52,54,-127,-11,-105,50,-24,-73,-12,18,2,15,46,-31,36,-66,-15,125,-84,-9,-99,14,33,20,-48,-28,30,103,20,-63,-13,21,-20,0,-15,-21,38,21,116,26,10,-8,2,88,-36,34,-21,38,-15,-67, 
  /* [15][0][][] */ 55,3,37,20,-42,-20,-22,-22,-8,-17,46,26,27,-8,-15,67,77,-23,-11,-1,33,-50,1,-10,-4,6,50,30,5,-5,-46,-36,44,-43,34,73,3,-6,-25,-3,0,-20,-3,29,30,21,-21,-8,-39,-11,4,-31,44,24,14,-1,33,5,42,-10,-70,22,13,-25,63,127,-81,-2,-49,-24,7,-23,-18,-24,-16,-53,32,-11,51,46,6,-2,-53,-71,53,23,-49,21,-11,-9,-5,-22,60,32,20,15, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant28_scale = { 16, { 0.0038602361455559731, 0.003598508657887578, 0.0031762644648551941, 0.0055436338298022747, 0.0050154258497059345, 0.0033585210330784321, 0.0050771436654031277, 0.0033308379352092743, 0.0042939078994095325, 0.0033341024536639452, 0.0053101037628948689, 0.0028649142477661371, 0.0061709978617727757, 0.0032755029387772083, 0.0038782211486250162, 0.0045076278038322926, } };
const TfArray<16, int> quant28_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data29[96] = { 19142, 22432, 240, -1239, -18676, -6151, -20094, 13892, 36209, -7833, -24, -68, 27646, 1427, -887, -34094, -3708, -30, 35958, -9450, 17956, -9036, 42031, -4457, -6858, -9213, 25939, 28079, -17234, -1683, 10205, 5251, -4758, -3974, -10263, -3536, -1374, -1777, -5719, 8194, 32715, 15392, 27350, -217, 27655, 28010, 10589, -1424, 96, -15727, -8520, -15151, -8279, 27458, -6275, 31299, -426, 11973, 1430, -10249, 38668, -14455, 1172, 2384, 14524, -6439, -1136, 16302, 215, 16722, -9992, -5855, -12174, -3189, 28578, 26418, -144, 14598, -7131, -13064, -8904, -9591, -17886, -5489, 3290, 15786, -1319, -3592, -3794, -7852, -5097, -6467, 6016, -8179, -4284, -13583, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00010370399104431272, 8.4602048445958644e-05, 0.00010097392078023404, 0.00012113550474168733, 7.3348797741346061e-05, 8.589448407292366e-05, 6.0660680901492015e-05, 0.0001386229123454541, 4.1329993109684438e-05, 4.1036313632503152e-05, 0.00014160148566588759, 5.3854924772167578e-05, 5.0980634114239365e-05, 0.00011741145863197744, 0.00016607725410722196, 9.2057496658526361e-05, 5.8036028349306434e-05, 3.1341380235971883e-05, 3.4240772947669029e-05, 6.6830114519689232e-05, 0.00012049533688696101, 0.00010526548430789262, 3.879143696394749e-05, 4.9323760322295129e-05, 5.6395758292637765e-05, 9.7026058938354254e-05, 6.2679886468686163e-05, 6.2728744524065405e-05, 6.46273183519952e-05, 0.00010968964488711208, 2.1593685232801363e-05, 0.00010092253796756268, 8.5383486293721944e-05, 5.0484126404626295e-05, 7.9971898230724037e-05, 7.5391297286842018e-05, 5.8295736380387098e-05, 0.00010589547309791669, 7.0688729465473443e-05, 9.4709117547608912e-05, 5.7728371757548302e-05, 0.00010885564552154392, 7.3773720941971987e-05, 5.6979490182129666e-05, 6.0501955886138603e-05, 5.5005271860864013e-05, 7.9900775745045394e-05, 8.3111248386558145e-05, 5.7278259191662073e-05, 7.3955838161054999e-05, 6.2963234086055309e-05, 6.5609710873104632e-05, 8.4622879512608051e-05, 5.8847104810411111e-05, 0.00010729015775723383, 7.028494292171672e-05, 9.3577502411790192e-05, 9.6515948825981468e-05, 4.8464477004017681e-05, 8.4588216850534081e-05, 4.5740136556560174e-05, 6.9852576416451484e-05, 8.2155755080748349e-05, 8.2555030530784279e-05, 7.6718737545888871e-05, 0.00010179876699112356, 5.0424609071342275e-05, 7.1415881393477321e-05, 6.7878667323384434e-05, 6.9504952989518642e-05, 8.8293032604269683e-05, 8.3348102634772658e-05, 4.9399881390854716e-05, 5.2686562412418425e-05, 5.8715162595035508e-05, 0.00017278829182032496, 6.5404026827309281e-05, 0.00011590452049858868, 4.060206629219465e-05, 0.00010548771388130262, 7.7420801972039044e-05, 9.8496369901113212e-05, 8.4979590610601008e-05, 4.4097985664848238e-05, 6.0414706240408123e-05, 7.316160190384835e-05, 5.593458263319917e-05, 8.2486571045592427e-05, 8.8800174125935882e-05, 6.5641419496387243e-05, 4.9234749894822016e-05, 4.5946595491841435e-05, 4.777435606229119e-05, 2.8195048798806965e-05, 5.6199172831838951e-05, 9.5115552539937198e-05, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data30[1*3*3*96] = { 
  /* [0][0][][] */ -57,28,127,-24,112,-9,79,-44,-82,53,-127,20,-66,25,-42,78,-14,118,-115,74,-82,122,-102,57,110,96,-90,-56,127,71,114,127,72,79,-8,-41,54,41,93,5,-67,8,-92,100,-111,-127,4,-118,113,63,25,92,44,-127,102,-59,76,-33,100,113,-82,80,-111,93,-114,48,83,-114,42,-29,115,-25,69,-64,-83,-93,50,44,86,70,4,68,127,73,-40,16,-84,1,-72,107,42,18,87,27,-11,56, -44,-50,74,-51,99,-61,5,-109,-122,34,-31,105,-52,54,-127,70,48,98,-27,-29,-59,-21,-80,125,62,54,-101,-89,118,-9,49,-54,87,82,87,62,56,42,-60,-63,-104,23,-93,110,-94,39,61,9,71,92,79,118,-80,-88,94,-104,41,-10,91,116,-89,90,-59,-31,-66,30,106,-55,103,-85,-63,66,97,127,-46,-14,108,-77,55,-22,31,127,86,78,51,-70,87,-31,-28,87,106,115,19,102,84,-39, 4,48,76,9,91,-32,111,26,-72,92,-87,45,-75,96,49,87,83,127,-127,-56,-56,18,-90,75,73,-24,-97,-23,76,52,49,-8,-64,-47,-58,88,75,37,109,81,-26,23,-49,-47,79,-127,-127,-105,32,26,62,104,86,-50,127,52,-51,-127,-29,77,-12,84,-127,-58,21,-69,17,-60,46,-24,26,-63,55,-115,-83,-127,24,47,80,96,58,3,123,62,77,36,18,-8,-65,-12,-110,35,-75,56,74,107, 
  /* [0][1][][] */ -127,-114,-1,37,127,103,95,-61,-127,82,52,53,-117,-3,23,124,-34,68,-110,127,-127,127,-102,64,83,127,-92,-85,107,41,122,-58,84,118,19,-127,96,22,127,13,-94,-76,-127,127,-118,-110,51,-4,127,115,-127,103,74,-88,-45,-121,127,-30,109,127,-88,77,28,127,-127,127,124,-127,50,-127,127,31,112,-104,-111,-94,27,-121,127,69,109,62,90,67,-127,-96,-127,46,-29,127,113,62,127,93,-16,67, -109,-127,58,127,80,100,34,-127,-116,56,76,127,65,-116,24,88,76,82,-76,-106,-91,-18,-127,127,127,32,-127,-127,57,54,127,-17,74,108,127,117,82,127,-66,-127,-127,-54,-107,118,-127,6,73,31,35,127,110,127,-74,-119,31,-127,37,-11,127,10,-127,127,41,-26,-68,42,127,-23,127,-54,17,127,127,116,-127,-31,127,-127,88,-127,127,-26,98,127,80,-52,123,76,35,126,127,127,20,105,127,-22, 11,-24,-94,17,79,100,127,5,-115,127,-5,15,-127,-29,-19,127,127,48,-115,71,-53,29,-40,39,80,-11,-59,-63,53,44,102,-72,-127,-127,-37,90,127,52,116,97,-34,-127,6,-46,59,-99,-70,-9,-39,34,46,-65,127,-13,11,-51,-87,-22,-102,26,13,42,48,-79,44,-39,45,58,59,-83,16,-111,77,-103,-71,-117,65,-11,109,88,86,-9,122,102,100,-126,42,60,3,-57,-82,66,-101,127,106,127, 
  /* [0][2][][] */ -52,-112,-58,-85,26,-62,71,4,-71,60,89,28,-111,55,38,70,-7,-13,-36,98,-56,38,-29,-8,-7,39,-32,-68,22,-49,73,-108,17,40,-9,-40,38,-63,71,0,-50,-47,-83,80,-82,-37,24,127,59,58,-66,41,53,-71,-32,-91,70,-10,58,71,-46,0,10,62,-59,82,83,-46,32,-88,36,33,62,-68,-55,-1,-8,-118,87,8,-42,44,4,33,-43,-81,-60,-85,127,43,125,38,59,25,-13,33, -71,-97,-49,-120,-9,-107,42,-26,-10,25,30,46,-28,-14,45,32,39,8,-14,-107,-33,-8,-110,24,60,16,-50,-79,9,-127,75,-27,20,46,69,51,29,108,-31,-42,-54,-119,-60,35,-93,12,33,20,6,66,49,47,-62,-76,-47,-19,8,-83,93,-7,-66,65,1,-2,-45,29,46,-33,54,-59,-59,84,74,42,-117,6,42,-47,46,-68,0,6,29,63,42,-19,57,-127,28,62,63,46,19,45,76,-32, -17,16,-20,-39,2,-127,79,-13,-102,83,59,-24,-81,-127,-39,72,66,-49,-21,95,-4,-1,-18,-30,2,11,11,-44,9,-39,65,-20,-50,-46,-35,26,68,-11,58,27,-51,-83,-24,5,25,-88,-19,83,-6,-21,11,-54,82,-25,-9,-11,-65,-21,-46,24,60,-18,20,-50,11,-12,11,74,29,-83,38,-111,43,-64,-52,-26,50,-17,81,14,-36,10,8,68,65,-127,40,-76,109,-46,-75,65,-56,41,56,65, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant30_scale = { 96, { 0.0071915937587618828, 0.0058669252321124077, 0.0070022703148424625, 0.0084004225209355354, 0.0050865425728261471, 0.0059565519914031029, 0.0042066555470228195, 0.0096131274476647377, 0.0028661240357905626, 0.0028457583393901587, 0.0098196826875209808, 0.0037346945609897375, 0.003535370109602809, 0.0081421695649623871, 0.011517011560499668, 0.006383940577507019, 0.0040246429853141308, 0.0021734407637268305, 0.0023745056241750717, 0.0046344893053174019, 0.0083560282364487648, 0.0072998791001737118, 0.0026900821831077337, 0.0034204705152660608, 0.0039108945056796074, 0.0067284968681633472, 0.0043466817587614059, 0.0043500703759491444, 0.0044817309826612473, 0.0076066823676228523, 0.0014974641380831599, 0.0069987070746719837, 0.0059211156331002712, 0.0035009386483579874, 0.0055458364076912403, 0.0052281841635704041, 0.0040426529012620449, 0.0073435669764876366, 0.00490207364782691, 0.0065678232349455357, 0.0040033077821135521, 0.0075488472357392311, 0.0051160096190869808, 0.0039513749070465565, 0.0041956482455134392, 0.0038144679274410009, 0.005540904588997364, 0.0057635423727333546, 0.0039720935747027397, 0.005128638818860054, 0.0043663312681019306, 0.0045498576946556568, 0.0058683697134256363, 0.0040808888152241707, 0.007440284825861454, 0.0048740720376372337, 0.0064893485978245735, 0.0066931219771504402, 0.003360881470143795, 0.0058659659698605537, 0.0031719557009637356, 0.0048440885730087757, 0.0056972810998558998, 0.0057249697856605053, 0.0053202388808131218, 0.0070594712160527706, 0.0034968112595379353, 0.0049524996429681778, 0.00470720324665308, 0.0048199822194874287, 0.0061228848062455654, 0.0057799671776592731, 0.0034257492516189814, 0.0036536718253046274, 0.0040717390365898609, 0.011982404626905918, 0.0045355940237641335, 0.0080376677215099335, 0.0028156444896012545, 0.0073152901604771614, 0.0053689246997237206, 0.0068304589949548244, 0.005893106572329998, 0.0030580770689994097, 0.0041895979084074497, 0.0050735608674585819, 0.0038789133541285992, 0.0057202223688364029, 0.0061580538749694824, 0.004552056547254324, 0.0034142977092415094, 0.003186273155733943, 0.0033130233641713858, 0.0019552509766072035, 0.003897261805832386, 0.0065960083156824112, } };
const TfArray<96, int> quant30_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data31[96] = { 8475, 9777, -2392, 4899, 1901, 7246, 9566, 11368, 5028, 6244, -2788, 781, 299, 10749, 2359, 4390, 2289, 1506, 3304, 4592, 5051, 1718, 6647, -1146, 3046, -3209, 6413, 5278, 4252, 650, 822, 4447, 5451, 4103, -1337, 474, 1388, -1775, 3603, 13466, 4690, 7417, 5613, -1904, 7344, 10016, 11093, 5873, 437, 7507, 1913, 2093, 3984, 3097, 6226, 9084, 4267, 6524, -718, 2725, 1831, 4231, 6724, 372, 3138, 2319, -2159, 5937, -1031, 5345, -3217, 9673, 10316, -803, 347, 25162, 2517, 5865, 8900, 5959, 6512, 974, 6052, 5137, 3763, 4393, 4373, 7268, 817, 178, -1181, 5574, 4922, 2352, 5433, 1174, };
const TfArray<1, int> tensor_dimension31 = { 1, { 96 } };
const TfArray<96, float> quant31_scale = { 96, { 6.4473213569726795e-05, 6.58193021081388e-05, 7.4253031925763935e-05, 9.0887151600327343e-05, 9.0825793449766934e-05, 6.7335982748772949e-05, 5.3422958444571123e-05, 4.5398253860184923e-05, 0.00010195572394877672, 9.8098236776422709e-05, 5.6565208069514483e-05, 0.00012835056986659765, 0.00010997401841450483, 7.8933328040875494e-05, 7.7136202889960259e-05, 9.4973394880071282e-05, 0.00014876209024805576, 0.00012350744509603828, 0.00019537223852239549, 0.00010969096911139786, 6.6688786318991333e-05, 7.4501760536804795e-05, 8.897951920516789e-05, 0.00017479919188190252, 7.7281161793507636e-05, 8.8030086772050709e-05, 5.9374899137765169e-05, 8.9562781795393676e-05, 8.441202953690663e-05, 0.00011588529014261439, 0.00012914239778183401, 8.6851105152163655e-05, 7.8226119512692094e-05, 9.6201089036185294e-05, 0.00010225960431853309, 6.9002868258394301e-05, 9.7179567092098296e-05, 7.9791534517426044e-05, 8.0109210102818906e-05, 5.0286704208701849e-05, 9.1157940914854407e-05, 6.9175388489384204e-05, 6.2794708355795592e-05, 7.680277485633269e-05, 6.7425506131257862e-05, 6.1150451074354351e-05, 6.5074222220573574e-05, 8.1674195826053619e-05, 0.00011704137432388961, 6.4659259805921465e-05, 0.0001154019555542618, 7.9281489888671786e-05, 0.00010399993334431201, 8.4891209553461522e-05, 5.9764322941191494e-05, 5.6258086260640994e-05, 5.3751544328406453e-05, 7.3025883466470987e-05, 0.00012642609362956136, 5.2122584747849032e-05, 0.00011933895439142361, 7.108646968845278e-05, 9.1948881163261831e-05, 6.4437466789968312e-05, 9.2115296865813434e-05, 7.1051763370633125e-05, 0.00011577615077840164, 8.6468658992089331e-05, 7.6349540904629976e-05, 9.4455317594110966e-05, 9.4622664619237185e-05, 6.5188556618522853e-05, 7.8225952165666968e-05, 0.00010914288577623665, 7.6820557296741754e-05, 3.1538998882751912e-05, 9.7322183137293905e-05, 5.3083676903042942e-05, 8.7349711975548416e-05, 7.5727286457549781e-05, 6.8484332587104291e-05, 7.9864010331220925e-05, 7.9697165347170085e-05, 0.00010324036702513695, 7.4978976044803858e-05, 9.3395101430360228e-05, 0.00010008369281422347, 9.4952738436404616e-05, 9.2673508333973587e-05, 7.1372385718859732e-05, 8.2763195678126067e-05, 8.4270082879811525e-05, 0.00010586927965050563, 0.00014688936062157154, 6.5934502345044166e-05, 5.1388593419687822e-05, } };
const TfArray<96, int> quant31_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ 50,41,-37,54,2,52,10,-31,27,82,-48,25,-91,-55,-127,-5, 
  /* [1][0][][] */ 65,-33,-4,127,23,-13,11,27,-42,63,27,4,-40,-48,45,-8, 
  /* [2][0][][] */ 104,-127,-3,-21,30,-42,-104,9,4,-10,47,-83,31,40,-59,7, 
  /* [3][0][][] */ -30,-76,-12,-5,40,31,127,-14,-31,-62,-48,-20,-83,24,5,-13, 
  /* [4][0][][] */ 54,73,-11,50,-9,-13,-3,21,-61,85,38,33,2,-13,-14,-127, 
  /* [5][0][][] */ -123,-54,-31,-8,110,61,6,114,-75,-76,-127,88,6,-46,52,-18, 
  /* [6][0][][] */ -112,2,92,88,46,-68,-127,-35,-58,-5,-70,11,112,-4,-44,37, 
  /* [7][0][][] */ 51,-3,-1,109,-68,92,102,103,56,92,-11,-53,-45,-8,77,127, 
  /* [8][0][][] */ 49,2,67,-94,20,68,26,127,21,-93,-6,-89,-1,90,17,-38, 
  /* [9][0][][] */ 39,-127,18,46,-2,70,-3,-54,-25,73,-81,58,126,57,28,-112, 
  /* [10][0][][] */ 116,-127,63,-72,40,-72,-113,-48,-55,-18,-31,-98,-16,16,-64,19, 
  /* [11][0][][] */ -127,33,6,48,27,63,115,-102,-44,57,35,44,121,-97,11,-69, 
  /* [12][0][][] */ 71,14,-24,18,-13,-19,34,-16,-127,-15,15,-21,96,55,28,50, 
  /* [13][0][][] */ -90,12,-38,-48,20,127,-97,22,52,48,27,10,6,13,17,17, 
  /* [14][0][][] */ -74,37,46,-37,119,-16,127,-56,-101,-90,-6,-15,-86,5,-57,53, 
  /* [15][0][][] */ -65,-50,-37,-13,-29,-55,17,47,-64,17,6,-29,127,-23,15,-18, 
  /* [16][0][][] */ 5,-127,-19,17,40,-26,-24,45,-5,-24,5,-72,-9,-29,-21,-19, 
  /* [17][0][][] */ 127,30,118,115,0,-100,60,76,-38,-34,-39,19,3,84,-54,57, 
  /* [18][0][][] */ -47,-13,25,-11,52,29,44,26,-41,67,-34,-127,-16,6,47,20, 
  /* [19][0][][] */ 50,-4,60,42,-26,-24,-5,4,-28,127,48,-90,-17,-24,0,-21, 
  /* [20][0][][] */ -52,-38,-38,-40,-127,-56,-19,18,55,50,21,-73,96,85,110,0, 
  /* [21][0][][] */ 107,-54,-94,74,-104,22,-10,-48,-61,-34,26,7,-127,-4,25,-36, 
  /* [22][0][][] */ 96,-77,33,-25,27,54,-70,-21,-32,98,-93,127,52,3,-13,35, 
  /* [23][0][][] */ 40,0,127,32,9,37,-24,-2,-86,43,1,-51,-1,52,-29,36, 
  /* [24][0][][] */ 10,-46,-59,-59,112,-18,-57,57,16,-78,69,19,-105,-5,72,-127, 
  /* [25][0][][] */ -20,-57,-33,-72,-7,-9,30,-127,-113,-101,-34,26,-44,4,-34,-22, 
  /* [26][0][][] */ 115,11,-64,12,-40,127,92,53,-50,-61,30,-36,-32,-54,106,30, 
  /* [27][0][][] */ -20,53,8,35,-59,-20,-46,58,28,24,15,-74,20,127,-48,68, 
  /* [28][0][][] */ -100,-40,-34,35,-9,127,106,43,-3,8,32,-5,-48,4,-29,-54, 
  /* [29][0][][] */ 61,-9,-127,-113,-27,-74,42,47,29,-109,-29,20,-67,14,-14,-49, 
  /* [30][0][][] */ -88,66,118,116,52,-95,52,99,46,51,-22,76,96,-25,-30,-127, 
  /* [31][0][][] */ -29,-16,5,99,-109,-31,-13,-44,-127,53,2,-99,-33,1,-1,62, 
  /* [32][0][][] */ 28,-40,22,-36,64,-13,94,26,-37,72,-83,56,3,26,-42,-127, 
  /* [33][0][][] */ 127,-11,37,-55,13,-54,-26,-23,-50,105,-39,56,47,27,-73,87, 
  /* [34][0][][] */ -40,-63,-95,46,35,14,51,31,-44,39,67,-14,-55,58,-127,-17, 
  /* [35][0][][] */ 37,-127,10,-83,36,-59,-39,-6,58,-31,13,31,17,63,-96,72, 
  /* [36][0][][] */ -108,97,110,43,122,-127,30,110,69,115,26,-6,-78,16,-111,-72, 
  /* [37][0][][] */ -24,-5,-11,-74,9,33,-127,-16,-50,39,-93,53,60,29,-64,1, 
  /* [38][0][][] */ -2,-14,98,-127,44,-7,-51,3,-13,76,-64,13,-52,4,57,-23, 
  /* [39][0][][] */ -114,-42,111,-11,38,-10,127,5,-109,-82,-77,43,-42,33,-112,-81, 
  /* [40][0][][] */ 14,-30,-69,127,30,3,101,-26,-31,30,-31,-5,30,-34,45,-25, 
  /* [41][0][][] */ -68,5,-106,-35,122,-60,127,-55,40,-23,-111,18,3,28,40,-100, 
  /* [42][0][][] */ 127,121,-24,80,60,-19,52,53,-33,39,-82,-52,-20,-109,25,-1, 
  /* [43][0][][] */ 52,-123,71,77,19,-42,23,86,-17,-14,-31,22,108,127,-26,98, 
  /* [44][0][][] */ -12,2,-51,127,-120,-14,57,-73,-52,-15,-29,-65,-100,68,85,-23, 
  /* [45][0][][] */ 106,64,96,-32,73,27,-48,-57,-127,20,-59,74,-90,-83,127,7, 
  /* [46][0][][] */ 36,-127,48,-30,75,89,-95,37,-42,-53,-17,50,28,-96,-23,73, 
  /* [47][0][][] */ 91,-25,44,-27,22,43,-34,-14,-108,127,-114,2,87,-6,-22,18, 
  /* [48][0][][] */ -8,-18,41,51,-35,29,-2,25,4,-6,7,-26,-127,-67,-58,39, 
  /* [49][0][][] */ 75,44,-5,-39,31,-43,-33,27,-99,-106,-75,94,-127,40,76,-109, 
  /* [50][0][][] */ 26,-9,116,-60,16,24,-75,107,127,69,-8,43,18,17,33,-51, 
  /* [51][0][][] */ -69,-68,74,-15,-52,-98,-49,-19,-127,-61,68,65,-127,-37,58,0, 
  /* [52][0][][] */ 1,13,-4,-39,127,-31,-27,52,-61,-31,-5,34,38,-13,67,-71, 
  /* [53][0][][] */ 127,58,-62,42,29,-33,79,13,-72,21,-4,-27,-34,25,67,66, 
  /* [54][0][][] */ 84,17,27,36,-61,-10,68,17,-81,127,45,-5,-68,-44,24,26, 
  /* [55][0][][] */ 57,67,-37,124,47,-20,79,68,-45,84,-73,-127,-123,42,22,38, 
  /* [56][0][][] */ 44,72,-117,59,-9,3,-51,36,95,114,52,-127,113,-32,109,78, 
  /* [57][0][][] */ 52,-78,68,88,-34,-47,63,69,-93,-45,127,14,-8,-61,94,-29, 
  /* [58][0][][] */ 20,-53,-26,-7,3,7,73,-19,-33,-21,-52,-54,28,11,-127,64, 
  /* [59][0][][] */ 65,84,-58,41,-12,47,127,21,-75,-49,45,-61,-65,-104,-67,14, 
  /* [60][0][][] */ 109,-17,-43,58,9,25,50,83,36,-127,-9,-3,-13,0,-26,-33, 
  /* [61][0][][] */ -36,40,-56,-97,14,-30,123,4,127,-56,-64,24,-70,102,41,-118, 
  /* [62][0][][] */ 9,53,-43,40,54,1,-127,-47,18,-57,-55,38,44,64,-41,-5, 
  /* [63][0][][] */ 74,-20,-23,-18,-57,-97,-95,-28,-63,28,41,11,127,57,-71,61, 
  /* [64][0][][] */ 98,77,-77,8,-28,65,-127,18,78,27,-4,63,77,-8,-59,-9, 
  /* [65][0][][] */ 83,-127,18,-74,34,-48,-64,61,8,-2,-16,-62,11,24,-100,-24, 
  /* [66][0][][] */ -61,-33,-1,20,-3,-10,-82,42,-5,-6,3,7,-74,-120,127,-21, 
  /* [67][0][][] */ 75,-32,-89,-9,60,-5,-47,58,31,127,-1,-106,-13,-36,-32,-25, 
  /* [68][0][][] */ 47,-38,24,-9,-81,-35,-29,-94,-28,90,92,-127,78,2,-36,25, 
  /* [69][0][][] */ -26,-6,-35,-6,64,-17,9,-4,42,-20,-127,-112,-88,52,13,-25, 
  /* [70][0][][] */ 29,23,-105,23,-82,-103,116,87,-7,127,-102,-36,-24,82,125,13, 
  /* [71][0][][] */ 58,-10,68,-65,-93,-18,77,-85,-39,101,50,-77,-102,-74,-94,-127, 
  /* [72][0][][] */ -24,52,63,-30,48,36,-6,-12,-43,-35,50,-99,127,-16,-18,-93, 
  /* [73][0][][] */ -25,96,-84,26,-69,-54,-66,-7,-47,20,86,127,80,31,-77,1, 
  /* [74][0][][] */ -43,-127,87,-38,-15,15,82,22,-34,-71,-87,-76,18,29,12,115, 
  /* [75][0][][] */ -70,-98,-7,-127,30,-83,-113,-87,-16,-33,-72,-5,-113,98,10,-10, 
  /* [76][0][][] */ 35,-105,34,113,5,-127,4,-19,-4,-46,12,68,-41,32,122,15, 
  /* [77][0][][] */ 1,70,-6,81,-60,11,49,42,92,-34,127,51,-79,-100,-31,37, 
  /* [78][0][][] */ 69,15,72,-41,-116,-72,52,-14,111,-99,-68,-81,57,-127,-43,-36, 
  /* [79][0][][] */ 7,-127,14,-83,46,-5,-8,58,-126,-13,-9,32,-52,-51,-27,41, 
  /* [80][0][][] */ 44,-13,-77,2,-18,-38,105,127,-37,73,19,76,-26,-18,105,-54, 
  /* [81][0][][] */ 50,-35,-15,37,-25,-78,39,2,-16,45,71,38,-86,-91,-24,-127, 
  /* [82][0][][] */ 45,38,-127,-44,-59,19,-5,-3,31,-14,13,77,-97,-45,15,3, 
  /* [83][0][][] */ 35,-36,-16,6,-30,97,-127,9,-7,-102,-30,47,93,-60,37,15, 
  /* [84][0][][] */ 105,-26,-9,-127,34,-76,-102,-25,-3,34,-77,-15,9,-29,-19,-6, 
  /* [85][0][][] */ 76,-45,-64,-35,-32,-28,86,127,-88,-16,7,26,-33,0,16,-14, 
  /* [86][0][][] */ -12,23,13,-57,5,-127,20,99,-48,73,4,71,89,19,7,74, 
  /* [87][0][][] */ 21,-46,86,7,21,21,83,93,-30,-78,-127,-70,35,-48,-7,-31, 
  /* [88][0][][] */ 36,-76,127,35,39,25,15,-16,-111,-4,-19,-36,52,-54,-78,58, 
  /* [89][0][][] */ 28,0,-29,-109,11,79,17,20,-97,-26,-34,-23,127,100,-110,-30, 
  /* [90][0][][] */ 52,47,-64,-127,8,118,-32,111,67,122,-39,-82,15,-9,-55,-38, 
  /* [91][0][][] */ -87,-54,-61,-80,-16,62,-67,-30,-14,123,-127,-25,-126,-68,42,-71, 
  /* [92][0][][] */ 106,-117,-4,-41,27,-127,19,-28,-11,-6,37,-51,-20,-22,53,45, 
  /* [93][0][][] */ -6,52,-127,-7,116,-10,33,-70,54,-35,-63,-42,23,-11,-17,82, 
  /* [94][0][][] */ 11,-35,17,2,-101,-50,-121,127,48,-81,35,-58,57,125,-44,-47, 
  /* [95][0][][] */ -96,-103,122,-94,80,20,46,-8,7,-127,-10,20,80,18,55,57, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0012260382063686848, 0.001251635723747313, 0.0014120136620476842, 0.0017283320194110274, 0.0017271651886403561, 0.0012804772704839706, 0.0010159038938581944, 0.00086330418707802892, 0.0019388147629797459, 0.0018654597224667668, 0.0010756576666608453, 0.0024407454766333103, 0.0020912925247102976, 0.0015010152710601687, 0.0014668406220152974, 0.0018060370348393917, 0.0028288958128541708, 0.002348647452890873, 0.0037152457516640425, 0.0020859099458903074, 0.0012681700754910707, 0.0014167435001581907, 0.0016920560738071799, 0.0033240236807614565, 0.0014695972204208374, 0.0016740014543756843, 0.0011290874099358916, 0.0017031475435942411, 0.0016051995335146785, 0.0022037026938050985, 0.0024558031000196934, 0.001651581609621644, 0.0014875667402520776, 0.0018293831963092089, 0.0019445933867245913, 0.0013121751835569739, 0.0018479900900274515, 0.0015173350693657994, 0.0015233760932460427, 0.00095626414986327291, 0.0017334814183413982, 0.0013154558837413788, 0.001194119337014854, 0.0014605001779273152, 0.0012821797281503677, 0.001162851694971323, 0.0012374671641737223, 0.0015531362732872367, 0.0022256870288401842, 0.0012295760679990053, 0.0021945114713162184, 0.0015076359268277884, 0.0019776879344135523, 0.00161431182641536, 0.0011364928213879466, 0.0010698173427954316, 0.0010221523698419333, 0.0013886778615415096, 0.0024041491560637951, 0.00099117564968764782, 0.0022693783976137638, 0.0013517974875867367, 0.0017485221615061164, 0.0012253584573045373, 0.0017516867956146598, 0.0013511375291272998, 0.0022016272414475679, 0.0016443089116364717, 0.0014518813695758581, 0.0017961851553991437, 0.0017993674846366048, 0.0012396413367241621, 0.0014875635970383883, 0.0020754875149577856, 0.0014608382480219007, 0.00059975322801619768, 0.0018507021013647318, 0.0010094520403072238, 0.0016610632883384824, 0.0014400483341887593, 0.0013023146893829107, 0.0015187133103609085, 0.0015155405271798372, 0.0019632438197731972, 0.0014258183073252439, 0.001776023767888546, 0.0019032156560570002, 0.0018056442495435476, 0.0017623018939048052, 0.0013572345487773418, 0.0015738449292257428, 0.0016025003278627992, 0.0020132358185946941, 0.0027932836674153805, 0.0012538264272734523, 0.00097721791826188564, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data33[16] = { 843, 1120, 15563, -4021, 1337, 2359, 78, 4509, -13375, 15213, -1823, -9336, -5050, 2905, -3726, 3532, };
const TfArray<1, int> tensor_dimension33 = { 1, { 16 } };
const TfArray<16, float> quant33_scale = { 16, { 0.00010007095988839865, 7.5341347837820649e-05, 6.4786843722686172e-05, 5.4162213928066194e-05, 7.5918229413218796e-05, 5.4378531785914674e-05, 6.8499823100864887e-05, 7.2843315138015896e-05, 5.838234574184753e-05, 5.0129103328799829e-05, 9.6679308626335114e-05, 8.2290447608102113e-05, 6.0491052863653749e-05, 6.3352221332024783e-05, 5.2723738917848095e-05, 7.5493371696211398e-05, } };
const TfArray<16, int> quant33_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data34[16*1*1*96] = { 
  /* [0][0][][] */ 39,-18,-6,10,-39,21,27,46,18,-9,-58,-17,6,4,31,8,22,21,7,14,-65,6,30,21,-94,-4,-33,-53,30,5,-19,46,-9,-20,-18,30,17,4,-59,3,46,24,11,17,-53,43,58,20,56,-32,-24,-26,73,-30,-44,-7,0,-36,-2,-127,23,21,-28,4,47,-41,33,16,-19,20,35,-31,-50,62,38,-34,-3,14,30,-89,-23,-21,22,16,24,19,29,4,-12,28,52,-7,18,68,26,-53, 
  /* [1][0][][] */ 21,-25,-37,-21,26,-102,-25,-127,-56,47,-10,-21,2,9,-34,-29,-57,-9,-12,-85,9,-15,-63,11,65,-40,-5,50,54,-15,100,9,-31,-31,56,10,-59,-36,85,-69,3,-10,-11,45,55,-16,20,49,25,-63,-23,-10,-120,2,-48,33,22,32,-30,-46,20,8,58,-27,-6,94,-13,8,36,-26,-59,-34,83,17,-5,40,59,-29,-2,-10,33,62,-16,-13,32,13,-6,-74,-18,-31,23,-23,-6,6,26,36, 
  /* [2][0][][] */ -34,-65,-45,1,20,-31,58,-6,58,-67,-26,7,34,7,-18,-68,-17,22,-89,-11,57,31,-56,-51,-65,-20,-31,127,35,42,-32,30,-12,32,4,-38,-31,-6,-73,39,15,-71,4,-53,-52,-87,-41,18,-16,-103,15,-3,-97,-43,-25,6,-21,-57,15,7,53,17,14,-18,-38,-17,-18,40,74,24,18,-70,88,-69,-28,24,16,12,-33,22,3,20,-17,23,101,-105,-46,-13,30,-16,37,-41,-88,79,103,63, 
  /* [3][0][][] */ -42,-18,-24,10,-7,-99,-16,-16,-54,52,-22,-112,-22,94,58,-26,-43,73,101,21,25,127,-60,-10,74,-7,-48,75,-40,29,69,37,97,61,21,10,-3,20,35,-7,58,-1,-41,-37,-13,1,64,-1,-26,-66,-1,5,41,-24,16,-23,-46,50,-74,-7,-40,11,63,-18,28,7,-13,21,41,-38,-28,32,-27,-107,-58,-10,11,-37,36,-69,48,52,-11,74,7,-41,-89,-39,-46,2,78,-11,85,-73,-108,-35, 
  /* [4][0][][] */ 23,47,73,0,-14,-29,22,65,50,50,-14,-36,51,14,72,1,-8,-28,14,51,4,31,19,117,-117,-75,-51,49,40,54,-66,8,7,-44,-25,-2,6,-10,10,-91,-50,-36,49,-120,54,-25,16,-15,42,-27,11,1,-65,-8,-66,69,-49,59,-47,-76,11,38,24,-38,35,17,40,69,47,14,48,-6,4,-13,127,-26,-13,-33,-29,11,-20,16,-6,-18,-33,14,-7,8,66,-11,-32,-45,-30,59,-21,20, 
  /* [5][0][][] */ -84,-35,4,15,-38,10,-29,-53,67,-2,19,77,73,-117,-60,-48,40,-13,-37,-75,-61,-44,-27,51,0,7,35,-83,-3,80,-49,3,5,38,-50,-121,84,-28,5,14,127,-114,-44,-12,-106,26,92,13,41,29,39,12,-32,14,39,1,-24,59,12,-117,-1,-114,116,25,-69,-12,9,33,-58,25,18,2,-39,26,49,-22,50,42,-15,15,27,-23,0,-18,38,-37,-11,-11,0,18,24,80,-43,72,0,-51, 
  /* [6][0][][] */ 41,-25,-9,75,56,-93,37,-67,26,-77,-61,63,-58,-37,9,35,51,-25,-37,35,8,-15,-24,-36,-43,5,47,-28,-4,54,27,-4,45,-23,42,24,18,-24,-23,101,-82,119,11,5,-63,21,19,42,9,30,7,34,-19,-30,25,30,-33,-70,37,-127,10,-16,88,34,9,-33,46,-23,-9,54,5,-42,-78,-10,23,-18,49,23,23,68,-8,-17,62,-71,31,8,-6,43,31,8,-18,-43,-59,4,16,31, 
  /* [7][0][][] */ -3,-19,-61,0,-19,-32,44,3,-55,49,-44,14,-21,-10,-3,53,-57,72,-33,-25,24,-17,2,24,5,24,-25,37,2,10,-31,-12,8,6,-29,43,6,16,96,-33,45,43,75,-16,-69,36,-79,-33,5,108,106,22,-78,-11,5,-99,-34,24,13,-127,-3,-3,59,47,0,11,28,-63,-41,37,59,14,80,-26,56,-62,-60,-21,71,54,-2,-53,-15,25,-26,-37,29,-37,-112,-2,-50,-15,-109,-85,-61,-11, 
  /* [8][0][][] */ 22,38,2,-46,19,-61,27,8,9,-57,23,38,-5,-8,39,-38,-1,-58,66,41,5,3,-43,72,48,-8,45,35,-7,60,62,25,-41,-1,-108,-27,-12,4,-42,79,60,-99,-50,24,111,-38,-58,-7,-39,29,-79,-28,-6,-2,-101,2,-60,43,-65,25,12,-81,-22,-44,-2,-2,18,21,14,-14,-37,58,94,3,-6,65,-39,11,-49,-62,15,41,-8,18,6,49,33,0,57,36,46,-39,127,64,39,13, 
  /* [9][0][][] */ -56,-5,-3,18,-36,7,0,40,27,-92,-23,52,58,20,-9,16,2,-4,-38,-2,26,35,25,-38,-84,11,-78,-17,16,29,-109,-2,30,-9,-70,62,-17,-5,20,-94,21,63,49,-28,16,22,31,-45,-50,82,34,0,6,-67,-44,33,-1,31,29,-52,25,20,-22,24,-86,-52,-61,-50,23,14,-49,-57,16,-58,17,-127,53,40,77,-5,2,-7,-8,92,-24,5,-3,-1,-98,-92,-27,-48,21,11,-41,46, 
  /* [10][0][][] */ 17,-27,-25,-13,47,40,25,43,49,17,-37,-34,46,-72,-10,-5,6,-17,2,2,-14,-60,-10,-86,29,36,-47,-13,4,-47,127,9,5,-29,33,-20,15,2,31,-43,14,15,15,25,-71,-71,-10,35,-12,-25,-98,-8,24,-7,-1,66,28,-74,15,-20,-4,-31,-9,17,17,-21,15,19,-14,22,79,-19,0,38,-72,-2,-28,24,20,23,-16,16,-2,40,-22,16,25,47,-19,35,5,1,21,14,-76,27, 
  /* [11][0][][] */ -45,-8,10,23,42,-11,-29,0,-51,-16,-15,-10,50,21,11,-3,23,-19,-16,34,38,-41,-42,82,-29,-70,-41,0,2,53,22,-46,-32,22,48,63,43,22,-1,-16,7,-58,-28,71,-2,-9,-10,28,-7,-26,-15,6,-89,-6,11,20,-33,-48,40,127,0,-75,76,13,0,68,-57,5,45,45,-23,66,-52,19,-30,-24,25,13,27,117,-7,22,13,31,5,-19,-18,-35,7,39,0,-13,18,-38,-13,35, 
  /* [12][0][][] */ -27,-32,-23,46,-38,-8,-13,-77,15,-10,-32,29,25,32,27,18,61,-18,41,-29,95,-1,16,-12,17,-2,-34,55,20,26,-25,21,-33,-17,-14,-8,17,-7,-66,-7,27,-7,34,9,17,29,51,68,56,-16,-31,8,127,63,-45,71,6,22,-52,-94,-37,57,-43,-25,-27,-46,34,39,17,24,-17,-26,37,89,58,-30,63,19,2,-38,-18,16,44,-34,-92,33,-18,14,-14,-14,-58,17,-30,21,30,49, 
  /* [13][0][][] */ -57,127,-3,-40,-16,-8,22,-16,38,-23,14,51,-84,26,17,-62,-71,-16,43,32,22,15,-32,87,-22,32,44,52,-14,12,51,28,-15,63,7,19,-90,44,-94,-20,-82,-15,-49,7,43,21,-19,-26,-61,-38,52,-31,0,16,76,-14,-49,-9,-7,-11,22,94,-28,-22,36,-20,27,-13,35,-23,13,37,17,53,45,30,40,2,-68,43,21,-5,-31,-78,-5,-111,-18,-4,51,-34,49,-23,-37,37,-80,-10, 
  /* [14][0][][] */ -37,-48,-44,49,-24,-51,33,32,72,-38,76,100,6,-74,37,25,80,-65,22,9,39,-14,-15,-13,95,-53,114,-34,-35,-3,-50,22,52,1,-50,-49,39,-22,127,-76,30,19,19,61,13,32,-53,-14,60,23,-14,-54,-35,11,-52,-63,-21,98,7,110,-11,-9,-25,12,47,33,18,-59,-102,-66,1,51,42,72,7,76,11,37,-81,-20,-51,-70,64,-111,-29,-32,13,-21,-17,-79,-85,33,40,-30,17,-34, 
  /* [15][0][][] */ -23,-27,-29,-39,-16,-30,59,-42,33,49,22,-35,-39,19,30,3,-9,-20,-34,35,-40,38,-7,-27,67,41,127,-46,-2,34,-58,61,-15,-10,-26,94,-3,67,-66,39,112,-79,13,36,5,77,-29,34,10,-2,6,34,-25,-49,-75,-31,-56,-69,13,8,-29,-34,34,-8,35,-72,-46,33,-9,-25,9,-81,120,24,-23,60,66,-36,-35,-43,-38,-25,20,-63,78,-41,-27,3,9,-18,5,3,-19,50,-4,-8, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant34_scale = { 16, { 0.0050813262350857258, 0.0038256251718848944, 0.0032896965276449919, 0.0027502072043716908, 0.0038549173623323441, 0.0027611912228167057, 0.0034782313741743565, 0.00369878183118999, 0.0029644938185811043, 0.0025454170536249876, 0.0049091074615716934, 0.0041784811764955521, 0.0030715682078152895, 0.0032168503385037184, 0.002677165437489748, 0.0038333444390445948, } };
const TfArray<16, int> quant34_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data35[96] = { -3498, -23581, -38, -1036, -10438, -1085, 13907, 2051, -386, 9255, 297, -1109, 5562, -248, 1109, -3567, -719, 18463, 15946, -1115, -13670, -590, -132, -927, 3307, -1189, -195, 894, -8936, -11028, 14513, 44130, -2211, 35118, 19688, 1375, 679, -89, 616, 930, 6747, 7425, 1824, -1507, -24287, 13952, -1265, 29992, -4966, 4009, -424, 3088, -43, -931, -690, 7323, 1476, 7654, -733, -15900, -15055, -22050, -4408, -231, 2345, 2169, 34613, -4578, 23376, 37006, -4001, 13394, -3034, -5187, -600, -3299, 558, -496, 1947, -1066, 22298, -22209, -33, 24732, 1433, -4667, 96, 292, -5937, 19259, 1812, -174, -14330, 245, 5617, -904, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 9.2338130343705416e-05, 5.5716987844789401e-05, 0.0001941115187946707, 8.1031284935306758e-05, 9.2518901510629803e-05, 0.00010326347546651959, 7.9329773143399507e-05, 9.8866170446854085e-05, 9.7882431873586029e-05, 7.6301570516079664e-05, 5.4700194596080109e-05, 8.7011256255209446e-05, 6.55164330964908e-05, 0.00016290553321596235, 0.00011871846072608605, 0.00012824064469896257, 0.00014888476289343089, 5.2914212574250996e-05, 8.3673243352677673e-05, 0.00010381875472376123, 0.00011365780665073544, 0.000102664613223169, 8.2407146692276001e-05, 0.00010478845069883391, 0.0001590273022884503, 0.00011022434773622081, 0.00014933189959265292, 0.00018832620116882026, 9.7496886155568063e-05, 5.2819566917605698e-05, 7.2683280450291932e-05, 1.9934890588046983e-05, 0.00016923218208830804, 2.5866669602692127e-05, 0.00014354979794006795, 5.7998604461317882e-05, 0.00016326233162544668, 0.0001242806320078671, 6.9765192165505141e-05, 0.00013646864681504667, 0.00012344766582828015, 0.00014284854114521295, 0.00012073841935489327, 8.8902823335956782e-05, 7.1085705712903291e-05, 7.9247583926189691e-05, 0.00012184702063677832, 3.1125906389206648e-05, 0.00010273302177665755, 0.00013567466521635652, 9.8542921477928758e-05, 0.00021016024402342737, 6.3875355408526957e-05, 0.00017208988720085472, 5.5406813771696761e-05, 2.9344177164603025e-05, 0.00019416214490775019, 5.9400048485258594e-05, 7.1231865149457008e-05, 9.9332559329923242e-05, 4.2984152969438583e-05, 6.8587462010327727e-05, 0.00014122651191428304, 0.00012949785741511732, 9.1603353212121874e-05, 5.3150572057347745e-05, 4.0080045437207446e-05, 0.0001087585260393098, 6.7785425926558673e-05, 3.6788700526813045e-05, 0.00011785281094489619, 7.4005489295814186e-05, 0.00014713800919707865, 6.9742745836265385e-05, 0.00010794311674544588, 8.0745798186399043e-05, 7.5535892392508686e-05, 0.00013356971612665802, 0.00012396983220241964, 0.00017531235062051564, 4.6892575483070686e-05, 4.8879319365369156e-05, 0.00013507205585483462, 0.00011551827628863975, 0.00010988654685206711, 0.00028165921685285866, 0.0001479886268498376, 0.00011866302520502359, 0.00010385744099039584, 5.8616067690309137e-05, 0.00012199299817439169, 0.00018056121189147234, 9.0333691332489252e-05, 0.0001159435196314007, 7.8776560258120298e-05, 0.00027341945678927004, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data36[1*3*3*96] = { 
  /* [0][0][][] */ 111,101,66,28,-75,36,-86,47,-112,-57,93,41,-71,-9,52,45,47,4,4,127,-37,7,127,61,-57,-52,13,57,-27,120,-77,-76,-24,-105,-1,127,-24,17,127,51,-127,-61,102,16,94,-28,-65,-127,121,61,-55,15,5,-100,-81,93,4,-104,23,127,-45,-11,-12,-127,-25,-94,0,-3,-121,-127,24,-127,30,127,127,-28,80,123,-127,72,-118,49,17,7,-32,24,-53,-36,127,40,-1,127,-1,53,56,7, 66,104,107,127,-40,-46,-91,-15,-60,-84,-40,45,-34,127,-33,32,127,-33,-28,46,5,116,89,-50,-18,9,21,-25,35,-21,127,-127,-65,-123,-93,-118,-127,-43,-10,-10,49,-49,-79,-105,54,43,48,-89,127,-49,-63,-5,80,18,-24,59,-18,113,-125,-37,84,30,27,41,42,-24,-61,53,-127,-86,127,32,60,121,-23,9,-3,9,-41,-18,-104,25,-100,-34,9,-72,-127,-90,-10,-127,-25,-94,46,-33,58,65, 104,-44,-78,0,-32,-32,-127,-20,96,-127,88,5,62,20,-44,-16,-37,-127,-40,94,-9,52,96,-42,-14,32,-16,-25,-10,123,-70,-94,16,-80,-28,-83,31,5,42,-2,43,7,-127,-10,111,-40,16,-104,52,9,127,127,-79,88,83,46,-39,-118,-74,71,64,-27,9,-52,64,89,-98,18,-82,-97,-1,-27,-31,75,28,127,-27,-127,-69,-77,-120,-4,17,-32,15,19,-12,-22,59,-60,-7,-51,127,-27,-20,-20, 
  /* [0][1][][] */ 27,82,127,59,108,127,-40,127,63,-79,59,124,-127,-6,127,127,-58,-113,-127,-65,127,-53,-58,127,-4,-111,-12,127,69,114,-57,-90,-79,-66,-32,72,19,127,83,126,14,-76,47,127,25,-127,-127,-110,-42,127,24,-39,-30,-46,-127,88,127,-107,96,96,76,127,34,112,-127,-64,-66,61,-65,-52,99,-85,127,54,67,-22,127,-72,120,127,-127,95,-53,-107,-127,-3,56,49,48,4,-89,-114,54,127,127,127, -127,127,-36,-49,127,45,61,-118,-8,-16,1,-112,45,-28,-4,101,-12,71,94,-89,97,-127,33,80,-88,-23,127,-84,127,-33,-37,10,8,-85,-6,-68,93,-44,-73,-127,-101,96,-25,-38,-41,46,23,19,-96,50,24,-16,127,12,50,-69,-28,-28,127,112,127,64,127,-34,9,-60,6,127,-72,-5,-68,-45,-33,-111,-38,35,-116,-14,-21,-31,-23,79,-32,10,110,127,86,-55,-107,-20,127,76,-37,-65,-44,11, -17,31,14,56,10,-113,-62,-44,127,-37,127,-124,122,15,-98,-56,-6,-81,-34,-72,12,-39,-74,-124,127,127,-63,-17,-3,127,-115,-119,-64,3,-127,-58,-20,-68,-27,-29,28,74,-25,30,36,-88,113,-69,-14,-40,62,27,-119,34,104,127,-81,-4,61,96,37,86,64,34,17,127,-104,-23,-74,-66,-13,79,29,53,-24,24,-61,73,93,85,-68,52,-25,-127,31,31,15,-22,44,-87,-53,48,100,37,-100,81, 
  /* [0][2][][] */ -48,24,-53,-83,23,16,-83,19,-27,-74,72,16,-6,6,26,-127,13,-117,-77,-27,-48,-35,-74,18,-40,-20,3,-14,-34,20,-102,-122,127,-127,5,34,8,9,117,30,-11,-20,83,4,63,14,-14,-88,-57,-67,18,-15,22,127,-103,23,13,-127,34,65,-85,9,-6,23,-3,-84,-82,-5,-49,-112,-3,-78,9,-82,13,46,38,-67,2,13,-83,31,30,-22,-28,10,13,25,70,-16,-13,-38,51,30,-16,-21, -38,71,30,-41,30,-47,-102,-14,-16,-34,7,127,-35,-89,-34,-120,-111,-10,-81,-11,73,116,-124,-35,27,29,-12,1,17,-42,16,-17,78,-79,-95,-80,36,-37,-39,-22,4,-127,-70,-36,48,-42,19,35,-41,-68,-79,-17,116,-24,-27,-4,-12,69,14,-5,-30,41,-50,-11,63,-63,-56,33,30,-34,13,24,-7,-63,-8,2,13,13,30,6,-56,127,127,-13,21,-43,14,127,18,-38,35,34,51,-44,-6,32, -14,86,-46,-57,-21,-22,-105,-11,40,-70,1,-31,127,-18,-18,82,47,-41,-84,-1,11,13,-28,-5,-27,-6,-23,-20,-36,-2,-76,-92,51,-44,-42,-39,-17,19,-24,-7,48,-64,-35,5,127,7,-7,-104,-28,-54,57,78,25,-111,71,11,-19,-119,-66,72,-23,4,6,17,40,111,-127,26,-27,-55,1,-18,-12,-24,21,101,-43,46,27,2,-81,8,-6,-40,7,2,6,-20,48,-82,-37,8,74,-3,-31,-51, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant36_scale = { 96, { 0.0081643406301736832, 0.0049263774417340755, 0.017162926495075226, 0.0071646138094365597, 0.008180323988199234, 0.0091303363442420959, 0.0070141693577170372, 0.0087415361776947975, 0.0086545562371611595, 0.0067464224994182587, 0.0048364745453000069, 0.0076933498494327068, 0.0057928231544792652, 0.014403759501874447, 0.010496833361685276, 0.011338763870298862, 0.01316407322883606, 0.0046785618178546429, 0.0073982095345854759, 0.0091794328764081001, 0.010049381293356419, 0.0090773859992623329, 0.0072862645611166954, 0.0092651713639497757, 0.014060854911804199, 0.0097458017989993095, 0.013203608803451061, 0.016651401296257973, 0.0086204670369625092, 0.0046701934188604355, 0.0064265006221830845, 0.0017626006156206131, 0.014963149093091488, 0.0022870758548378944, 0.012692367658019066, 0.0051281130872666836, 0.014435307122766972, 0.0109886284917593, 0.0061684893444180489, 0.012066266499459743, 0.010914979502558708, 0.012630363926291466, 0.010675434023141861, 0.0078605981543660164, 0.0062852464616298676, 0.0070069022476673126, 0.010773453861474991, 0.0027520863804966211, 0.0090834349393844604, 0.011996065266430378, 0.0087129548192024231, 0.018581921234726906, 0.0056477226316928864, 0.015215820632874966, 0.0048989523202180862, 0.0025945496745407581, 0.017167402431368828, 0.005252025555819273, 0.0062981694936752319, 0.0087827732786536217, 0.003800567239522934, 0.0060643572360277176, 0.012486947700381279, 0.011449924670159817, 0.0080993734300136566, 0.0046994602307677269, 0.0035437922924757004, 0.0096161970868706703, 0.0059934430755674839, 0.003252778435125947, 0.010420294478535652, 0.0065434076823294163, 0.013009629212319851, 0.0061665051616728306, 0.0095441006124019623, 0.0071393717080354691, 0.0066787227988243103, 0.011809949763119221, 0.010961147956550121, 0.015500743873417377, 0.0041461414657533169, 0.0043218052014708519, 0.011942783370614052, 0.010213879868388176, 0.0097159342840313911, 0.024903707206249237, 0.013084839098155499, 0.010491931810975075, 0.0091828536242246628, 0.0051827076822519302, 0.010786361061036587, 0.015964837744832039, 0.0079871127381920815, 0.010251479223370552, 0.006965255830436945, 0.024175165221095085, } };
const TfArray<96, int> quant36_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data37[96] = { 5209, 3345, -9581, 2405, 4179, 468, -4255, 6205, 2521, 813, 6, 2299, 293, 2038, 5807, 1189, 8972, 4874, 3995, 7175, 3300, 9895, 11708, 882, 7473, 10152, -534, -1338, 2480, 4172, 3956, 2406, -1093, 2876, 7789, 2396, 6728, 3059, 3639, 338, -1242, 6647, -6820, 1340, 6321, 4174, 8213, 1804, 4391, 20865, -2159, 569, 48, 12089, 1707, 1628, -6031, 1603, 634, 11093, 589, 5025, 5939, 1952, 818, 2375, 5990, -1878, -1031, 6293, 3902, 6492, -1399, 6853, 766, 908, 5674, 5730, 12162, -9233, 1162, 491, 6005, 10662, 5057, 5399, 1244, 1571, -509, -43, 848, 3272, 9983, 618, 1538, -8526, };
const TfArray<1, int> tensor_dimension37 = { 1, { 96 } };
const TfArray<96, float> quant37_scale = { 96, { 8.6125524831004441e-05, 0.00010193886555498466, 5.0240443670190871e-05, 0.00013631429465021938, 6.2864906794857234e-05, 8.0255784268956631e-05, 6.3842257077340037e-05, 9.3744922196492553e-05, 0.00010896551248151809, 0.00012041754962410778, 0.00011047533917007968, 8.0491940025240183e-05, 8.3830920630134642e-05, 6.4686471887398511e-05, 9.360527474200353e-05, 8.459758828394115e-05, 8.4803694335278124e-05, 0.000135713693452999, 9.0507586719468236e-05, 9.8112468549516052e-05, 7.2622431616764516e-05, 6.629333074670285e-05, 5.9458074247231707e-05, 8.3155609900131822e-05, 5.4769105190644041e-05, 8.7796273874118924e-05, 0.00014957039093133062, 7.7655706263612956e-05, 0.00011651318345684558, 0.00010798502626130357, 6.3259416492655873e-05, 0.00024952355306595564, 5.0812337576644495e-05, 0.00014184447354637086, 6.0993086663074791e-05, 0.00011164576426381245, 7.4354684329591691e-05, 0.0001347626093775034, 6.8626606662292033e-05, 6.7490123910829425e-05, 8.1792473793029785e-05, 4.7564455599058419e-05, 5.5107600928749889e-05, 0.00010750689398264512, 5.5483378673670813e-05, 8.4701016021426767e-05, 6.86391576891765e-05, 0.00011506985902087763, 9.3827489763498306e-05, 3.9938695408636704e-05, 9.8830234492197633e-05, 7.2007002017926425e-05, 0.00011683404591167346, 5.752167635364458e-05, 9.9891258287243545e-05, 0.00022186484420672059, 8.0661411629989743e-05, 0.00011383355740690604, 0.00013185778516344726, 4.0573217120254412e-05, 0.00018494568939786404, 9.8170043202117085e-05, 6.755904178135097e-05, 0.00015843911387491971, 0.00013160832168068737, 7.6558077125810087e-05, 8.01797941676341e-05, 7.9520716099068522e-05, 9.6694027888588607e-05, 0.00010772440873552114, 7.963176176417619e-05, 6.5152737079188228e-05, 6.6136395616922528e-05, 7.3342089308425784e-05, 7.4694107752293348e-05, 0.00010453976574353874, 8.367928967345506e-05, 0.00013534151366911829, 6.0146598116261885e-05, 4.7564823034917936e-05, 0.00013933268201071769, 0.00014024403935763985, 7.4828043580055237e-05, 5.4506173910340294e-05, 6.7668210249394178e-05, 6.5674816141836345e-05, 0.00010933644807664678, 0.00010249894694425166, 5.463438355945982e-05, 9.6922049124259502e-05, 7.6998272561468184e-05, 9.907859202940017e-05, 4.8488262109458447e-05, 9.9333352409303188e-05, 0.00010334647231502458, 5.4069063480710611e-05, } };
const TfArray<96, int> quant37_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ 80,-22,-16,-79,19,-48,-14,-3,51,-100,-11,-127,-2,-9,-10,18, 
  /* [1][0][][] */ 26,-14,-6,-9,127,-11,73,-47,24,-49,21,25,-51,47,32,-20, 
  /* [2][0][][] */ -26,-101,-13,-32,74,-14,-127,32,51,34,-61,-14,46,60,-52,22, 
  /* [3][0][][] */ 82,8,55,36,33,-1,39,-57,-42,-120,-70,0,127,-25,95,-27, 
  /* [4][0][][] */ -91,46,-12,20,91,-123,-39,-19,49,100,-127,28,90,105,-54,-5, 
  /* [5][0][][] */ -127,-21,-75,-7,-82,-26,17,14,-108,-73,23,93,16,-19,53,-91, 
  /* [6][0][][] */ 62,-10,-96,-66,-15,69,-101,-57,-100,3,-104,-93,127,4,-49,-31, 
  /* [7][0][][] */ 93,-127,36,3,55,-84,-40,41,20,57,46,-17,31,12,-11,10, 
  /* [8][0][][] */ 49,-7,7,-35,-2,57,49,-25,-18,47,45,-7,-12,11,127,-1, 
  /* [9][0][][] */ 52,-63,26,11,-49,-18,64,-34,79,127,6,38,-6,97,86,-74, 
  /* [10][0][][] */ -35,111,-1,58,19,-127,90,-7,-27,28,61,124,12,-24,-33,-90, 
  /* [11][0][][] */ 42,-18,23,54,-102,26,9,63,100,127,-17,-1,85,66,98,-20, 
  /* [12][0][][] */ 39,-40,2,56,-127,-40,19,103,110,50,12,-64,8,65,41,83, 
  /* [13][0][][] */ 127,-118,-49,-5,-65,-63,-72,-9,-114,0,-96,-20,100,11,-55,58, 
  /* [14][0][][] */ -73,127,-4,-53,-76,65,-31,36,39,40,7,-12,-47,9,-27,-96, 
  /* [15][0][][] */ -37,-3,56,-67,-86,-1,-127,63,-60,30,-34,-25,15,-6,-15,-8, 
  /* [16][0][][] */ 14,117,-24,9,49,-61,33,-3,-127,-13,91,-46,-39,-46,-36,-33, 
  /* [17][0][][] */ -3,18,-64,-127,21,47,63,-1,40,32,4,50,21,-37,-2,46, 
  /* [18][0][][] */ -14,-71,113,-127,10,85,42,-23,-63,15,43,48,-76,-41,-25,-20, 
  /* [19][0][][] */ 54,-127,18,25,10,-31,-1,17,32,-47,-24,-31,-26,78,0,57, 
  /* [20][0][][] */ -8,-74,7,63,-84,-14,-51,83,-127,-25,-56,27,79,21,38,-42, 
  /* [21][0][][] */ 101,-127,-22,-8,-36,-52,70,48,-66,83,-74,12,-22,-40,-25,82, 
  /* [22][0][][] */ -49,94,3,69,28,7,127,-41,16,-82,19,121,-2,-35,86,-16, 
  /* [23][0][][] */ 38,45,-127,55,15,33,-58,28,6,41,-12,23,-5,-31,103,-52, 
  /* [24][0][][] */ -116,-10,84,-50,15,-105,-9,-35,-47,-33,73,127,-6,-75,75,22, 
  /* [25][0][][] */ 50,-48,-2,-6,-20,-65,127,11,-23,14,28,-125,17,55,-52,111, 
  /* [26][0][][] */ -54,-15,-46,3,-127,48,-26,-7,79,-12,-8,-10,27,48,16,7, 
  /* [27][0][][] */ 14,-26,89,45,35,-45,-22,62,-15,-3,-44,-29,127,20,-35,-18, 
  /* [28][0][][] */ 99,36,40,-10,-57,-21,-74,89,-127,-22,65,-85,12,-43,76,-6, 
  /* [29][0][][] */ -4,-124,67,65,6,79,74,25,127,-15,-106,88,29,29,126,48, 
  /* [30][0][][] */ 63,118,28,127,-34,4,-47,-45,78,10,86,38,-33,37,-41,-52, 
  /* [31][0][][] */ -55,11,-39,-9,19,-60,-21,11,-12,127,-36,-4,-30,-21,-14,32, 
  /* [32][0][][] */ -87,50,29,-127,-79,-17,-110,62,19,-109,-54,105,49,43,-22,34, 
  /* [33][0][][] */ 58,77,29,-98,62,-53,-79,19,-105,10,127,-104,-90,-42,6,-48, 
  /* [34][0][][] */ 18,50,-16,32,16,65,-1,18,127,122,-1,-50,0,-13,26,-4, 
  /* [35][0][][] */ 0,-26,-58,-66,14,-127,57,89,-65,74,-49,20,48,31,74,31, 
  /* [36][0][][] */ -54,127,16,-95,-45,-104,54,-117,-91,23,-36,-66,27,109,-24,1, 
  /* [37][0][][] */ 51,-55,-55,18,54,-51,2,16,22,22,-20,0,-9,127,-2,99, 
  /* [38][0][][] */ 127,-126,31,-84,60,6,65,-34,-108,78,-87,-60,123,23,-93,9, 
  /* [39][0][][] */ 9,-127,55,-16,-83,-69,105,16,60,-53,-54,-83,111,34,-98,88, 
  /* [40][0][][] */ 4,16,58,92,29,121,-111,41,90,45,14,55,22,-114,-31,127, 
  /* [41][0][][] */ 2,96,-123,24,-32,-28,92,8,-94,80,16,-32,-127,24,14,-107, 
  /* [42][0][][] */ -127,108,83,-59,53,-116,30,121,-88,-38,121,12,97,-120,-22,85, 
  /* [43][0][][] */ 14,-40,-56,-21,-75,-41,-33,127,3,-86,-15,110,30,10,-6,-46, 
  /* [44][0][][] */ -8,14,12,-109,62,-29,-78,53,127,3,11,-80,-24,111,38,23, 
  /* [45][0][][] */ 4,-113,6,-127,20,81,-42,-85,-38,-12,73,33,36,-21,-37,-56, 
  /* [46][0][][] */ -12,127,60,-85,33,50,23,-27,-64,-36,-111,-89,114,-12,-8,81, 
  /* [47][0][][] */ 71,-120,38,-46,33,45,-122,83,37,127,-58,-95,-41,26,-60,-20, 
  /* [48][0][][] */ -127,-55,7,-2,-62,-60,-7,8,32,5,10,24,-18,50,-44,-32, 
  /* [49][0][][] */ -16,41,-91,-25,44,23,101,71,127,-2,-29,-53,-35,37,-20,-77, 
  /* [50][0][][] */ 14,-103,106,16,31,29,43,127,-54,24,-106,-46,-50,-15,-10,7, 
  /* [51][0][][] */ 23,50,-33,59,-25,8,-127,-1,-72,37,57,113,-69,-76,67,-89, 
  /* [52][0][][] */ 34,61,37,28,29,13,31,24,19,45,12,-32,117,26,-29,127, 
  /* [53][0][][] */ 127,-25,68,-8,31,22,-23,67,-24,-93,-45,-99,76,72,-41,-34, 
  /* [54][0][][] */ 76,-5,24,26,-28,-37,-124,-49,127,-49,-16,13,38,-51,66,-11, 
  /* [55][0][][] */ -6,-32,-73,-79,40,-48,52,-95,42,-34,127,0,7,-31,-45,-6, 
  /* [56][0][][] */ 14,29,9,-78,-17,-79,-46,-16,-2,-34,61,-127,36,-10,-11,39, 
  /* [57][0][][] */ -19,72,-40,2,22,56,-70,4,43,127,-23,18,34,-59,13,-24, 
  /* [58][0][][] */ 34,2,-9,-77,-45,85,9,73,-95,-127,29,29,-4,15,-20,-3, 
  /* [59][0][][] */ 41,-64,-127,32,-63,-29,79,18,-65,81,-9,69,-113,-80,108,-10, 
  /* [60][0][][] */ 127,-44,4,-75,5,28,-75,60,12,97,4,14,-33,47,19,-82, 
  /* [61][0][][] */ -9,16,-25,1,-100,38,-127,-34,14,27,-77,-80,24,16,5,26, 
  /* [62][0][][] */ -24,53,3,65,-85,85,77,127,1,10,9,70,-29,-31,-4,13, 
  /* [63][0][][] */ 66,32,18,-69,-26,49,-11,127,23,25,77,-13,-16,80,-10,-25, 
  /* [64][0][][] */ -76,39,-20,-17,-64,46,-9,28,-28,127,-16,59,12,-52,-57,-65, 
  /* [65][0][][] */ 30,-44,60,5,-9,-82,46,-3,-53,-2,-20,-82,127,5,-92,57, 
  /* [66][0][][] */ 32,16,113,-51,-76,28,10,-70,-103,-15,-38,33,48,-74,-28,127, 
  /* [67][0][][] */ 1,-97,13,90,-20,25,-20,45,107,-6,-53,127,87,-40,112,77, 
  /* [68][0][][] */ -13,17,3,-12,-127,77,-65,6,-100,-49,-39,5,96,48,51,64, 
  /* [69][0][][] */ 12,-86,48,96,11,19,-43,-66,-62,-87,-19,-127,-3,-23,19,-12, 
  /* [70][0][][] */ 35,-101,29,29,7,-35,9,127,-44,-61,120,21,-2,-39,18,13, 
  /* [71][0][][] */ -96,65,8,7,41,101,58,84,127,14,41,81,-38,-1,124,-64, 
  /* [72][0][][] */ 10,35,-5,8,-41,-57,-102,102,127,37,61,-83,41,12,40,90, 
  /* [73][0][][] */ 127,-2,-72,-79,-20,-12,-72,10,21,-67,43,-29,114,54,25,43, 
  /* [74][0][][] */ 29,-42,-46,-115,34,58,-1,116,40,-9,-127,-108,-9,48,108,-41, 
  /* [75][0][][] */ -29,-37,117,26,80,-7,25,-51,3,-32,-8,5,-127,-31,0,-64, 
  /* [76][0][][] */ 35,7,63,-58,60,-45,79,-62,-32,64,-66,-14,127,94,23,72, 
  /* [77][0][][] */ 37,-98,30,8,-67,22,10,-31,44,93,-4,71,-19,127,43,-100, 
  /* [78][0][][] */ -42,-127,42,28,41,8,70,-117,-9,4,110,27,-62,-67,41,-72, 
  /* [79][0][][] */ -78,-62,127,-69,4,-30,-62,-1,-54,-66,11,75,-22,82,-40,24, 
  /* [80][0][][] */ 15,-88,-127,-81,79,-13,66,-34,63,37,78,-49,62,-96,58,-91, 
  /* [81][0][][] */ -11,6,3,80,-71,-40,-127,61,15,-104,-98,-1,-107,99,-6,25, 
  /* [82][0][][] */ -57,-96,-3,-62,89,20,-71,-29,-22,-96,110,-76,-121,-92,-127,-110, 
  /* [83][0][][] */ -65,61,-16,-126,25,4,52,-84,73,-90,-56,-7,13,115,127,-6, 
  /* [84][0][][] */ -117,-9,-26,-50,-55,-111,-37,3,60,36,-28,127,58,63,13,-5, 
  /* [85][0][][] */ -23,112,-49,-18,74,44,20,-4,-23,-35,30,-23,-69,-82,75,-127, 
  /* [86][0][][] */ -127,33,23,59,-32,-12,-18,-24,-20,-29,-17,17,75,17,50,13, 
  /* [87][0][][] */ 17,-127,8,28,-53,-43,23,58,-69,-55,11,-106,10,38,-13,78, 
  /* [88][0][][] */ -46,88,49,-11,-5,-21,-79,-127,-3,-33,-63,26,89,112,-73,101, 
  /* [89][0][][] */ -127,-15,3,-9,8,-25,10,74,90,-78,39,-7,-36,-19,-42,-95, 
  /* [90][0][][] */ -13,-49,-67,-89,85,-9,93,2,-127,49,-93,-1,75,6,93,-63, 
  /* [91][0][][] */ 14,53,58,-53,10,-127,14,22,-46,23,37,42,40,53,-47,24, 
  /* [92][0][][] */ 115,41,-127,100,-13,-68,-10,-72,102,115,61,7,57,-4,22,-18, 
  /* [93][0][][] */ -22,-24,111,-68,30,65,10,-34,-19,-24,-17,-33,-127,114,13,110, 
  /* [94][0][][] */ 31,-6,67,-91,-24,-71,19,17,-12,-11,-86,-14,57,-127,24,-91, 
  /* [95][0][][] */ -103,0,44,-17,-28,-87,-11,58,-25,62,101,11,127,-1,15,-5, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0021451716311275959, 0.0025390423834323883, 0.0012513638939708471, 0.0033952484373003244, 0.0015658077318221331, 0.0019989709835499525, 0.0015901509905233979, 0.0023349516559392214, 0.0027140586171299219, 0.0029993001371622086, 0.0027516644913703203, 0.0020048529841005802, 0.0020880186930298805, 0.0016111782751977444, 0.0023314733989536762, 0.0021071145310997963, 0.0021122479811310768, 0.0033802890684455633, 0.0022543177474290133, 0.0024437364190816879, 0.0018088433425873518, 0.0016512011643499136, 0.0014809520216658711, 0.002071198308840394, 0.0013641614932566881, 0.0021867856848984957, 0.0037254246417433023, 0.0019342094892635942, 0.0029020521324127913, 0.0026896370109170675, 0.0015756339998915792, 0.0062150079756975174, 0.001265608356334269, 0.0035329912789165974, 0.0015191853744909167, 0.0027808169834315777, 0.0018519893055781722, 0.0033565997146070004, 0.001709317322820425, 0.0016810103552415967, 0.0020372460130602121, 0.0011847116984426975, 0.0013725926401093602, 0.0026777279563248158, 0.001381952315568924, 0.0021096905693411827, 0.0017096298979595304, 0.0028661026153713465, 0.002337008249014616, 0.00099477311596274376, 0.0024616140872240067, 0.001793514471501112, 0.0029100440442562103, 0.001432721153832972, 0.0024880415294319391, 0.0055260988883674145, 0.0020090742036700249, 0.0028353093657642603, 0.003284247824922204, 0.0010105774272233248, 0.0046065347269177437, 0.0024451704230159521, 0.001682726782746613, 0.0039463224820792675, 0.0032780345063656569, 0.0019068702822551131, 0.0019970783032476902, 0.0019806623458862305, 0.0024084064643830061, 0.0026831456925719976, 0.0019834281411021948, 0.0016227918677031994, 0.0016472922870889306, 0.0018267680425196886, 0.001860443502664566, 0.0026038242504000664, 0.0020842419471591711, 0.0033710189163684845, 0.0014981013955548406, 0.0011847208952531219, 0.0034704289864748716, 0.0034931283444166183, 0.0018637795001268387, 0.0013576125493273139, 0.0016854460118338466, 0.001635795459151268, 0.0027232975699007511, 0.0025529926642775536, 0.0013608059380203485, 0.0024140859022736549, 0.0019178345100954175, 0.0024678001645952463, 0.0012077214196324348, 0.0024741454981267452, 0.0025741022545844316, 0.0013467252720147371, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data39[16] = { -21368, -9457, -7539, 852, -7406, -9498, -23802, -1311, -11546, 904, -11479, 10598, 10458, -1090, -26603, -18014, };
const TfArray<1, int> tensor_dimension39 = { 1, { 16 } };
const TfArray<16, float> quant39_scale = { 16, { 4.5277552999323234e-05, 4.3736064981203526e-05, 8.3519917097873986e-05, 4.2968953493982553e-05, 5.0414379074936733e-05, 5.7443903642706573e-05, 4.1072533349506557e-05, 3.9058671973180026e-05, 5.1157010602764785e-05, 3.7511905247811228e-05, 3.3527543564559892e-05, 4.0130646084435284e-05, 8.0704718129709363e-05, 5.4185278713703156e-05, 3.9420330722350627e-05, 4.9379283154848963e-05, } };
const TfArray<16, int> quant39_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data40[16*1*1*96] = { 
  /* [0][0][][] */ 17,11,45,-5,-26,-37,41,59,42,74,10,-26,6,51,-90,114,-19,-33,-51,-38,-21,4,-18,111,76,-90,-18,39,53,-52,127,-86,6,26,80,-50,19,98,-18,42,-15,23,22,65,15,45,22,18,-30,16,-41,-20,104,-56,30,5,-9,13,39,29,72,-35,3,25,3,12,-42,17,33,-12,74,-63,-63,-9,6,-32,-42,101,12,-4,-7,-14,-55,61,54,32,15,8,-28,-73,59,-34,-65,-11,5,11, 
  /* [1][0][][] */ 8,15,-57,-89,-76,-1,-33,49,113,-62,1,-6,56,-26,74,18,64,-103,72,-87,32,-18,12,20,-70,80,27,-10,59,-45,44,63,-13,4,13,33,12,11,72,-16,-77,56,-43,7,-37,-88,36,-14,-21,-27,-21,-22,60,41,-62,-32,31,-21,-45,-44,-20,-42,-2,-69,-35,42,-34,-16,12,-10,-23,48,27,-11,-36,-8,-10,47,-17,39,-21,78,59,127,38,-46,14,-43,29,-8,35,26,8,-26,-25,-58, 
  /* [2][0][][] */ -32,31,-9,-23,28,7,-20,-32,38,-41,31,-14,46,-52,31,-55,-17,0,41,-18,16,18,-37,14,-3,5,13,-12,-4,-2,4,-14,29,2,11,-3,-21,-18,-31,21,-7,36,-3,38,-13,21,63,36,-6,-13,-52,9,-4,127,-39,23,4,-15,-37,-9,-36,-27,36,3,6,34,39,7,-16,-28,-29,2,-24,-19,28,-16,-14,13,-15,35,26,43,4,-8,-50,-25,17,6,15,-17,16,24,33,1,-10,-12, 
  /* [3][0][][] */ -1,-32,-44,-85,-54,51,1,40,41,-5,-5,60,51,-2,-72,31,69,-12,12,-61,-7,-73,2,-13,-37,36,74,-23,-17,-65,-37,-2,-43,-84,-2,22,28,61,22,-37,-49,-67,-43,-34,-16,41,-5,21,38,4,50,18,21,-99,-82,-48,-12,-54,-45,-33,84,-2,22,-45,-73,32,-35,12,-33,17,36,-6,9,-20,36,-59,-38,13,-9,-46,-49,63,29,127,32,17,-25,-19,18,-6,44,83,-28,76,-40,44, 
  /* [4][0][][] */ 17,-49,30,-66,40,-27,14,-34,40,-28,1,-32,-24,-35,42,60,25,-35,-6,-46,-33,2,31,-64,-32,16,-127,28,71,14,27,48,7,-27,50,2,-22,11,31,82,21,44,31,-89,23,-21,-2,22,-96,16,57,52,-91,76,29,5,-1,-19,-35,34,-22,66,-11,97,11,-20,25,-79,100,34,-34,98,45,2,15,18,32,-52,21,25,2,-35,-21,-72,-36,-24,-16,-4,-36,77,-93,20,-44,-63,53,-17, 
  /* [5][0][][] */ 104,44,23,21,-99,82,15,73,-18,10,9,-23,9,41,30,107,-44,-15,32,-61,-16,13,0,40,-29,-1,59,-7,-20,-2,-14,7,19,65,-70,15,14,-80,-100,-66,8,73,-2,-30,-48,-48,-30,22,-25,-17,-33,73,33,-104,10,47,6,66,11,9,112,-6,19,-26,31,-22,62,-23,24,-30,53,-75,30,23,-32,66,-28,110,-14,10,45,127,-28,-11,40,40,-30,-13,-36,-35,33,-20,12,14,-2,3, 
  /* [6][0][][] */ 22,-3,41,87,-60,-29,32,6,127,-63,30,12,-58,-96,15,118,-66,-40,37,-45,28,45,13,13,81,-30,41,47,96,-2,-75,72,-5,22,93,-4,-7,32,34,-32,53,69,22,-3,-33,3,-36,4,4,33,59,59,-80,14,-6,35,18,-21,51,64,-31,10,5,1,20,16,-12,-34,46,42,14,20,-27,-4,22,67,28,-10,77,-18,49,-87,-19,-115,-25,-116,38,56,-80,-21,-32,-52,-14,-1,70,-39, 
  /* [7][0][][] */ 127,66,10,-11,49,-6,0,-16,-36,37,-44,36,-77,-12,6,54,-73,51,34,23,-14,-24,25,-40,27,-53,-42,24,78,-28,-47,-77,-63,69,67,-21,-27,10,35,-25,18,30,-9,-30,49,-7,-35,-25,22,35,34,-62,-80,3,-7,-11,-26,-12,17,39,-39,-9,40,-26,-33,76,22,-76,-71,23,-89,49,-9,13,-5,14,15,22,73,-87,17,-65,-28,-18,11,57,-29,13,-9,11,-52,-101,2,71,50,-70, 
  /* [8][0][][] */ -41,-20,17,15,39,3,28,8,-6,-5,34,-16,37,-74,57,-64,87,47,-21,-4,20,-17,-8,19,-19,-1,2,-9,24,-2,7,101,-31,-12,-21,3,-34,37,55,18,-55,-2,-31,54,0,-31,-44,-6,-6,-3,-12,-15,-42,127,-13,-34,8,-10,-40,5,22,1,-1,10,-3,10,-46,-40,11,-3,42,-5,-42,-1,-18,-23,33,-1,-29,51,-29,98,-7,111,60,49,26,-92,-15,-2,31,3,-25,-10,-17,-30, 
  /* [9][0][][] */ -34,-51,21,18,36,23,-24,-51,41,-61,4,28,18,17,-1,-28,-14,-54,-17,8,29,-1,96,-35,-5,-53,15,-14,69,-47,-25,26,44,21,16,38,-6,-1,6,9,13,11,30,-46,-29,-8,72,-55,3,-11,-127,6,-71,-47,-1,55,-11,-6,39,12,-77,20,-33,4,3,60,-90,26,-17,-25,-49,-11,-32,28,28,34,-24,-28,-4,16,59,-38,0,47,29,-13,37,101,47,51,33,-1,-21,-28,20,-19, 
  /* [10][0][][] */ -41,-21,-31,35,-31,60,22,39,81,-100,81,-116,-25,-115,92,-112,-57,61,63,-39,-47,51,-32,-64,-37,-16,-67,-19,-72,-37,50,25,89,56,-14,-8,-15,7,-5,-15,14,66,33,-57,-86,0,44,43,12,-24,-54,24,-21,14,29,59,9,66,-40,50,-73,-15,30,-3,76,53,78,49,-67,-7,-100,-5,59,30,36,25,-31,-5,22,86,60,89,-12,119,21,-34,-6,8,29,73,43,60,-38,-127,24,-5, 
  /* [11][0][][] */ 13,-10,19,-27,56,-112,-20,-26,42,-40,18,34,-29,-76,18,8,-51,-45,-38,-98,19,34,-63,-4,-16,49,-19,52,-17,-21,-41,55,33,26,-6,-6,-10,10,-78,-21,3,29,16,-27,-3,9,115,-28,-21,-14,10,-127,9,13,3,-33,37,-43,25,-79,46,-61,30,-6,28,37,-45,-23,41,-4,-10,27,15,-49,-3,-32,2,14,-42,71,-5,-27,60,-86,-16,-70,-9,-5,32,59,-19,-31,46,-86,12,48, 
  /* [12][0][][] */ 19,-19,34,32,-12,19,-25,-28,0,-11,8,-11,-12,-1,-23,-39,4,-48,-34,-47,-1,1,25,-13,-40,-14,-127,-10,13,-15,-23,-14,13,-29,26,16,11,-4,-3,-15,13,5,10,-16,-5,-6,12,-2,-19,11,-14,36,-24,-77,18,21,-2,30,40,6,-9,50,-30,14,24,-65,29,8,-4,4,-24,54,-14,23,-9,48,-9,-4,13,33,24,8,-3,21,4,-14,9,8,-1,43,-27,13,-18,-46,41,13, 
  /* [13][0][][] */ 75,10,-56,-15,-20,2,51,15,-127,-10,9,-9,71,-6,67,24,49,14,19,11,-10,-18,14,-20,34,27,-58,4,16,46,-21,24,-50,-21,50,2,-33,-29,-53,7,-25,31,-37,-86,-4,81,3,28,53,-32,-38,3,-47,-12,-30,-24,21,-23,-9,4,-47,-14,58,16,-51,-10,35,-49,35,-4,22,-25,32,7,7,-27,-16,48,-17,-3,-40,44,-7,-37,81,6,-38,2,9,29,-3,9,38,28,-39,-49, 
  /* [14][0][][] */ -71,62,20,-17,64,103,-40,6,-51,107,-54,-13,-38,-97,-2,65,-32,113,70,5,-85,8,-13,41,62,-53,45,-26,-30,94,-4,4,30,-4,57,-37,5,-3,29,2,56,31,47,15,60,62,-81,0,-127,49,79,105,2,13,60,44,-73,37,12,-21,-6,35,-41,-24,19,6,19,29,-18,-75,32,80,2,44,-6,-43,-31,22,22,-64,71,-86,-32,15,61,-59,-49,104,-6,-80,58,7,-31,68,52,-79, 
  /* [15][0][][] */ -103,19,0,-1,71,45,-47,51,-20,12,-19,15,30,-21,57,67,-32,7,24,46,-30,13,-24,-25,-47,0,53,-37,-5,22,33,-11,73,64,17,-34,-1,73,-33,10,8,44,10,-4,33,16,57,18,-40,-3,-96,-11,47,-16,21,27,-29,6,56,-9,96,-64,-68,1,39,48,-82,-11,84,-47,68,46,45,-3,9,-85,-20,58,49,-21,16,49,-38,127,25,40,-83,-23,9,-52,21,-11,-52,-19,10,-56, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0024687526747584343, 0.0023847033735364676, 0.0045539126731455326, 0.0023428767453879118, 0.002748837461695075, 0.003132121404632926, 0.0022394745610654354, 0.0021296690683811903, 0.0027893295045942068, 0.0020453317556530237, 0.0018280850490555167, 0.0021881184075027704, 0.004400414414703846, 0.0029544453136622906, 0.0021493884269148111, 0.0026923990808427334, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data41[96] = { 525, -46, 392, -68, -233, -966, -1477, -11, -84, -695, -6850, -1406, -14438, 27, -1276, -1138, -1245, 8623, 12255, -321, 16895, 73, -997, -853, 7731, 11002, -1754, 5226, 12203, 2251, -71, -441, -969, -297, -3176, -9122, 23, 14023, -93, -787, -339, -107, -708, 120, 18928, 588, -1658, 4934, 9773, -95, 13710, 19, 1052, -1516, -273, -107, -3355, -38, -473, -3, 54, -5251, 83, 588, -319, 17483, -61, 1521, 1200, -12, 166, -2300, 12416, -524, 6419, -1298, 11759, -6705, -61, -2122, -144, -13, -7981, -36, -4430, -12251, -11765, -3107, 20703, -3710, 1335, -5073, 19948, -1308, -1657, -4379, };
const TfArray<1, int> tensor_dimension41 = { 1, { 96 } };
const TfArray<96, float> quant41_scale = { 96, { 0.00022028105740901083, 0.00018659657507669181, 0.00030206740484572947, 0.00055460014846175909, 0.00021944401669315994, 0.0001977321517188102, 0.00016567159036640078, 0.00014854405890218914, 0.00025214592460542917, 0.00027064647292718291, 0.00012747019354719669, 0.00011739359615603462, 8.9695873612072319e-05, 0.00036340075894258916, 0.0001168220624094829, 0.00038389215478673577, 0.00017338417819701135, 0.00012064683687640354, 0.0001345465425401926, 0.00032466731499880552, 5.0905062380479649e-05, 0.00042620222666300833, 0.00018090865341946483, 0.00019378763681743294, 0.00014778906188439578, 0.00021521371672861278, 0.00026081540272571146, 0.00014081093831919134, 0.000130193613586016, 0.00015525090566370636, 0.0001551101595396176, 0.0001258074480574578, 0.0003297997172921896, 0.00010343726171413437, 0.00014272985572461039, 7.4830539233516902e-05, 0.00014099471445661038, 8.6098509200382978e-05, 0.00018032192019745708, 0.00029890498262830079, 0.00036649900721386075, 8.5261890490073711e-05, 7.7789532952010632e-05, 0.00017113510693889111, 4.4620566768571734e-05, 0.00021349804592318833, 0.00017137733811978251, 0.00016175628115888685, 9.9982426036149263e-05, 0.00017833766469266266, 0.00015479873400181532, 0.00014643657777924091, 0.00028794066747650504, 0.000290794821921736, 0.00031223974656313658, 0.00017151747306343168, 8.2640326581895351e-05, 0.00047068062121979892, 0.00020835603936575353, 0.0001164515851996839, 0.00028669383027590811, 0.00032191796344704926, 0.00017413204477634281, 4.5312648580875248e-05, 0.0003470226947683841, 0.00011240285675739869, 0.00010443326027598232, 0.0001575897476868704, 0.00019829481607303023, 0.00022670271573588252, 0.0002043862477876246, 0.00015278668433893472, 5.3742747695650905e-05, 0.00032614998053759336, 0.00010197413939749822, 0.0001027227845042944, 6.0151523939566687e-05, 0.00020476906502153724, 8.138273551594466e-05, 0.00042168560321442783, 0.00025845994241535664, 0.0002674614661373198, 6.7837681854143739e-05, 0.00025153794558718801, 0.00027414460782893002, 0.00010644665599102154, 0.00010641363769536838, 0.00014461555110756308, 4.2334704630775377e-05, 0.00027568358927965164, 0.00021120368910487741, 0.00010524119716137648, 5.1676972361747175e-05, 0.00020706852956209332, 0.00026651538792066276, 0.00014700663450639695, } };
const TfArray<96, int> quant41_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data42[1*3*3*96] = { 
  /* [0][0][][] */ 54,-13,5,-7,-12,-43,32,41,-43,-5,56,-114,-17,14,36,41,-84,-21,-90,17,-62,-39,-48,-29,-108,-32,7,-81,-44,25,-5,27,-3,55,89,57,28,-101,64,-54,-7,42,63,-47,7,11,23,-41,-113,-109,-77,43,-24,16,20,-127,11,127,78,61,42,-12,45,89,90,-87,79,-127,92,-127,-3,52,-99,119,32,127,-45,26,21,56,7,18,29,-41,-8,127,73,37,-108,7,15,8,-119,16,-21,-36, -32,3,127,127,-36,-7,-3,38,19,40,-12,15,61,-4,66,22,-127,33,-15,6,-109,-127,-127,-10,-67,-27,-54,-71,-26,60,-82,54,-30,55,127,41,-31,-47,-12,-28,-127,5,6,23,-50,-11,4,-126,-67,32,28,70,8,-1,-127,-8,58,-60,127,-24,-39,17,6,123,-123,-56,-31,-47,40,61,-60,-5,-26,-127,85,25,-32,5,98,73,-120,-60,81,7,-46,18,0,106,-42,-21,25,62,-46,-7,-20,33, -22,10,-12,-26,-39,48,-29,-83,-30,-39,7,118,5,-14,-36,-27,-42,-32,4,-18,-117,77,31,35,-5,-37,42,7,-48,0,70,-50,12,-116,52,-2,75,-85,-56,-56,3,43,41,30,-5,-6,73,-41,-80,-81,-23,25,16,-32,24,-54,103,-69,28,66,-2,-17,85,8,-9,-17,53,-64,29,54,72,-8,-127,-13,19,87,-127,-19,27,22,-26,48,-37,18,-12,59,113,59,-127,-7,-45,-28,-84,-26,20,50, 
  /* [0][1][][] */ 127,-127,-2,3,-34,-118,127,105,30,-22,28,-115,29,127,5,127,27,-127,-125,-22,-77,33,47,-127,-118,-127,-42,-62,-127,123,-42,127,-9,127,-53,83,-16,-76,127,127,31,124,33,-127,-127,127,30,-61,-127,47,-122,127,-127,127,-22,61,54,-79,-69,81,127,127,-127,81,-98,-127,127,53,127,120,-16,127,-90,-90,-127,112,-112,127,127,127,-17,-54,72,6,127,67,41,98,-118,2,55,51,-69,127,76,127, -113,116,-125,-94,127,11,-11,27,127,127,127,-12,127,-94,36,33,-20,101,66,127,88,92,35,21,-127,-55,-63,-127,121,-127,-86,104,-89,3,-62,127,-115,14,-48,14,69,127,127,35,-95,-120,-41,-9,-9,-127,45,-58,81,14,98,-35,127,32,-66,-127,-105,6,39,127,127,53,51,-51,-112,-57,-124,-17,1,113,22,-58,60,24,-77,28,127,-46,127,-65,114,-1,127,-43,-110,127,54,127,17,-17,127,-7, -18,17,30,19,-7,127,-105,-127,-32,-96,108,114,14,-42,-51,-35,85,-98,-127,-115,-127,-57,123,123,95,-81,127,-6,-103,-3,127,-72,22,-124,-110,37,89,-84,-47,82,33,66,5,92,-26,36,127,-127,-66,58,-114,4,34,0,-24,26,21,48,-34,-5,-17,83,73,57,7,-40,12,76,45,99,127,-21,-90,3,-71,75,-112,-12,111,85,13,127,109,127,98,-26,98,127,-86,-15,-127,-3,-117,-49,-34,104, 
  /* [0][2][][] */ 9,-32,-5,-1,-5,-63,33,27,-31,-2,-45,-127,54,31,-9,13,24,-22,-120,-6,-100,-11,-47,-33,-59,14,-81,79,-10,6,2,56,18,20,86,-3,16,-127,23,-25,-24,15,-97,3,-84,11,9,-74,-39,57,-127,1,-28,20,-12,55,-87,-58,-5,116,12,-18,-15,59,0,-112,48,73,22,8,-9,25,-85,-44,-82,-20,-64,95,-106,23,11,-9,19,27,5,97,42,-7,-106,-2,26,-8,-108,27,-28,-25, -9,1,-10,-35,21,-12,39,39,5,28,47,29,118,-12,127,3,-13,43,-84,17,8,39,-58,9,-65,-112,-65,-57,9,23,-66,-20,127,34,91,68,127,-34,-33,-22,55,-9,-127,-48,-22,-20,4,-45,35,95,-53,48,19,-4,49,43,5,32,-73,30,-11,1,14,38,7,-63,-43,-7,-4,61,-51,-40,-20,44,17,14,-38,-17,-18,14,-6,-28,102,37,8,62,-36,-21,-69,33,20,23,-41,-18,-34,-24, -9,32,-16,7,-5,67,-67,-77,67,-25,-8,123,68,-21,-83,-17,52,-76,-75,-18,-100,-11,26,25,15,-12,55,35,-11,-19,51,-25,-33,-64,49,-45,-13,-79,-38,-19,-31,16,-39,4,-56,-16,38,-74,-83,87,-75,-33,9,-8,-11,11,37,25,10,108,-8,-7,45,45,0,-13,40,60,8,59,54,13,-109,6,-49,3,-71,39,-52,-10,17,24,-44,6,-38,81,70,-22,-104,-14,-54,-20,-127,-37,-31,39, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant42_scale = { 96, { 0.011143365874886513, 0.009439367800951004, 0.015280694700777531, 0.028055578470230103, 0.011101022362709045, 0.010002683848142624, 0.0083808349445462227, 0.0075144036673009396, 0.012755314819514751, 0.013691202737390995, 0.0064483396708965302, 0.0059385942295193672, 0.0045374482870101929, 0.018383366987109184, 0.005909681785851717, 0.019419966265559196, 0.0087709920480847359, 0.0061031659133732319, 0.0068063107319176197, 0.016423957422375679, 0.0025751362554728985, 0.021560307592153549, 0.0091516328975558281, 0.0098031423985958099, 0.0074762105941772461, 0.010887023992836475, 0.013193878345191479, 0.0071232081390917301, 0.006586108822375536, 0.0078536830842494965, 0.0078465631231665611, 0.0063642263412475586, 0.016683589667081833, 0.0052325846627354622, 0.0072202803567051888, 0.0037854553665965796, 0.0071325050666928291, 0.0043554683215916157, 0.0091219516471028328, 0.015120717696845531, 0.018540099263191223, 0.0043131462298333645, 0.0039351419545710087, 0.0086572179570794106, 0.0022572223097085953, 0.010800233110785484, 0.0086694713681936264, 0.0081827705726027489, 0.0050578145310282707, 0.0090215737000107765, 0.0078308088704943657, 0.0074077923782169819, 0.014566064812242985, 0.014710448682308197, 0.015795283019542694, 0.0086765605956315994, 0.0041805291548371315, 0.023810338228940964, 0.010540114715695381, 0.0058909407816827297, 0.014502991922199726, 0.016284875571727753, 0.0088088242337107658, 0.0022922325879335403, 0.01755484938621521, 0.0056861275807023048, 0.0052829692140221596, 0.0079719983041286469, 0.010031146928668022, 0.011468218639492989, 0.01033929456025362, 0.0077290255576372147, 0.0027186863590031862, 0.016498960554599762, 0.0051585696637630463, 0.0051964414305984974, 0.0030428874306380749, 0.010358660481870174, 0.0041169114410877228, 0.021331824362277985, 0.013074722141027451, 0.013530083000659943, 0.0034317073877900839, 0.01272455882281065, 0.013868163339793682, 0.0053848209790885448, 0.005383150652050972, 0.0073156724683940411, 0.0021415872033685446, 0.013946015387773514, 0.01068416889756918, 0.0053238403052091599, 0.0026141849812120199, 0.010474983602762222, 0.013482223264873028, 0.0074366303160786629, } };
const TfArray<96, int> quant42_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data43[96] = { 4956, 1338, 5425, 2092, 9391, 16857, 3892, 14028, 901, 5668, 3112, 5480, 7677, 6911, 4090, -7208, 3838, 6948, -1803, 7658, 1175, 489, 6600, 7039, -4240, 5986, 6016, -1326, 3539, 3497, 6068, 4924, 5897, 4787, 3330, 762, 2161, 2270, 10431, 11456, 1280, 1628, 3717, 4092, -1871, 4044, 114, -2940, 4103, 490, 2397, 1983, 18769, 16220, 7678, 3563, -659, 14266, 16729, -2325, 5733, 1929, 7834, -138, 3779, 7463, 3475, 11475, 11741, -1515, 3835, 768, 3244, 400, 6271, -826, 237, 480, 2726, -6577, 5820, -1864, -746, 600, 882, 10158, 2544, 4259, 2208, 6163, 543, 540, 374, 3984, 842, 3180, };
const TfArray<1, int> tensor_dimension43 = { 1, { 96 } };
const TfArray<96, float> quant43_scale = { 96, { 8.651897223899141e-05, 0.00013467772805597633, 8.847514254739508e-05, 5.706876254407689e-05, 5.8906487538479269e-05, 5.5171753047034144e-05, 9.0309986262582242e-05, 6.7325934651307762e-05, 3.7842164601897821e-05, 7.8826429671607912e-05, 0.00010025304072769359, 7.9787787399254739e-05, 0.00011373216693755239, 6.0467806179076433e-05, 8.0958430771715939e-05, 7.476430619135499e-05, 7.5061456300318241e-05, 7.8390636190306395e-05, 5.11290090798866e-05, 5.9120855439687148e-05, 0.00025213492335751653, 8.5401596152223647e-05, 5.9905923990299925e-05, 0.00011470850586192682, 6.5724554588086903e-05, 8.3351813373155892e-05, 4.5853514166083187e-05, 7.4233306804671884e-05, 0.00011913709749933332, 0.00018726383859757334, 9.1861045802943408e-05, 6.905179179739207e-05, 8.3010279922746122e-05, 0.00014736212324351072, 8.3291408373042941e-05, 0.00031016749562695622, 0.00014993504737503827, 0.00011873780749738216, 5.2015471737831831e-05, 5.8872366935247555e-05, 9.2608497652690858e-05, 0.00011007775174221024, 0.00012949875963386148, 0.0001607881422387436, 0.00013264840526971966, 9.1469657490961254e-05, 5.8164954680250958e-05, 7.7948010584805161e-05, 7.676557288505137e-05, 0.000135949463583529, 8.5053623479325324e-05, 0.0001156594735221006, 5.2005849283887073e-05, 3.9124399336287752e-05, 0.00011255644494667649, 0.00017062709957826883, 0.00018390416516922414, 6.4442727307323366e-05, 5.3956937335897237e-05, 0.00010452798596816137, 5.9206111473031342e-05, 9.2133173893671483e-05, 6.8293018557596952e-05, 0.00014688055671285838, 8.4944091213401407e-05, 5.8555488067213446e-05, 0.00011084935977123678, 7.1901871706359088e-05, 4.7365847422042862e-05, 9.0898771304637194e-05, 0.0001059623173205182, 9.6666226454544812e-05, 0.00017602695152163506, 0.00010955634206766263, 0.00010343192116124555, 8.3303057181183249e-05, 0.00014926670701242983, 6.8093409936409444e-05, 0.00020610904903151095, 4.049719063914381e-05, 8.0692479969002306e-05, 8.5044252045918256e-05, 0.0002376246266067028, 8.690318645676598e-05, 6.5248408645857126e-05, 7.5412950536701828e-05, 0.0001523592509329319, 6.6078755480702966e-05, 0.00012999295722693205, 7.5709780503530055e-05, 0.00012287356366869062, 0.00023355412122327834, 0.00010742460290202871, 6.935015699127689e-05, 9.9326483905315399e-05, 9.3273563834372908e-05, } };
const TfArray<96, int> quant43_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data44[96*1*1*16] = { 
  /* [0][0][][] */ 82,-37,3,-23,-20,82,-24,111,-38,-72,-14,7,127,27,-41,-46, 
  /* [1][0][][] */ -125,53,-95,-127,33,-88,9,-1,72,89,23,69,-39,-41,-30,55, 
  /* [2][0][][] */ 102,-14,47,-23,7,31,-92,-14,99,-29,-127,36,-2,23,-7,45, 
  /* [3][0][][] */ -2,-115,19,-54,-65,-30,41,-15,17,-40,-1,-127,101,59,-118,114, 
  /* [4][0][][] */ -66,27,-127,31,-54,89,122,8,-56,-23,-7,97,2,21,49,0, 
  /* [5][0][][] */ -16,44,-63,-103,-50,22,-37,24,121,-5,52,127,-70,-9,4,-63, 
  /* [6][0][][] */ 50,-66,64,42,-55,38,-73,-8,120,53,127,-90,-35,51,-54,-4, 
  /* [7][0][][] */ 21,97,-62,2,38,-60,120,53,-77,-72,75,-51,20,44,-62,127, 
  /* [8][0][][] */ 87,125,-39,127,-83,-74,124,9,11,27,73,-98,-114,-49,6,20, 
  /* [9][0][][] */ 48,2,120,38,59,-4,-127,-28,49,-62,-53,-66,-26,-6,23,11, 
  /* [10][0][][] */ -6,-16,18,-34,21,-4,-34,-32,-28,75,-97,105,8,-127,113,-54, 
  /* [11][0][][] */ 13,19,-59,-15,-49,70,-34,47,59,-31,89,-28,19,80,19,-127, 
  /* [12][0][][] */ 116,-97,-27,-122,111,45,44,-7,-39,0,33,-78,127,-37,19,-29, 
  /* [13][0][][] */ 50,-11,-9,-34,-5,22,-127,-25,-74,38,-119,-127,39,86,-69,29, 
  /* [14][0][][] */ -84,-11,0,51,52,43,24,-26,59,-26,59,-127,-46,-6,8,-62, 
  /* [15][0][][] */ -37,-55,28,-19,76,-41,32,-33,-127,-4,-36,4,-45,-14,-5,-79, 
  /* [16][0][][] */ -10,-40,-38,-98,81,-45,20,2,-23,-50,30,127,12,0,-77,-49, 
  /* [17][0][][] */ 52,-24,-2,-91,-44,-8,-13,-47,-127,44,-84,-26,49,-33,-76,31, 
  /* [18][0][][] */ -15,-127,-38,-65,52,-60,-59,3,-51,-42,-78,-48,-18,102,-79,-13, 
  /* [19][0][][] */ 29,-48,96,-43,18,-53,-57,-15,35,20,17,-127,-9,47,-115,59, 
  /* [20][0][][] */ 42,39,37,25,127,11,6,46,-12,-42,36,-31,-12,45,75,118, 
  /* [21][0][][] */ 45,66,-45,13,-42,32,21,46,127,-68,76,-58,3,20,-35,6, 
  /* [22][0][][] */ -73,-28,31,-12,125,0,-14,43,-79,-18,-122,-100,75,20,-5,-127, 
  /* [23][0][][] */ -48,-42,-42,21,-15,51,-20,7,5,41,89,8,-38,127,-50,-37, 
  /* [24][0][][] */ -31,-11,117,-67,127,-3,-1,21,-48,-57,49,-25,74,27,8,49, 
  /* [25][0][][] */ -13,44,29,-7,-76,25,57,20,127,-43,6,-123,-9,1,19,0, 
  /* [26][0][][] */ -127,52,23,-95,24,-14,-68,-2,88,-24,85,-112,21,81,-111,73, 
  /* [27][0][][] */ -24,-127,21,-75,24,62,51,13,40,-10,-118,44,109,-17,33,61, 
  /* [28][0][][] */ -24,-21,3,30,-127,51,-118,-90,64,-87,86,20,-25,-43,9,37, 
  /* [29][0][][] */ -102,3,-48,-39,-20,4,39,13,-7,-41,-67,5,-112,69,127,24, 
  /* [30][0][][] */ 127,14,26,-98,31,-80,-125,-8,-12,-1,75,-38,-44,-14,-23,37, 
  /* [31][0][][] */ 18,102,-46,50,9,-77,86,-12,-11,127,-28,49,-10,18,-35,-55, 
  /* [32][0][][] */ -60,16,-52,-56,-4,51,20,54,8,-110,49,127,73,44,14,-55, 
  /* [33][0][][] */ 36,10,-4,-127,6,-6,-3,50,76,60,35,46,-72,-22,-54,89, 
  /* [34][0][][] */ 58,118,0,74,-73,-27,-56,31,70,-22,-23,-66,-30,127,44,63, 
  /* [35][0][][] */ -87,47,-85,127,-29,-77,-38,92,-29,-41,-59,9,-110,86,-47,-47, 
  /* [36][0][][] */ 2,31,27,-56,-127,-23,34,-47,-109,42,113,-18,34,4,-31,-5, 
  /* [37][0][][] */ -96,60,15,54,36,-116,12,-94,50,29,-7,25,-127,13,29,35, 
  /* [38][0][][] */ 101,3,-84,37,-73,-53,-43,23,127,27,-5,-57,-2,15,117,5, 
  /* [39][0][][] */ 127,-65,13,-50,51,22,-13,-46,-5,38,-76,-127,-109,-19,45,33, 
  /* [40][0][][] */ -93,42,-12,47,18,26,-43,-57,33,127,-15,-124,-9,-6,-10,22, 
  /* [41][0][][] */ 127,-14,-18,-8,-45,82,67,66,-59,-118,-3,24,-1,51,82,-41, 
  /* [42][0][][] */ -108,-4,62,-14,-57,93,127,-96,108,42,-56,49,91,-99,-68,52, 
  /* [43][0][][] */ 47,-6,68,-9,-127,-90,41,3,81,-14,-80,-62,-13,-111,-33,-6, 
  /* [44][0][][] */ -73,-1,63,69,7,114,-125,36,111,69,-12,119,-57,-88,-102,-127, 
  /* [45][0][][] */ 114,-25,23,99,-44,-31,-40,14,73,25,-5,-30,19,127,41,42, 
  /* [46][0][][] */ 44,-6,103,-35,101,-17,81,-81,-69,-14,-66,81,-23,127,-78,-27, 
  /* [47][0][][] */ 7,37,13,-77,127,20,-29,59,54,-29,-41,-14,38,-13,-26,36, 
  /* [48][0][][] */ 88,82,67,27,11,-16,-47,-16,106,56,0,53,35,-127,125,-6, 
  /* [49][0][][] */ -6,37,87,127,48,-15,104,32,78,-79,-22,45,-19,-30,42,70, 
  /* [50][0][][] */ -7,-53,27,-48,-11,-13,-2,-31,-40,7,34,46,127,-74,8,20, 
  /* [51][0][][] */ -49,-11,20,55,-32,56,-34,-68,0,56,27,-127,18,-21,58,12, 
  /* [52][0][][] */ -118,-70,-77,42,86,127,12,51,122,-33,-29,60,-57,11,-22,-37, 
  /* [53][0][][] */ 127,29,-13,39,51,29,50,37,-2,79,-18,30,-126,-65,15,-35, 
  /* [54][0][][] */ 83,23,56,4,21,-69,-127,8,24,-1,-30,-29,-94,-47,61,64, 
  /* [55][0][][] */ -11,-39,73,63,17,41,-26,-30,-67,26,-24,-127,21,12,57,7, 
  /* [56][0][][] */ 43,-22,-127,-126,-54,21,-16,-26,-39,-22,82,-32,-54,-63,-7,102, 
  /* [57][0][][] */ -43,-27,56,96,18,46,-29,-81,-64,-13,-10,-127,13,8,36,-24, 
  /* [58][0][][] */ -98,-12,46,69,88,19,2,4,81,2,77,12,-55,-35,-38,-127, 
  /* [59][0][][] */ 127,57,-7,-25,64,43,19,79,92,-41,92,-75,41,5,-59,102, 
  /* [60][0][][] */ 24,-127,15,98,21,33,-95,16,102,-18,-77,85,86,-54,74,95, 
  /* [61][0][][] */ 65,84,9,79,39,62,-5,-33,114,-62,43,-31,127,31,2,2, 
  /* [62][0][][] */ 127,-47,-2,40,-90,97,16,77,-25,2,13,18,-33,16,-32,-34, 
  /* [63][0][][] */ 66,3,127,100,102,-74,17,84,77,44,66,14,-96,57,-113,29, 
  /* [64][0][][] */ -34,-11,-28,10,-5,20,-34,34,92,-118,-3,127,24,23,-7,1, 
  /* [65][0][][] */ -28,107,-59,-27,51,-90,-36,-103,127,15,-8,-41,20,83,70,38, 
  /* [66][0][][] */ 93,-58,35,99,4,57,7,24,-100,-8,-43,-127,11,34,-13,-85, 
  /* [67][0][][] */ 84,18,22,9,-83,-127,-58,-45,-59,3,-18,-126,-9,-2,-60,47, 
  /* [68][0][][] */ 127,26,-56,-49,123,107,51,-120,-52,-71,-114,-13,-50,45,-103,89, 
  /* [69][0][][] */ 77,-107,-77,64,-65,19,109,-38,21,-127,46,-4,9,-52,-1,-21, 
  /* [70][0][][] */ -17,-55,9,-5,-14,30,32,-46,21,-7,-71,-16,20,127,-26,40, 
  /* [71][0][][] */ 104,11,-37,3,-3,-52,63,21,-102,-39,-127,51,14,-57,98,40, 
  /* [72][0][][] */ 68,-21,127,-31,-117,-75,34,-16,90,20,-87,1,-2,-81,29,-42, 
  /* [73][0][][] */ 56,63,-13,-40,52,-59,13,25,56,-70,42,91,42,31,-8,127, 
  /* [74][0][][] */ -118,127,-68,-93,11,86,90,18,19,-16,9,126,41,5,-30,-66, 
  /* [75][0][][] */ 25,127,-81,-1,-72,58,-65,102,57,35,-30,67,110,-19,-28,15, 
  /* [76][0][][] */ 113,19,109,58,-93,-127,-5,-28,-48,59,16,-22,1,101,-13,-5, 
  /* [77][0][][] */ -35,-14,-13,-115,-61,-12,-52,-64,36,-13,72,59,127,-3,45,72, 
  /* [78][0][][] */ 3,71,21,23,21,-21,28,81,-26,-89,17,-67,-84,31,6,127, 
  /* [79][0][][] */ -11,49,116,-42,127,-68,-50,-80,102,-83,17,66,90,127,-52,-29, 
  /* [80][0][][] */ -1,71,-92,-105,1,18,-41,4,127,-21,34,78,8,24,-97,9, 
  /* [81][0][][] */ -4,-41,-9,-49,0,-16,-2,40,-74,14,5,10,127,-64,4,34, 
  /* [82][0][][] */ 8,48,70,21,3,-127,65,15,-26,83,33,36,25,68,-19,-25, 
  /* [83][0][][] */ -41,-88,28,-10,22,-24,44,-9,-127,-30,16,11,17,-35,-9,1, 
  /* [84][0][][] */ 23,-119,-30,-127,-21,-41,47,36,-115,25,-14,104,19,-94,40,-3, 
  /* [85][0][][] */ 38,-26,-127,7,8,-79,59,94,-37,51,-63,-39,2,2,37,-33, 
  /* [86][0][][] */ -13,-127,-21,-21,12,45,65,26,-9,54,-17,36,-6,10,-47,-5, 
  /* [87][0][][] */ 45,127,42,28,-110,-10,-102,-64,100,51,24,-73,-46,97,-2,6, 
  /* [88][0][][] */ 13,-127,-6,109,17,-66,32,12,90,-46,114,2,-82,-7,-116,-82, 
  /* [89][0][][] */ 34,-12,21,53,-78,5,-44,-72,124,21,127,12,-56,3,33,40, 
  /* [90][0][][] */ 40,-27,-24,-53,-35,88,-8,38,55,65,1,6,127,36,10,-24, 
  /* [91][0][][] */ -28,-34,-58,-127,49,36,29,85,7,21,-6,-8,55,-22,63,-11, 
  /* [92][0][][] */ -73,14,-13,-88,12,-1,-21,112,20,104,-115,2,34,7,-69,-127, 
  /* [93][0][][] */ -92,98,-127,-18,-55,-18,77,45,105,45,63,102,-49,-23,-3,-21, 
  /* [94][0][][] */ -39,86,85,121,-54,3,-64,-2,93,-76,-18,59,-2,64,28,127, 
  /* [95][0][][] */ -34,22,11,121,-45,50,-127,-83,-19,-43,-62,-74,0,25,-110,-17, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant44_scale = { 96, { 0.0031055551953613758, 0.0048341895453631878, 0.0031757708638906479, 0.0020484547130763531, 0.0021144188940525055, 0.0019803624600172043, 0.003241631668061018, 0.0024166307412087917, 0.0013583255931735039, 0.0028294352814555168, 0.003598532872274518, 0.0028639426454901695, 0.0040823593735694885, 0.0021704616956412792, 0.0029059622902423143, 0.0026836274191737175, 0.0026942933909595013, 0.0028137925546616316, 0.0018352501792833209, 0.0021221134811639786, 0.009050256572663784, 0.0030654475558549166, 0.0021502932067960501, 0.0041174045763909817, 0.0023591499775648117, 0.0029918716754764318, 0.0016458889003843069, 0.0026645674370229244, 0.00427636643871665, 0.0067217419855296612, 0.0032973063644021749, 0.0024785795249044895, 0.0029796124435961246, 0.0052894898690283298, 0.0029897033236920834, 0.011133306659758091, 0.0053818435408174992, 0.0042620343156158924, 0.0018670693971216679, 0.0021131942048668861, 0.003324135672301054, 0.0039511858485639095, 0.0046482933685183525, 0.0057714097201824188, 0.0047613480128347874, 0.0032832575961947441, 0.0020878019277006388, 0.0027979048900306225, 0.0027554617263376713, 0.0048798378556966782, 0.0030529573559761047, 0.0041515389457345009, 0.0018667239928618073, 0.001404350739903748, 0.0040401574224233627, 0.0061245742253959179, 0.0066011478193104267, 0.0023131393827497959, 0.0019367572385817766, 0.0037519799079746008, 0.002125173807144165, 0.0033070743083953857, 0.0024513436947017908, 0.0052722040563821793, 0.0030490257777273655, 0.0021018199622631073, 0.0039788824506103992, 0.002580881817266345, 0.0017001733649522066, 0.0032627659384161234, 0.0038034643512219191, 0.0034697859082370996, 0.0063183992169797421, 0.0039324699901044369, 0.0037126371171325445, 0.0029901214875280857, 0.005357853602617979, 0.0024441787973046303, 0.0073981811292469501, 0.0014536264352500439, 0.0028964162338525057, 0.0030526209156960249, 0.0085294172167778015, 0.0031193464528769255, 0.0023420590441673994, 0.0027069102507084608, 0.0054688588716089725, 0.0023718639276921749, 0.0046660322695970535, 0.0027175648137927055, 0.0044104852713644505, 0.0083833085373044014, 0.0038559522945433855, 0.0024892892688512802, 0.0035652744118124247, 0.0033480080310255289, } };
const TfArray<96, int> quant44_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data45[16] = { -11365, 21817, -10047, 959, -13632, -18303, -5214, -26934, 155, 9471, 8420, 2907, 19119, -10134, 22340, -27014, };
const TfArray<1, int> tensor_dimension45 = { 1, { 16 } };
const TfArray<16, float> quant45_scale = { 16, { 0.0001020996569423005, 8.2486025348771363e-05, 7.346852362388745e-05, 0.00011028678272850811, 8.5944309830665588e-05, 7.8775563451927155e-05, 7.4157411290798336e-05, 7.3554037953726947e-05, 0.00010719396232161671, 9.7867552540265024e-05, 7.9296587500721216e-05, 6.8802364694420248e-05, 9.5672236056998372e-05, 7.293421367648989e-05, 7.2914430347736925e-05, 0.00012150841212132946, } };
const TfArray<16, int> quant45_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data46[16*1*1*48] = { 
  /* [0][0][][] */ 45,46,41,-14,-61,9,45,-50,-28,-20,13,-50,-31,-23,14,19,-22,2,-36,53,10,-18,-29,7,22,-21,15,-34,-26,72,-9,50,-29,-30,31,62,-10,-20,127,-10,35,5,94,38,-35,38,47,-2, 
  /* [1][0][][] */ -8,-29,-61,-6,70,2,55,-74,3,58,21,-10,14,9,-16,-45,-1,10,-36,85,3,-1,-38,17,-12,5,9,-37,21,-26,-84,-74,17,16,-14,3,-56,-52,-7,-28,-21,-23,-46,1,-87,-1,73,-127, 
  /* [2][0][][] */ -2,-13,-102,11,-61,-102,51,-12,-67,-81,103,-28,79,51,63,61,36,73,-56,40,-18,4,58,-49,104,15,50,73,12,-39,60,25,23,2,55,43,-40,84,-44,-65,24,39,17,-45,-32,-2,-127,38, 
  /* [3][0][][] */ -10,21,-20,-20,-1,15,-4,-2,-14,-102,-54,-27,-53,2,19,83,8,-3,5,-36,21,-4,-29,20,49,-30,-12,20,28,-26,-12,-18,15,-21,-5,-31,-37,-11,127,-16,-9,-20,0,-32,1,-26,53,27, 
  /* [4][0][][] */ 23,-55,26,-18,127,-10,-35,-3,-19,9,-36,-48,-3,29,13,23,-76,-27,-38,16,34,41,50,-6,38,-16,16,-11,-33,15,5,-28,1,9,-48,14,6,43,-44,9,33,-95,-24,-41,-8,31,95,82, 
  /* [5][0][][] */ -33,5,-18,36,15,-15,7,41,38,34,83,-57,43,31,-74,15,37,59,45,-18,-5,35,23,-7,79,83,-85,-27,-31,48,-50,-80,-3,57,53,36,-23,113,105,-6,12,-119,127,-27,-15,42,-1,-32, 
  /* [6][0][][] */ -78,-41,44,-23,-29,-36,-2,9,-14,-20,-7,-46,-14,1,39,62,-13,25,-71,1,58,-24,31,-29,5,14,37,4,-49,26,-2,-42,14,127,31,50,-60,-54,125,-1,3,75,11,-96,108,29,81,-79, 
  /* [7][0][][] */ -49,-32,-36,20,84,48,-79,-92,33,7,-86,21,5,-51,15,7,74,40,-34,44,-30,1,-84,0,-85,-27,94,59,71,-61,31,62,37,-8,14,-35,-22,97,68,24,-70,-9,127,-40,-15,-10,-3,50, 
  /* [8][0][][] */ 34,-8,31,-2,-41,-2,-22,21,10,26,27,4,-7,19,0,-7,-30,-19,2,-17,14,-36,-78,-7,-21,27,-14,-22,13,4,-127,17,-16,-23,-27,-10,-12,-5,-25,12,5,62,34,-73,18,-2,27,87, 
  /* [9][0][][] */ 1,-9,-12,-7,-68,-9,35,18,39,36,-22,-62,-7,32,-36,-13,-7,11,-40,-53,64,29,-88,-11,-34,-8,43,14,14,1,3,-30,9,-18,5,7,-35,76,102,-11,-9,-32,-127,22,0,38,30,26, 
  /* [10][0][][] */ 26,13,-35,15,-17,-49,-73,-65,20,-7,-1,-42,-21,26,-41,23,-2,5,13,74,24,55,-60,-22,-18,20,-12,90,55,-20,-71,39,5,-54,8,-7,5,-79,58,-7,-26,-75,-27,26,127,24,-59,-80, 
  /* [11][0][][] */ -8,45,-42,-33,-61,-46,30,11,-43,32,-8,1,5,9,39,-64,0,9,8,-30,28,59,89,-13,-29,-21,-53,42,-29,-6,95,56,-1,-20,9,-3,-58,-127,116,-49,19,-68,96,-21,-88,-31,-48,76, 
  /* [12][0][][] */ -53,6,-21,-2,-8,-8,19,2,26,-3,-29,-36,-22,-24,-35,15,-32,-35,-12,-14,12,-16,10,4,5,-15,5,-16,-6,-14,-32,-13,24,49,-55,-46,-11,2,-79,-16,-34,20,28,14,-36,6,-127,-35, 
  /* [13][0][][] */ -42,2,13,-4,-92,-9,73,29,-19,-28,-4,71,3,-41,55,21,11,8,-48,-24,-44,37,-67,-9,-7,11,49,-10,53,-29,-80,127,-24,72,2,11,25,13,-124,19,-2,-86,45,74,98,-45,26,-23, 
  /* [14][0][][] */ 63,16,36,47,-51,-11,-38,42,49,-14,-30,70,2,-39,-26,56,41,-7,-8,-35,-39,23,-72,-56,72,-37,54,-50,-27,-1,-42,26,-25,-50,19,17,52,-90,127,57,-67,-26,-8,-47,-123,48,-70,-54, 
  /* [15][0][][] */ -28,119,-2,25,127,-6,25,10,25,18,-14,-25,-17,30,-33,7,20,36,-21,-19,14,-20,-5,-1,25,5,26,13,53,17,68,39,1,45,18,33,-13,-16,-14,-7,12,-30,-26,24,61,21,-96,38, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant46_scale = { 16, { 0.0043392353691160679, 0.0035056560300290585, 0.003122412133961916, 0.0046871881932020187, 0.0036526331678032875, 0.0033479614648967981, 0.0031516898889094591, 0.0031260466203093529, 0.0045557431876659393, 0.0041593709029257298, 0.0033701048232614994, 0.0029241004958748817, 0.0040660700760781765, 0.0030997039284557104, 0.0030988631770014763, 0.0051641073077917099, } };
const TfArray<16, int> quant46_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data47[48] = { 352, -8056, -1626, 2, 44778, 997, -245, -11, -772, 8437, 3506, 141, 30576, -2315, 37381, 733, 399, 78, 62, 2531, 24216, 6451, -1168, 217, -2855, 29, 34051, -2336, 24574, -277, -2673, -407, 18074, 2670, -1351, -129, 43, 536, 4118, -54, 1759, -7, -1696, 701, 25179, 2712, -1132, 1110, };
const TfArray<1, int> tensor_dimension47 = { 1, { 48 } };
const TfArray<48, float> quant47_scale = { 48, { 7.3683724622242153e-05, 6.3156090618576854e-05, 0.00017699669115245342, 0.00020525160653050989, 5.8749352319864556e-05, 0.0003456026897765696, 7.4511517595965415e-05, 8.0749603512231261e-05, 0.00011496004299260676, 5.5688229622319341e-05, 6.1843435105402023e-05, 8.6696025391574949e-05, 2.7438327379059047e-05, 9.7166775958612561e-05, 3.7231482565402985e-05, 7.3074661486316472e-05, 0.00016967875126283616, 0.0001799668389139697, 7.6517921115737408e-05, 7.2857335908338428e-05, 3.6663455830421299e-05, 8.0819838331080973e-05, 0.00017742952331900597, 5.9571622841758654e-05, 0.00010846067016245797, 0.00011424009426264092, 4.2422165279276669e-05, 0.00026392273139208555, 5.9153222537133843e-05, 0.00013888567627873272, 0.00018627863028086722, 0.00017226145428139716, 4.3408872443251312e-05, 6.8088767875451595e-05, 0.00011485860159154981, 0.00017744101933203638, 5.5201660870807245e-05, 0.0001284347235923633, 0.0005927545134909451, 4.9786911404225975e-05, 0.00024973900872282684, 8.332389552379027e-05, 0.00018741363601293415, 6.3446866988670081e-05, 0.00017126197053585202, 0.00011806080874521285, 0.00026958889793604612, 0.00027012100326828659, } };
const TfArray<48, int> quant47_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data48[1*3*3*48] = { 
  /* [0][0][][] */ 16,15,-36,-1,5,10,6,-11,-45,2,40,14,-94,-10,6,5,-33,-127,10,-10,-127,-45,33,104,-14,44,19,-30,-29,35,-23,23,-92,21,-71,-1,42,-2,-10,14,3,19,0,29,5,103,-7,-4, 33,73,35,13,-12,-14,-9,13,38,23,23,-40,-79,-2,-3,9,26,-78,-114,12,-52,-30,-17,107,5,-22,-66,33,-69,-1,9,3,-127,23,62,36,65,2,-1,23,-3,20,1,29,-2,-107,14,0, 15,49,4,-8,3,0,-6,-7,6,0,-3,8,-112,-4,-2,-1,2,-8,24,-5,-33,-56,10,-67,-1,64,43,-34,-71,-35,12,-42,-44,3,11,-48,20,-1,-2,-15,1,9,5,22,6,-7,-1,-2, 
  /* [0][1][][] */ 86,55,-114,-71,-85,78,127,80,-127,127,116,119,-105,108,-127,100,-127,97,93,85,-79,-76,1,-127,46,127,-114,-2,-52,116,-17,127,-64,95,-127,-10,127,95,-127,52,88,107,100,64,-87,83,-2,66, 127,127,127,110,-127,-127,123,127,127,122,127,127,-127,127,-127,127,118,71,127,127,-37,-127,23,-16,127,87,-127,127,-127,19,-30,70,-60,127,120,127,92,127,55,124,-127,127,127,127,-127,-127,127,127, 39,86,4,-52,-30,42,-6,30,4,46,46,77,-23,17,-58,45,4,4,40,29,-63,-56,127,77,2,86,-81,-87,-83,-127,127,4,-57,44,30,-91,66,14,27,127,-3,43,1,24,-31,16,-9,-18, 
  /* [0][2][][] */ -10,24,-19,77,6,2,-7,-17,-38,-35,-16,14,-26,0,20,-12,-23,8,-1,-12,-69,-16,-18,115,8,1,-2,-25,4,29,-40,-1,-18,-15,-38,-4,-32,-21,-1,83,-4,-16,-8,-15,16,53,10,-12, -15,50,26,-127,2,3,-9,-13,30,-30,0,14,-8,5,16,-22,15,5,27,-3,-17,-23,-26,60,21,-82,-7,14,-21,-5,17,-9,-24,-25,31,7,26,-20,-1,-51,3,-9,-7,-27,17,-53,-5,-16, -5,27,0,54,7,-8,-9,0,11,-19,0,-22,-50,-10,32,-4,7,7,-37,-6,-12,-21,1,10,6,30,0,-23,-41,-24,6,-32,-33,-16,9,-14,-35,-5,-7,21,4,-3,6,10,4,-14,-9,4, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant48_scale = { 48, { 0.0048585142940282822, 0.0041643492877483368, 0.011670703999698162, 0.013533759862184525, 0.0038737801369279623, 0.022788146510720253, 0.0049130967818200588, 0.005324420053511858, 0.0075801676139235497, 0.0036719376221299171, 0.0040777958929538727, 0.0057165115140378475, 0.0018092122627422214, 0.0064069256186485291, 0.0024549476802349091, 0.0048183542676270008, 0.011188177391886711, 0.011866547167301178, 0.0050453934818506241, 0.0048040240071713924, 0.0024174933787435293, 0.0053290510550141335, 0.011699243448674679, 0.003927998710423708, 0.0071516158059239388, 0.0075326962396502495, 0.0027972077950835228, 0.01740238256752491, 0.0039004103746265173, 0.0091577619314193726, 0.012282731011509895, 0.011358474381268024, 0.0028622685931622982, 0.0044895969331264496, 0.0075734788551926613, 0.011700001545250416, 0.0036398547235876322, 0.0084686530753970146, 0.039084699004888535, 0.0032828201074153185, 0.016467144712805748, 0.0054941619746387005, 0.012357570230960846, 0.0041835224255919456, 0.011292571201920509, 0.0077846241183578968, 0.017775993794202805, 0.017811080440878868, } };
const TfArray<48, int> quant48_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data49[48] = { -743, 6183, 7753, 14367, 1064, 14809, 2093, -175, 7581, -38, 4247, 6234, -64, 364, 1700, 35, 10647, 13673, -1056, 330, 1302, 765, -3276, -1191, 8160, -3758, 2867, 25013, 5449, 9482, 1712, 7652, 1631, 837, 3522, 11832, -794, 8604, 256478, -1307, 4277, -488, 5902, 3011, 11686, 3894, -1326, 2219, };
const TfArray<1, int> tensor_dimension49 = { 1, { 48 } };
const TfArray<48, float> quant49_scale = { 48, { 0.00032251508673653007, 9.647471597418189e-05, 8.1706923083402216e-05, 5.7791556173469871e-05, 0.00023291958495974541, 6.8843270128127187e-05, 0.00024598356685601175, 0.00031266518635675311, 8.6627820564899594e-05, 0.00030072871595621109, 0.00010202094563283026, 7.9614939750172198e-05, 0.00029814243316650391, 0.00016653811326250434, 0.00024466219474561512, 0.00030359890661202371, 8.9978108007926494e-05, 5.3966406994732097e-05, 0.00022629821614827961, 0.00031030594254843891, 0.00023641878215130419, 0.00020819925703108311, 5.1342532970011234e-05, 0.00024934730026870966, 9.3181588454172015e-05, 8.7540436652489007e-05, 0.00022793615062255412, 3.6323119275039062e-05, 0.00010870800906559452, 0.00010650364856701344, 7.368655496975407e-05, 5.2823954320047051e-05, 0.00026479701045900583, 0.00027809315361082554, 0.00010886978270718828, 8.6787971667945385e-05, 0.00031158636556938291, 0.00011353981972206384, 4.4844027797807939e-06, 0.00027708255220204592, 8.6513369751628488e-05, 0.00018626810924615711, 8.7945540144573897e-05, 0.00022153439931571484, 9.3516937340609729e-05, 9.2764923465438187e-05, 6.679426587652415e-05, 7.5139185355510563e-05, } };
const TfArray<48, int> quant49_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data50[48*1*1*8] = { 
  /* [0][0][][] */ -55,-95,39,52,44,64,-28,127, 
  /* [1][0][][] */ 68,15,65,76,-127,20,-33,8, 
  /* [2][0][][] */ 53,-127,-88,92,-14,-34,8,-75, 
  /* [3][0][][] */ 100,-7,-127,-71,2,4,-64,114, 
  /* [4][0][][] */ 11,-34,-10,-49,-25,-69,127,26, 
  /* [5][0][][] */ 127,-56,23,15,93,-2,-31,20, 
  /* [6][0][][] */ 127,64,90,52,32,-50,-1,28, 
  /* [7][0][][] */ 50,7,2,-127,-79,-21,-56,-62, 
  /* [8][0][][] */ -127,5,92,-4,29,67,68,-117, 
  /* [9][0][][] */ -41,-8,127,-45,64,-54,11,-92, 
  /* [10][0][][] */ -93,84,-31,13,34,-30,-127,-42, 
  /* [11][0][][] */ -77,119,102,-127,-123,-124,-23,-6, 
  /* [12][0][][] */ -10,76,-39,109,-127,-22,35,43, 
  /* [13][0][][] */ -14,-56,127,-11,-57,-110,-104,45, 
  /* [14][0][][] */ -98,-127,67,-94,-14,-43,-60,-24, 
  /* [15][0][][] */ 48,9,-127,44,-56,48,-6,85, 
  /* [16][0][][] */ 100,16,-127,1,102,101,45,55, 
  /* [17][0][][] */ 65,-54,-108,-37,-37,-126,-115,127, 
  /* [18][0][][] */ -127,-55,-72,-119,-50,90,-21,-35, 
  /* [19][0][][] */ -53,-7,-1,127,81,22,54,60, 
  /* [20][0][][] */ 65,-30,-37,75,127,42,34,34, 
  /* [21][0][][] */ 28,46,-26,99,21,11,-127,-70, 
  /* [22][0][][] */ -29,78,-124,-98,15,-50,-51,127, 
  /* [23][0][][] */ 101,8,84,65,127,-54,28,-8, 
  /* [24][0][][] */ 92,67,-110,-18,-39,43,-37,127, 
  /* [25][0][][] */ -34,-112,-45,59,-22,-30,54,-127, 
  /* [26][0][][] */ -127,-51,-90,-48,-50,50,-16,-26, 
  /* [27][0][][] */ 14,-127,-48,91,-38,5,48,-70, 
  /* [28][0][][] */ 3,127,36,-49,5,48,-20,84, 
  /* [29][0][][] */ -19,-16,-127,4,-58,-46,-2,-66, 
  /* [30][0][][] */ -36,53,35,22,-2,-127,-49,88, 
  /* [31][0][][] */ 58,-42,45,127,-67,66,55,-77, 
  /* [32][0][][] */ -55,-95,30,70,76,59,-1,127, 
  /* [33][0][][] */ 59,106,-37,-55,-44,-59,29,-127, 
  /* [34][0][][] */ -67,-17,123,91,-63,-73,-3,-127, 
  /* [35][0][][] */ 4,28,127,46,27,-56,12,-5, 
  /* [36][0][][] */ 68,0,-29,127,8,-16,21,85, 
  /* [37][0][][] */ 90,-112,-6,-36,127,2,-47,-3, 
  /* [38][0][][] */ 110,22,110,72,-120,17,3,-127, 
  /* [39][0][][] */ -54,127,30,7,-65,4,71,-22, 
  /* [40][0][][] */ 79,-127,100,61,-41,-30,-47,-30, 
  /* [41][0][][] */ 19,49,-38,103,8,3,-127,-68, 
  /* [42][0][][] */ 1,2,-8,-2,-5,127,38,-78, 
  /* [43][0][][] */ 102,31,12,127,48,-76,61,36, 
  /* [44][0][][] */ 3,38,126,-49,49,127,-37,72, 
  /* [45][0][][] */ 0,3,127,83,18,57,48,-22, 
  /* [46][0][][] */ -26,3,-46,-49,75,-127,-20,56, 
  /* [47][0][][] */ 36,-127,45,39,-84,29,-50,-69, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant50_scale = { 48, { 0.0057663600891828537, 0.0017249052179977298, 0.0014608667697757483, 0.0010332755045965314, 0.0041644508019089699, 0.0012308729346841574, 0.0043980265036225319, 0.0055902502499520779, 0.001548849162645638, 0.0053768339566886425, 0.0018240682547912002, 0.0014234634581953287, 0.0053305928595364094, 0.0029775933362543583, 0.0043744011782109737, 0.0054281512275338173, 0.0016087502008304, 0.00096488429699093103, 0.004046065267175436, 0.0055480687879025936, 0.0042270142585039139, 0.0037224674597382545, 0.00091797113418579102, 0.0044581680558621883, 0.0016660263063386083, 0.0015651661669835448, 0.0040753502398729324, 0.00064943375764414668, 0.0019436286529526114, 0.0019042161293327808, 0.0013174677733331919, 0.00094445800641551614, 0.0047343987971544266, 0.0049721249379217625, 0.0019465209916234016, 0.0015517125139012933, 0.0055709616281092167, 0.0020300182513892651, 8.0178208008874208e-05, 0.0049540558829903603, 0.0015468028141185641, 0.0033303529489785433, 0.0015724091790616512, 0.0039608911611139774, 0.0016720221610739827, 0.0016585765406489372, 0.0011942380806431174, 0.0013434397988021374, } };
const TfArray<48, int> quant50_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data51[8] = { -15227, 2341, -10777, -11497, 653, 1039, 5744, -10476, };
const TfArray<1, int> tensor_dimension51 = { 1, { 8 } };
const TfArray<8, float> quant51_scale = { 8, { 4.6035976993152872e-05, 5.2652718295576051e-05, 7.8426179243251681e-05, 5.1471204642439261e-05, 5.1785133109660819e-05, 4.7828089009271935e-05, 5.9738955314969644e-05, 5.1694456487894058e-05, } };
const TfArray<8, int> quant51_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data52[8*1*1*48] = { 
  /* [0][0][][] */ -38,24,8,31,3,-20,26,25,31,113,38,-32,78,10,55,-40,92,55,-7,-15,35,80,48,-51,-15,4,-42,-41,28,36,0,-38,49,23,48,-21,46,-127,-52,110,-29,88,-45,-1,-26,-51,22,24, 
  /* [1][0][][] */ 43,-55,40,-3,17,-48,-31,18,-38,35,33,48,-127,22,-41,41,47,42,-27,-23,6,7,-23,-12,18,31,-32,3,20,-20,-23,6,95,-17,-93,18,-67,27,-54,52,29,-34,40,-25,72,-24,-79,-4, 
  /* [2][0][][] */ -25,-29,26,52,31,5,-1,-1,5,13,24,-13,-52,-20,12,-5,12,4,-6,14,7,-9,-10,46,9,-22,55,-41,-21,-13,12,49,2,7,-40,27,20,40,-1,2,-22,127,25,14,1,6,106,1, 
  /* [3][0][][] */ 20,-13,-11,85,1,75,23,5,-21,-23,9,74,-12,3,33,20,-35,25,-11,87,20,41,9,-29,-9,-3,20,-6,72,114,63,21,-127,41,7,-78,-66,-51,-29,-32,-55,117,10,19,-57,96,92,-45, 
  /* [4][0][][] */ 28,74,-21,24,28,-47,-67,-30,58,127,15,27,-28,-1,-47,-20,-63,-18,-19,-33,-18,-15,17,-9,21,75,-6,62,8,-45,42,7,-42,12,15,-26,-49,29,18,32,-68,96,-52,-5,9,-3,-114,-5, 
  /* [5][0][][] */ 0,22,-75,-75,11,14,18,28,-2,1,-53,25,17,-21,16,-15,39,40,-36,36,45,66,41,-8,10,78,64,-70,33,8,56,-13,-25,20,38,-7,-27,-1,-21,-37,95,12,-22,30,-12,30,-127,-8, 
  /* [6][0][][] */ -69,6,16,27,31,-6,4,-23,19,-42,-48,-120,-72,3,69,-17,-36,55,-67,-15,44,-13,-28,9,-39,52,-16,-14,-27,4,-55,31,-57,15,12,-1,127,38,3,47,2,2,8,-15,44,38,-33,-2, 
  /* [7][0][][] */ 19,-10,-20,17,-84,-23,30,31,-40,-36,-43,-19,88,-34,9,58,24,17,64,-24,14,-6,99,-77,20,-34,127,37,31,42,-33,-63,14,-8,-4,-33,66,67,-17,38,-3,78,-3,34,-5,-26,-21,27, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant52_scale = { 8, { 0.002220681868493557, 0.0025398600846529007, 0.0037831193767488003, 0.0024828661698848009, 0.0024980094749480486, 0.0023071297910064459, 0.0028816857375204563, 0.002493635518476367, } };
const TfArray<8, int> quant52_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data53[48] = { 10229, -2327, 4022, 27525, 1100, 13346, 9456, -1342, -1111, -376, 1463, -395, -1017, 2321, -809, 603, -1565, 27229, 3942, -1485, 14661, -388, 9307, -4688, 6739, -2340, 23401, -1918, -2555, -6421, 10959, -439, 13147, 4403, 12208, 8299, 455, 10417, -2550, -1250, -5182, -2477, -4577, -604, 1541, -9292, -1988, -7084, };
const TfArray<1, int> tensor_dimension53 = { 1, { 48 } };
const TfArray<48, float> quant53_scale = { 48, { 0.000136219197884202, 0.0001922166848089546, 6.1819249822292477e-05, 6.5198953961953521e-05, 0.00039819936500862241, 0.000125462407595478, 0.00010804779594764113, 0.00015084975166246295, 0.0002895545621868223, 0.00019977767078671604, 0.0001854860020102933, 0.00016249259351752698, 0.00065305439056828618, 7.9713026934769005e-05, 0.00074314151424914598, 0.00020585875608958304, 0.00033830199390649796, 4.953408642904833e-05, 6.4863714214880019e-05, 0.00058434653328731656, 9.4106617325451225e-05, 0.00058110896497964859, 0.00013983981625642627, 4.2537198169156909e-05, 0.0001471229043090716, 0.00039439985994249582, 9.4206268840935081e-05, 0.00025978442863561213, 9.4773713499307632e-05, 0.00010196040238952264, 9.3017566541675478e-05, 0.00015012445510365069, 0.00013960360956843942, 0.00018960968009196222, 0.00021122103498782963, 0.00016904341464396566, 0.00017877388745546341, 8.9533074060454965e-05, 0.00010601607209537178, 0.0003081226022914052, 0.00013805656635668129, 0.00017407452105544508, 6.3260275055654347e-05, 0.00045146385673433542, 0.00024343779659830034, 0.00010780780576169491, 0.0004771529056597501, 7.8718345321249217e-05, } };
const TfArray<48, int> quant53_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data54[1*3*3*48] = { 
  /* [0][0][][] */ -3,3,36,23,-12,-22,-6,14,-16,55,22,-98,25,-44,-15,13,-30,-16,46,-12,-60,-52,-28,41,-127,-1,-78,63,-12,18,9,-48,11,-87,-18,-30,-25,29,2,-38,-55,-11,-16,-24,22,22,-15,127, -127,11,0,-82,3,-127,-95,-26,-60,-28,2,-111,14,-7,-1,-56,25,-127,51,31,3,-66,-127,60,-33,-14,-78,-18,38,31,-26,-90,-127,-20,-38,24,-57,-117,9,-61,-19,63,10,26,6,100,-1,70, 10,6,47,13,-9,-3,-14,-16,-55,-2,-10,-46,-20,55,-5,-31,-20,-30,70,-19,-31,-55,-2,-6,60,-3,-90,-20,-11,-5,2,-45,-35,-42,-35,19,-12,6,5,-5,34,-3,-4,-22,15,127,18,-59, 
  /* [0][1][][] */ -7,95,127,-102,-88,-69,-78,127,14,45,127,-127,-3,-127,-34,127,-31,-83,95,3,17,17,-16,127,-64,-33,-125,113,127,36,17,11,-16,-42,-38,-127,-127,-59,-14,-19,34,-44,98,-55,22,-75,-37,110, -84,66,-69,-4,127,2,127,-41,127,127,-121,111,127,10,127,-53,127,-57,-127,127,-127,127,50,-5,-88,127,41,-127,30,127,-127,-56,79,-127,-127,-13,126,-127,127,127,-12,127,-23,127,-127,-23,127,80, -5,-127,106,-127,-97,-60,-108,-11,7,-2,5,-13,37,89,-3,90,-6,-105,65,-6,-19,4,-2,118,46,-19,-127,23,25,39,-32,-4,-84,-54,-62,-52,0,-35,-3,2,127,-12,127,-20,-13,-7,-28,43, 
  /* [0][2][][] */ 3,23,-6,0,-4,25,-39,13,-28,79,15,-34,-2,-63,-16,99,-33,-62,18,-19,-71,-5,-16,76,-28,4,-50,48,12,4,27,59,25,-92,-42,-70,-42,8,9,-6,-44,-7,-10,-30,12,55,20,99, -96,-29,8,-49,-22,-53,-67,-25,-20,21,-16,29,30,46,-8,99,0,-1,-58,10,4,-18,-60,60,-19,-38,-76,-19,23,68,-42,127,-83,23,17,32,-1,-31,17,-22,-21,1,106,8,12,103,22,-4, -23,7,44,5,10,7,-37,-24,-21,0,-1,21,-24,38,-11,-24,-27,-66,79,-16,-99,-3,-4,9,63,2,-58,-31,-13,-30,19,51,26,-96,-65,49,-10,29,-9,5,54,3,-22,-24,5,125,9,62, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant54_scale = { 48, { 0.008635152131319046, 0.012184922583401203, 0.0039188209921121597, 0.0041330656968057156, 0.02524249441921711, 0.0079532619565725327, 0.0068493224680423737, 0.0095626069232821465, 0.018355326727032661, 0.01266422588378191, 0.011758253909647465, 0.010300665162503719, 0.04139816015958786, 0.0050531360320746899, 0.047108925879001617, 0.01304971519857645, 0.021445503458380699, 0.0031400448642671108, 0.0041118143126368523, 0.037042658776044846, 0.0059655685909092426, 0.036837425082921982, 0.0088646691292524338, 0.0026965008582919836, 0.0093263555318117142, 0.025001637637615204, 0.0059718857519328594, 0.016468150541186333, 0.0060078571550548077, 0.0064634326845407486, 0.0058965319767594337, 0.0095166284590959549, 0.0088496953248977661, 0.012019660323858261, 0.013389638625085354, 0.01071593165397644, 0.01133276242762804, 0.005675644613802433, 0.0067205280065536499, 0.019532384350895882, 0.0087516261264681816, 0.011034862138330936, 0.0040101697668433189, 0.028619015589356422, 0.015431910753250122, 0.0068341088481247425, 0.030247485265135765, 0.0049900817684829235, } };
const TfArray<48, int> quant54_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data55[48] = { 2055, 10105, 1782, 4537, 3468, 2224, 3442, 1281, 4352, -1481, 3876, -534, -9706, 4020, -4101, 509, 3624, 1226, 1221, -2205, 3595, -2294, 4361, 1211, 1450, 793, 7869, 1691, 666, 6527, 3205, 6543, 7124, -3017, 3354, 8883, 485, 5380, 1103, -526, -2352, -389, 1449, -795, 4228, 3098, -3554, 5771, };
const TfArray<1, int> tensor_dimension55 = { 1, { 48 } };
const TfArray<48, float> quant55_scale = { 48, { 0.00014871882740408182, 9.4359922513831407e-05, 0.00018458475824445486, 0.00017697871953714639, 6.436344119720161e-05, 0.0001677796826697886, 0.0001664596056798473, 0.00032023989479057491, 0.00012150905968155712, 0.00013181651593185961, 8.1857266195584089e-05, 0.00029499220545403659, 8.0843135947361588e-05, 0.00016292124928440899, 5.4506639571627602e-05, 0.00011138348781969398, 9.4622060714755207e-05, 0.00015225268725771457, 0.00024301248777192086, 8.1184902228415012e-05, 0.00021105534688103944, 6.7336288338992745e-05, 0.00013714993838220835, 0.00026576037635095417, 8.376870391657576e-05, 0.00021126485080458224, 0.00012327441072557122, 5.8285906561650336e-05, 0.0002391603629803285, 9.3228154582902789e-05, 0.00013044448860455304, 0.00010951353033306077, 8.9910019596572965e-05, 9.4563059974461794e-05, 5.5410262575605884e-05, 6.3222854805644602e-05, 0.00032147526508197188, 9.8438242275733501e-05, 0.00027838072855956852, 0.00012914952822029591, 0.0001877422328107059, 9.1240879555698484e-05, 0.00022794751566834748, 8.2498852862045169e-05, 0.00014129592454992235, 7.7938282629474998e-05, 0.00017626656335778534, 9.0619469119701535e-05, } };
const TfArray<48, int> quant55_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data56[48*1*1*8] = { 
  /* [0][0][][] */ -11,16,32,127,27,6,-45,-79, 
  /* [1][0][][] */ 127,-44,-72,25,84,-50,10,55, 
  /* [2][0][][] */ -72,-7,-54,-120,89,127,65,-11, 
  /* [3][0][][] */ 19,-23,68,84,109,-127,59,27, 
  /* [4][0][][] */ 1,-35,92,93,7,54,54,-127, 
  /* [5][0][][] */ -30,-127,-5,49,-36,-27,-47,-9, 
  /* [6][0][][] */ -3,-72,22,-11,-112,-116,-127,89, 
  /* [7][0][][] */ 92,32,-40,1,-52,61,-42,127, 
  /* [8][0][][] */ 78,-127,-7,-34,85,0,4,-23, 
  /* [9][0][][] */ 36,125,7,-67,127,7,30,-30, 
  /* [10][0][][] */ 83,-127,36,111,34,15,-73,61, 
  /* [11][0][][] */ 5,48,-17,76,13,0,-127,-68, 
  /* [12][0][][] */ 60,-92,-113,-73,-4,-54,-79,127, 
  /* [13][0][][] */ 106,63,-81,124,-51,-127,-45,-110, 
  /* [14][0][][] */ 125,-121,11,127,-65,27,52,31, 
  /* [15][0][][] */ 32,124,-58,6,-2,11,35,127, 
  /* [16][0][][] */ 127,-31,27,32,-43,47,-37,23, 
  /* [17][0][][] */ 127,127,-27,67,-43,17,97,-31, 
  /* [18][0][][] */ -64,127,0,-7,23,46,115,-83, 
  /* [19][0][][] */ 28,-52,56,127,-59,25,-22,-13, 
  /* [20][0][][] */ 55,0,17,49,96,-127,6,-85, 
  /* [21][0][][] */ 68,-62,-3,113,5,127,-2,-28, 
  /* [22][0][][] */ -15,-35,-29,-15,98,12,18,127, 
  /* [23][0][][] */ 79,27,-127,85,-50,1,4,113, 
  /* [24][0][][] */ 48,-6,116,127,-38,71,-120,16, 
  /* [25][0][][] */ 8,47,-57,19,33,127,70,-45, 
  /* [26][0][][] */ -62,-34,97,-5,40,114,-28,127, 
  /* [27][0][][] */ -32,-106,81,50,-127,110,-39,-103, 
  /* [28][0][][] */ -69,-71,104,-127,22,-82,42,-122, 
  /* [29][0][][] */ -51,-112,-127,-60,-43,-35,-56,105, 
  /* [30][0][][] */ -127,-37,68,11,120,47,-117,73, 
  /* [31][0][][] */ -11,-12,-127,-28,-26,19,-16,66, 
  /* [32][0][][] */ 40,127,-25,-69,-59,11,-47,69, 
  /* [33][0][][] */ 43,44,51,110,-12,127,60,67, 
  /* [34][0][][] */ 92,-114,49,127,-54,8,9,-40, 
  /* [35][0][][] */ 127,-55,49,46,-125,62,-92,34, 
  /* [36][0][][] */ 11,-37,12,-60,-18,-41,127,54, 
  /* [37][0][][] */ -127,-1,108,-31,115,-15,10,95, 
  /* [38][0][][] */ -21,-14,12,-32,-77,-97,127,-27, 
  /* [39][0][][] */ 110,127,-13,-17,56,-61,31,67, 
  /* [40][0][][] */ 30,62,62,57,15,-127,-35,22, 
  /* [41][0][][] */ 38,111,59,-28,40,-127,-16,70, 
  /* [42][0][][] */ 120,-43,-70,-74,127,103,-60,64, 
  /* [43][0][][] */ 8,-127,96,66,-19,91,-55,83, 
  /* [44][0][][] */ 45,-127,66,-68,11,-45,7,1, 
  /* [45][0][][] */ -49,-87,58,127,-47,17,52,-34, 
  /* [46][0][][] */ -25,-24,13,34,-69,-127,-44,47, 
  /* [47][0][][] */ -25,13,-127,27,53,-44,-14,53, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant56_scale = { 48, { 0.0023225026670843363, 0.0014735939912497997, 0.0028826114721596241, 0.002763829892501235, 0.0010051468852907419, 0.0026201710570603609, 0.00259955576620996, 0.0050011021085083485, 0.0018975749844685197, 0.0020585437305271626, 0.0012783433776348829, 0.0046068155206739902, 0.0012625058880075812, 0.0025442983023822308, 0.00085121579468250275, 0.0017394465394318104, 0.0014776877360418439, 0.0023776900488883257, 0.0037950619589537382, 0.0012678431812673807, 0.0032959957607090473, 0.0010515730828046799, 0.002141834469512105, 0.0041503095999360085, 0.0013081937795504928, 0.0032992674969136715, 0.0019251438789069653, 0.00091023562708869576, 0.0037349043413996696, 0.001455919467844069, 0.0020371172577142715, 0.0017102438723668456, 0.0014041010290384293, 0.0014767664251849055, 0.00086532748537138104, 0.00098733464255928993, 0.0050203944556415081, 0.0015372841153293848, 0.0043473984114825726, 0.0020168940536677837, 0.0029319210443645716, 0.0014248847728595138, 0.0035597961395978928, 0.0012883627787232399, 0.0022065811790525913, 0.0012171416310593486, 0.0027527085039764643, 0.0014151803916320205, } };
const TfArray<48, int> quant56_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data57[8] = { -5801, -2407, 2104, -8191, 6232, -9482, 4234, -11482, };
const TfArray<1, int> tensor_dimension57 = { 1, { 8 } };
const TfArray<8, float> quant57_scale = { 8, { 4.0716382500249892e-05, 2.6123798306798562e-05, 3.1080930057214573e-05, 3.6395595088833943e-05, 4.1478961065877229e-05, 2.5130573703791015e-05, 5.0845115765696391e-05, 3.0660299671581015e-05, } };
const TfArray<8, int> quant57_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data58[8*1*1*48] = { 
  /* [0][0][][] */ 18,33,50,42,1,5,33,85,86,73,30,-74,-57,76,7,-108,-31,28,127,37,87,-51,-36,-19,93,26,46,-16,-62,-18,-43,13,73,28,-36,-36,-103,-32,57,18,-6,-15,-20,-33,-93,-69,48,-36, 
  /* [1][0][][] */ -80,3,123,27,-21,60,2,-70,20,111,66,-37,18,-18,1,38,31,103,-21,34,87,-78,62,11,50,-36,70,75,24,60,127,-57,-15,-80,23,33,-101,-55,88,28,-113,20,-2,3,-74,-20,-108,-65, 
  /* [2][0][][] */ 5,-40,-32,8,-1,82,-31,40,62,48,12,-38,-27,-52,-11,-9,-24,-31,-108,94,54,-1,62,-104,71,76,-70,1,62,-24,-54,-84,-1,0,9,-32,-84,-5,43,-57,115,-18,-17,56,-127,39,-32,71, 
  /* [3][0][][] */ -72,55,127,-30,62,-26,49,-65,54,-12,1,-24,61,64,7,-11,-78,78,-27,4,85,-54,-47,71,57,-5,20,85,19,4,12,-28,75,43,64,-10,-88,-15,32,62,1,-25,38,-26,-24,7,-12,28, 
  /* [4][0][][] */ -20,17,-45,-80,28,24,-18,-46,12,-41,-56,74,7,-15,51,-73,54,13,6,-44,4,-71,-36,-62,51,-24,-20,33,64,9,-79,19,15,15,37,74,-48,-15,-12,-12,-13,-1,-9,-12,-61,-127,92,54, 
  /* [5][0][][] */ -39,23,66,-102,26,79,-56,74,46,-75,28,49,-22,6,29,69,92,127,-64,8,-31,7,61,12,-55,-116,-43,35,8,70,-66,120,16,25,-115,-52,44,-74,51,-52,-82,17,-8,-40,32,-67,40,63, 
  /* [6][0][][] */ 79,-25,-19,-41,-52,-30,6,-4,-25,-107,29,20,9,-29,-28,65,20,64,4,-41,6,60,-1,5,1,-22,-7,-127,12,37,-47,37,-42,-26,9,24,-19,9,10,-15,4,-6,5,18,-1,-50,-11,-36, 
  /* [7][0][][] */ 22,19,24,21,15,75,16,-53,19,-15,44,-1,58,57,-22,-127,-20,8,-30,-29,49,63,89,126,40,20,-85,-64,115,-50,116,-89,-49,-9,4,-5,-59,16,-5,64,-53,24,28,13,3,52,-32,114, 
};
const TfArray<4, int> tensor_dimension58 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant58_scale = { 8, { 0.0021292308811098337, 0.0013661232078447938, 0.0016253524227067828, 0.0019032786367461085, 0.0021691091824322939, 0.0013141833478584886, 0.0026589047629386187, 0.0016033559804782271, } };
const TfArray<8, int> quant58_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data59[48] = { 12191, -2646, 10696, -4399, 19624, 3967, 19705, 638, -5800, -2312, -1293, -2045, -695, 17454, 266, -4905, -1210, 22087, 15034, -1004, 3732, 6857, -1533, -1881, 15443, -419, -4128, 5392, -2025, -3314, -4850, 5259, -983, 5733, -728, 7054, -3982, 13577, 9524, 9403, 4515, -94, 609, -1382, 27537, -5454, 49, 9653, };
const TfArray<1, int> tensor_dimension59 = { 1, { 48 } };
const TfArray<48, float> quant59_scale = { 48, { 9.5296920335385948e-05, 0.00010231830674456432, 9.4042741693556309e-05, 0.00017454776389058679, 6.8493369326461107e-05, 8.3691746112890542e-05, 4.5056571252644062e-05, 0.00046860615839250386, 5.9228157624602318e-05, 0.00016077610780484974, 0.00011527839524205774, 0.00020360967027954757, 0.00011844177060993388, 5.6962067901622504e-05, 0.00011308203829685226, 0.00016915008018258959, 0.00019763571617659181, 9.9590521131176502e-05, 8.6941043264232576e-05, 0.000337908451911062, 0.00012850880739279091, 0.00014650549564976245, 0.00020636347471736372, 0.00012961348693352193, 0.00013837782898917794, 0.00013525719987228513, 0.00017963879508897662, 0.00015373843780253083, 7.9906320024747401e-05, 0.00013400228635873646, 9.3724527687299997e-05, 0.0001212370625580661, 0.00013585998385678977, 0.0001599166716914624, 0.00018390972400084138, 0.00012998709280509502, 0.00011429832375142723, 6.9220259319990873e-05, 0.00010402763291494921, 0.00010583475523162633, 5.8407022152096033e-05, 8.6856591224204749e-05, 0.0001584512647241354, 0.0001267822808586061, 9.7122465376742184e-05, 0.00014303484931588173, 0.00016196863725781441, 0.00010503004159545526, } };
const TfArray<48, int> quant59_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data60[1*3*3*48] = { 
  /* [0][0][][] */ -11,-6,-79,-32,-48,19,-15,-2,-63,7,7,3,-37,4,-6,11,-14,-10,4,-17,-11,-9,-34,-15,-2,87,10,-8,-27,11,21,2,-25,53,56,11,-4,-81,2,41,-4,127,-10,17,-94,41,-58,1, -64,26,-29,24,-69,1,-94,-19,-66,47,-13,-27,-3,-91,41,-4,-104,-100,-126,30,-108,-7,-19,3,-23,-127,13,-10,127,127,87,-26,-22,-127,127,106,100,-62,-40,-33,127,-93,-81,-63,-41,-8,6,-113, -23,-11,-58,18,-15,9,-101,3,-14,-58,20,1,-7,-27,19,9,-6,-28,-17,-25,-22,-12,-6,-17,3,77,-9,-5,2,8,8,18,-6,71,66,9,-1,-1,4,-6,-94,-68,-6,-29,-34,8,27,8, 
  /* [0][1][][] */ -61,-118,-74,-90,-46,79,-13,-27,-55,127,-40,127,-98,-32,1,24,22,-53,44,3,-114,-39,-28,-30,-114,-11,-19,-17,34,1,5,127,-9,52,-38,-28,127,-67,-40,-29,17,53,-18,127,-81,18,-127,-94, -127,23,-34,127,-127,-126,-12,127,-71,-12,-127,-27,127,-72,-127,127,-27,-27,17,-75,115,-12,127,127,16,-59,127,-127,57,-40,127,-87,127,-87,-88,-127,-111,-127,127,-127,108,-60,127,45,94,127,125,79, -73,127,-127,91,-7,127,-127,-5,127,46,127,1,-18,-118,98,2,23,-50,4,32,-127,-127,14,-1,-127,-43,-47,-20,81,-3,-9,47,3,30,-48,-57,126,-54,-67,-81,-45,-4,-20,2,-127,-2,-49,-127, 
  /* [0][2][][] */ -10,-53,-45,1,-36,36,-42,-14,-113,30,18,-7,-1,-62,-5,-12,4,-36,28,22,-9,16,-38,-65,-7,81,-4,-14,-44,-2,-12,0,-1,4,26,48,7,-8,-1,42,-48,55,-22,1,-110,38,-32,-40, -68,38,-58,-82,-82,68,-86,-13,-50,61,7,-7,5,-55,43,16,127,-127,-127,127,6,-34,-41,-46,-29,-124,0,-23,62,-69,-3,-19,1,-52,-92,-24,19,-6,-101,5,4,11,8,-75,-111,23,16,-25, -18,23,-45,-35,-28,58,-126,-10,21,-53,13,-12,1,-127,18,-5,-5,-24,-18,-21,-15,11,-7,-88,18,75,-18,-30,11,-3,3,-5,5,-14,2,30,21,39,16,-6,-119,-60,-4,-10,-33,1,-2,-32, 
};
const TfArray<4, int> tensor_dimension60 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant60_scale = { 48, { 0.0070428554899990559, 0.007561766542494297, 0.006950166542083025, 0.012899836525321007, 0.0050619570538401604, 0.006185182835906744, 0.0033298758789896965, 0.034632027149200439, 0.0043772174976766109, 0.011882050894200802, 0.0085195731371641159, 0.015047636814415455, 0.0087533602491021156, 0.0042097438126802444, 0.0083572529256343842, 0.012500924058258533, 0.01460613589733839, 0.0073601715266704559, 0.0064253201708197594, 0.024972898885607719, 0.0094973575323820114, 0.010827391408383846, 0.015251155011355877, 0.0095789982005953789, 0.010226721875369549, 0.0099960938096046448, 0.013276085257530212, 0.011361937038600445, 0.0059054233133792877, 0.0099033499136567116, 0.0069266487844288349, 0.0089599443599581718, 0.010040641762316227, 0.011818535625934601, 0.013591726310551167, 0.0096066100522875786, 0.0084471413865685463, 0.0051156771369278431, 0.0076880929991602898, 0.0078216474503278732, 0.0043165320530533791, 0.0064190784469246864, 0.011710234917700291, 0.0093697598204016685, 0.0071777710691094398, 0.010570894926786423, 0.011970184743404388, 0.0077621755190193653, } };
const TfArray<48, int> quant60_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data61[48] = { -1146, 1279, -207, -1250, 465, 345, 945, -2061, 3864, 5598, 456, 9243, 1108, 3530, 1574, 35, 4687, 6382, 5366, 2019, 982, -1069, 2599, 5967, 7342, 1698, 3504, 169, -811, 765, 3156, 4054, 1190, 5689, 1587, 2994, 591, 1201, 430, 4773, -458, 1124, 1089, 1519, 19634, -240, 1866, 1759, };
const TfArray<1, int> tensor_dimension61 = { 1, { 48 } };
const TfArray<48, float> quant61_scale = { 48, { 0.00030658472678624094, 0.00024520751321688294, 0.00010787487553898245, 0.00010985481640091166, 0.00014543460565619171, 0.00011461199756013229, 0.00022202289255801588, 0.00010522882803343236, 8.376126061193645e-05, 6.8679830292239785e-05, 0.00020897401554975659, 9.9308643257245421e-05, 0.00024373244377784431, 0.00011016867938451469, 0.0002557932457420975, 0.00020542624406516552, 8.8315697212237865e-05, 0.00010482504148967564, 0.00010881102934945375, 5.7369248679606244e-05, 0.00014778740296605974, 0.00010104128887178376, 0.00012936923303641379, 0.00011343337973812595, 9.119899186771363e-05, 0.00020935085194651037, 0.00019959123164881021, 0.0002816624182742089, 0.00016786863852757961, 0.00023577600950375199, 0.00012747669825330377, 0.00011462398833828047, 0.00016266893362626433, 5.748732655774802e-05, 0.00010032489808509126, 0.00011718714813468978, 0.00013150347513146698, 0.0001974388724192977, 0.00032821675995364785, 0.00010794885747600347, 0.00013909558765590191, 0.00033596099819988012, 0.00030597232398577034, 0.00017493253108114004, 4.8686426453059539e-05, 0.00018111948156729341, 0.00011525961599545553, 0.0001025813544401899, } };
const TfArray<48, int> quant61_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data62[48*1*1*8] = { 
  /* [0][0][][] */ -16,46,16,57,28,36,-127,-23, 
  /* [1][0][][] */ -51,-63,51,-127,-1,-17,71,-78, 
  /* [2][0][][] */ -98,115,-127,10,-40,81,55,36, 
  /* [3][0][][] */ 39,-28,-49,-65,-72,-127,-51,99, 
  /* [4][0][][] */ -37,-89,79,-81,-3,127,19,47, 
  /* [5][0][][] */ 2,-61,-87,72,-83,-52,127,-93, 
  /* [6][0][][] */ 45,69,-67,54,-1,-121,-15,-127, 
  /* [7][0][][] */ 127,4,29,-9,-76,40,-60,-23, 
  /* [8][0][][] */ -65,-102,-127,-27,91,5,-62,85, 
  /* [9][0][][] */ -127,31,4,-37,27,-81,62,102, 
  /* [10][0][][] */ -113,-127,5,-116,38,62,-34,-55, 
  /* [11][0][][] */ 38,94,52,-73,-127,-45,-52,-94, 
  /* [12][0][][] */ -127,-16,-43,77,-11,-61,86,19, 
  /* [13][0][][] */ 38,-76,-5,-115,127,-88,-49,-60, 
  /* [14][0][][] */ -6,-127,2,-45,55,-41,-117,-48, 
  /* [15][0][][] */ -127,14,-30,-10,7,31,41,-36, 
  /* [16][0][][] */ 121,-44,-2,127,31,-13,-10,35, 
  /* [17][0][][] */ 10,77,-49,82,-22,127,103,-21, 
  /* [18][0][][] */ 108,38,-127,-33,44,-63,48,-27, 
  /* [19][0][][] */ 33,-125,61,127,21,-10,25,-87, 
  /* [20][0][][] */ 100,57,63,127,35,-65,19,42, 
  /* [21][0][][] */ -127,80,-5,-72,-93,-22,114,49, 
  /* [22][0][][] */ -51,48,124,-84,87,94,-37,127, 
  /* [23][0][][] */ -43,5,-127,101,-46,-75,14,100, 
  /* [24][0][][] */ 127,37,88,95,26,-55,18,45, 
  /* [25][0][][] */ -3,27,-53,6,11,127,66,-47, 
  /* [26][0][][] */ 95,58,-97,78,-39,-127,23,-115, 
  /* [27][0][][] */ 17,-68,7,-81,-36,-11,127,51, 
  /* [28][0][][] */ -32,-11,-127,-41,-73,-57,51,-66, 
  /* [29][0][][] */ 127,-84,-48,-7,-2,-11,-92,118, 
  /* [30][0][][] */ 60,127,-60,-16,-82,9,-30,92, 
  /* [31][0][][] */ -127,-46,35,-43,68,-69,22,-16, 
  /* [32][0][][] */ 38,115,1,127,77,-98,9,11, 
  /* [33][0][][] */ 116,-127,-9,83,41,40,11,-88, 
  /* [34][0][][] */ 76,-28,24,-71,-102,127,-70,-30, 
  /* [35][0][][] */ 38,-38,-25,-127,-70,-46,-100,83, 
  /* [36][0][][] */ 122,61,79,127,53,-70,21,40, 
  /* [37][0][][] */ -11,-3,-127,63,52,120,84,-57, 
  /* [38][0][][] */ -16,127,59,-19,15,85,63,-21, 
  /* [39][0][][] */ -50,58,-115,127,-20,-65,51,123, 
  /* [40][0][][] */ 37,-1,-109,-19,-65,-2,-75,127, 
  /* [41][0][][] */ -84,-54,48,9,35,79,-41,127, 
  /* [42][0][][] */ -100,-127,-65,59,43,-53,51,-4, 
  /* [43][0][][] */ 127,-50,-46,17,-21,37,-22,124, 
  /* [44][0][][] */ -127,-99,-108,11,-99,110,37,-64, 
  /* [45][0][][] */ 17,35,-27,-66,127,74,31,-44, 
  /* [46][0][][] */ 85,-127,-5,-1,80,20,-10,-64, 
  /* [47][0][][] */ -93,70,78,-45,44,23,9,127, 
};
const TfArray<4, int> tensor_dimension62 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant62_scale = { 48, { 0.0053679696284234524, 0.0042933207005262375, 0.0018887734040617943, 0.0019234400242567062, 0.0025464040227234364, 0.0020067330915480852, 0.0038873825687915087, 0.0018424438312649727, 0.001466569839976728, 0.0012025102041661739, 0.0036589107476174831, 0.0017387878615409136, 0.0042674937285482883, 0.0019289354095235467, 0.0044786655344069004, 0.0035967931617051363, 0.00154631317127496, 0.0018353740451857448, 0.0019051643321290612, 0.0010044740047305822, 0.0025875989813357592, 0.0017691245302557945, 0.0022651164326816797, 0.0019860968459397554, 0.0015967965591698885, 0.0036655089352279902, 0.0034946282394230366, 0.0049316068179905415, 0.0029391997959464788, 0.0041281851008534431, 0.0022319802083075047, 0.002006943104788661, 0.0028481585904955864, 0.0010065414244309068, 0.0017565813614055514, 0.0020518212113529444, 0.0023024848196655512, 0.0034569429699331522, 0.0057467231526970863, 0.0018900686409324408, 0.0024354145862162113, 0.0058823167346417904, 0.0053572473116219044, 0.00306288106366992, 0.00085244711954146624, 0.0031712078489363194, 0.0020180721767246723, 0.001796089462004602, } };
const TfArray<48, int> quant62_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data63[8] = { -9396, -3601, 13322, 15809, -11548, 94, -5857, 11394, };
const TfArray<1, int> tensor_dimension63 = { 1, { 8 } };
const TfArray<8, float> quant63_scale = { 8, { 4.8176509153563529e-05, 4.8764100938569754e-05, 3.7095716834301129e-05, 5.2072693506488577e-05, 4.1541126847732812e-05, 2.280376065755263e-05, 3.3351996535202488e-05, 4.0247225115308538e-05, } };
const TfArray<8, int> quant63_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data64[8*1*1*48] = { 
  /* [0][0][][] */ -26,29,-29,2,-85,12,-56,-34,26,30,-71,-31,-32,4,51,70,-31,-8,-15,-20,-50,-38,-12,8,-2,28,39,-17,0,35,46,20,-24,42,-1,-23,35,15,-12,5,-27,-53,127,30,-28,-23,-3,-45, 
  /* [1][0][][] */ -28,-41,-38,-11,125,-14,-47,-3,-35,-59,36,16,57,32,-16,127,5,-20,-19,18,-1,0,-39,41,-7,4,0,-24,-22,1,9,-10,29,-11,-3,31,27,-48,-24,41,-8,-62,52,-17,-19,-24,-12,23, 
  /* [2][0][][] */ -11,22,3,-64,-22,-41,-31,94,32,-74,-55,-31,-14,-13,22,-127,50,-20,24,-35,69,-68,55,62,31,19,-37,-48,-54,-88,-69,-10,-17,-51,10,-119,78,-65,11,-56,-96,-25,72,-5,-20,12,4,-52, 
  /* [3][0][][] */ 5,-38,-47,30,-37,6,-5,-127,31,45,23,-55,-101,21,-23,-12,0,-35,26,-54,-12,29,36,12,3,9,42,-15,29,26,-33,43,37,-42,17,41,22,-66,-8,-21,30,-42,-95,9,-10,24,1,-37, 
  /* [4][0][][] */ -22,-36,30,-52,-54,-91,-16,109,36,-71,52,7,127,-64,-46,-27,-62,27,54,10,26,-24,50,-47,2,-25,-3,70,-16,-33,35,57,44,67,31,-44,8,54,-30,63,-37,46,19,-39,32,10,21,38, 
  /* [5][0][][] */ -24,-4,-13,15,-49,29,31,36,-29,56,-55,74,-95,80,-35,-126,-11,-12,97,98,73,6,-3,-53,-53,-37,33,23,-16,-127,95,-56,17,-15,-80,59,-70,-23,10,78,-3,0,-61,76,113,-20,44,103, 
  /* [6][0][][] */ 12,127,28,-36,24,15,-47,-61,13,-18,29,22,-31,31,-31,73,-3,28,15,20,-10,29,-36,25,-6,16,-19,48,-23,45,-3,-58,-122,-43,-12,55,9,-75,-45,36,-18,99,-36,-20,22,37,-24,40, 
  /* [7][0][][] */ -44,31,-18,35,-49,117,-4,-52,44,-1,24,-8,-69,7,39,-50,-69,-8,1,-2,127,14,-64,10,-15,-14,-1,-24,79,-69,-1,-31,-31,15,22,-12,27,-10,21,-14,24,-71,-84,-35,22,39,15,-40, 
};
const TfArray<4, int> tensor_dimension64 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant64_scale = { 8, { 0.0028812005184590816, 0.0029163416475057602, 0.0022185128182172775, 0.003114212304353714, 0.0024843709543347359, 0.0013637810479849577, 0.001994619145989418, 0.0024069889914244413, } };
const TfArray<8, int> quant64_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data65[48] = { 788, 4469, -8639, -7530, -2524, 11492, -7931, 26755, -6215, 16247, -1246, -583, 14972, 328, -3300, -2992, 18879, 3524, -1784, 156, -3571, 7152, 22101, 1276, 7148, 4394, 91, 2392, -8692, 9742, 466, 15203, 985, 11, -1834, -8983, -1747, 921, 6235, -3650, -6745, -1852, 6471, 330, -1010, -3677, 4393, 296, };
const TfArray<1, int> tensor_dimension65 = { 1, { 48 } };
const TfArray<48, float> quant65_scale = { 48, { 8.0268466263078153e-05, 0.0002536488464102149, 9.8352429631631821e-05, 7.4857678555417806e-05, 0.000166501515195705, 0.00010005319199990481, 0.00011513452045619488, 0.00017539242981001735, 6.6831424192059785e-05, 7.4088806286454201e-05, 0.00019479992624837905, 0.00012397624959703535, 0.00010476593161001801, 0.00021540200395975262, 6.8555833422578871e-05, 0.00016718172992113978, 0.00010223088611382991, 9.3971306341700256e-05, 0.00026643305318430066, 0.00011696697038132697, 5.5241838708752766e-05, 6.6714630520436913e-05, 6.8470792029984295e-05, 0.00015795970102772117, 7.2957918746396899e-05, 0.00013054054579697549, 0.00020898162620142102, 0.00024391703482251614, 0.00015283632092177868, 0.00014844146789982915, 0.00022885629732627422, 7.4087372922804207e-05, 0.00017359165940433741, 0.00017537434177938849, 0.00010553498577792197, 5.3348539950093254e-05, 0.00020959855464752764, 0.00018067283963318914, 7.3481714935041964e-05, 0.00018015789100900292, 0.00012037483247695491, 0.0001001160271698609, 9.843544103205204e-05, 0.00043973085121251643, 0.00020941435650456697, 8.3425307821016759e-05, 0.00017625749751459807, 0.00026023451937362552, } };
const TfArray<48, int> quant65_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data66[1*3*3*48] = { 
  /* [0][0][][] */ -41,-4,-8,-3,-32,-61,0,-37,-2,-52,-4,31,-30,-9,5,-37,5,9,-16,32,10,-17,8,-37,-28,-25,10,9,19,-18,-34,8,6,-2,-6,27,3,11,15,32,-2,10,-4,12,13,127,-35,17, -32,23,-21,32,-16,-79,0,-62,31,-119,4,1,-63,-127,11,5,-115,-80,127,5,114,0,-3,4,98,-26,-12,-8,34,-71,26,-10,-20,1,-15,67,-63,-27,-61,-36,21,15,55,-46,-6,21,46,5, -24,0,49,16,-37,-11,18,-1,29,11,9,-32,-44,-11,-2,-3,18,-14,-27,-47,-1,4,-6,-21,-47,-23,27,-2,6,-1,3,-1,-5,5,-17,19,-5,-1,-8,27,-1,-8,11,10,-8,11,-23,-20, 
  /* [0][1][][] */ -9,26,8,-43,-117,12,16,-127,51,-53,-72,127,34,-7,45,-7,-13,127,24,127,94,67,-67,-52,-127,-39,-41,-127,-44,-71,-109,6,-26,119,-2,68,5,64,-6,127,127,-3,72,-89,-67,8,72,107, -32,-127,-53,-100,127,-3,127,41,127,-127,-53,-17,61,93,127,127,-45,0,-81,-30,42,5,47,127,5,127,-127,83,127,127,127,-127,127,13,-127,102,127,-127,-127,-44,-86,127,-127,127,-51,47,-127,7, -2,39,127,127,-27,-23,-11,-123,34,-104,127,-97,-127,-8,19,6,-36,-25,37,-98,127,94,-127,-67,-110,-59,4,17,-50,-78,3,3,-55,-127,-27,78,25,10,-46,75,-41,10,97,-23,127,39,42,-127, 
  /* [0][2][][] */ 25,-12,-31,-11,-7,-54,5,-34,-14,-50,-21,41,-36,-2,-15,-6,25,43,-2,1,-42,-36,-3,-29,33,-12,54,22,10,-38,-21,10,0,-4,53,3,-4,3,29,26,-5,9,-12,-12,9,77,-21,3, 127,34,-22,24,-45,-127,6,-29,34,21,20,-9,-82,20,4,5,-127,-119,-22,19,100,-127,-31,-3,90,-3,42,-15,38,-85,8,2,-69,5,93,127,-51,17,-44,-57,28,29,68,-18,7,74,-2,10, 32,1,19,17,-16,-6,2,-32,-15,65,-1,-51,-40,11,-15,-6,-3,8,-2,-24,-16,14,-22,0,-7,-28,86,-8,6,-22,7,8,-49,3,53,3,-13,-5,24,18,-7,-2,3,-6,-11,-13,-7,-6, 
};
const TfArray<4, int> tensor_dimension66 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant66_scale = { 48, { 0.0062685883603990078, 0.019808776676654816, 0.007680860348045826, 0.0058460310101509094, 0.01300298236310482, 0.007813681848347187, 0.0089914621785283089, 0.013697320595383644, 0.0052192187868058681, 0.0057859858497977257, 0.015212954021990299, 0.0096819596365094185, 0.0081817246973514557, 0.016821879893541336, 0.0053538870997726917, 0.013056104071438313, 0.007983749732375145, 0.0073387152515351772, 0.020807163789868355, 0.0091345682740211487, 0.0043141269125044346, 0.0052100978791713715, 0.0053472453728318214, 0.012335906736552715, 0.0056976689957082272, 0.010194600559771061, 0.016320478171110153, 0.019048769026994705, 0.011935794726014137, 0.011592577211558819, 0.01787259615957737, 0.0057858740910887718, 0.013556689023971558, 0.013695907779037952, 0.0082417838275432587, 0.0041662692092359066, 0.016368657350540161, 0.014109696261584759, 0.0057385750114917755, 0.014069480821490288, 0.0094007058069109917, 0.007818588986992836, 0.0076873432844877243, 0.034340903162956238, 0.01635427214205265, 0.0065151224844157696, 0.013764878734946251, 0.020323088392615318, } };
const TfArray<48, int> quant66_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data67[48] = { 1811, 1633, 6011, 2664, 5372, -742, 108, 93018, 3269, 2696, 5715, 12476, 13412, 4970, 2691, 4181, 10085, 2390, 10799, 10121, 427, 475, 5649, 6408, 2546, 828, 5329, 2182, 9733, 8498, 184, 1054, 246, 5142, 1714, 2724, 9903, 5938, 1758, 4967, 3154, 1854, 9966, 47, 5514, 441, 1754, 632, };
const TfArray<1, int> tensor_dimension67 = { 1, { 48 } };
const TfArray<48, float> quant67_scale = { 48, { 0.00022425271163228899, 0.00030343607068061829, 0.00012527771468739957, 0.00019462525960989296, 0.00010978469072142616, 8.2365775597281754e-05, 0.00021662014478351921, 1.2337112821114715e-05, 0.00014450715389102697, 8.7429631093982607e-05, 6.6939232056029141e-05, 7.6537799031939358e-05, 4.5831809984520078e-05, 9.2409660283010453e-05, 0.00017163778829853982, 8.0445206549484283e-05, 6.9913978222757578e-05, 0.00017122522694990039, 7.801850006217137e-05, 9.1187444922979921e-05, 0.00014670561358798295, 0.00013772274542134255, 0.00014474938507191837, 0.00013416101865004748, 0.00020288379164412618, 0.00028440568712539971, 6.7447108449414372e-05, 8.8076376414392143e-05, 7.1402515459340066e-05, 0.00011400459334254265, 5.6607241276651621e-05, 0.00027260516071692109, 0.00036944125895388424, 5.513876021723263e-05, 0.00027252489235252142, 9.1231573605909944e-05, 9.3373913841787726e-05, 0.00010429674875922501, 0.00032744722557254136, 5.896864240639843e-05, 0.00020271484390832484, 0.00010175649367738515, 9.6678028057795018e-05, 7.1582493546884507e-05, 0.00015350068861152977, 0.00016082655929494649, 0.00026961308321915567, 5.2188701374689117e-05, } };
const TfArray<48, int> quant67_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data68[48*1*1*8] = { 
  /* [0][0][][] */ 95,127,42,2,8,66,7,90, 
  /* [1][0][][] */ -8,66,-8,74,31,29,-127,-73, 
  /* [2][0][][] */ 39,-94,-127,88,-31,36,-69,124, 
  /* [3][0][][] */ 77,65,127,-112,30,-51,74,-21, 
  /* [4][0][][] */ -29,127,-19,-27,3,-44,4,-57, 
  /* [5][0][][] */ -30,127,-66,-82,-93,4,1,53, 
  /* [6][0][][] */ -127,-72,-106,-38,-3,108,20,-58, 
  /* [7][0][][] */ 24,-30,127,-46,-67,36,4,-69, 
  /* [8][0][][] */ -78,95,55,24,-73,-127,-25,-36, 
  /* [9][0][][] */ -94,31,18,-6,127,-70,51,35, 
  /* [10][0][][] */ 106,-33,64,-64,-122,127,-41,-18, 
  /* [11][0][][] */ -46,-47,-109,48,-12,-14,-127,-118, 
  /* [12][0][][] */ -29,35,-26,-121,106,-127,-53,22, 
  /* [13][0][][] */ 127,94,90,82,-42,27,19,45, 
  /* [14][0][][] */ -127,-39,39,84,125,-118,79,-64, 
  /* [15][0][][] */ -27,79,32,-34,16,13,-69,127, 
  /* [16][0][][] */ 2,25,31,83,-127,43,-40,-29, 
  /* [17][0][][] */ -8,7,6,127,30,-31,-18,-44, 
  /* [18][0][][] */ 21,43,-127,-17,-90,-77,-1,-21, 
  /* [19][0][][] */ 89,106,62,73,127,-36,7,-17, 
  /* [20][0][][] */ 88,2,-59,37,-40,-82,-6,-127, 
  /* [21][0][][] */ -15,8,104,-31,-29,-105,-127,52, 
  /* [22][0][][] */ -112,-8,55,63,127,5,-28,-71, 
  /* [23][0][][] */ 29,127,73,0,-68,-56,62,18, 
  /* [24][0][][] */ -88,-127,58,-22,60,-112,28,-50, 
  /* [25][0][][] */ 31,-16,-27,-80,-18,-118,27,-127, 
  /* [26][0][][] */ 71,-127,-65,92,24,75,12,-48, 
  /* [27][0][][] */ -24,-64,51,94,65,-63,60,-127, 
  /* [28][0][][] */ 85,-127,66,85,3,8,-41,104, 
  /* [29][0][][] */ 36,2,-79,7,-27,-127,35,-104, 
  /* [30][0][][] */ -55,28,127,103,-53,55,77,-114, 
  /* [31][0][][] */ 5,30,47,-29,-65,34,116,127, 
  /* [32][0][][] */ -1,46,-17,68,23,8,-127,-67, 
  /* [33][0][][] */ -84,15,97,70,-82,72,106,-127, 
  /* [34][0][][] */ 2,36,-18,-44,-40,127,7,6, 
  /* [35][0][][] */ 101,-112,127,1,35,-55,-67,-35, 
  /* [36][0][][] */ 23,104,127,36,10,-60,15,49, 
  /* [37][0][][] */ 113,-127,-5,64,26,-50,-56,29, 
  /* [38][0][][] */ 33,-15,7,-53,-3,-46,127,30, 
  /* [39][0][][] */ 17,-29,30,35,16,127,92,-117, 
  /* [40][0][][] */ 60,79,127,-61,62,0,28,-7, 
  /* [41][0][][] */ 22,94,96,-127,43,-51,57,57, 
  /* [42][0][][] */ -54,-90,-58,127,-20,-16,9,105, 
  /* [43][0][][] */ 11,-127,6,19,-84,98,-60,-50, 
  /* [44][0][][] */ 62,69,-53,-10,-43,-97,9,-127, 
  /* [45][0][][] */ -16,93,-23,-12,50,43,-127,-77, 
  /* [46][0][][] */ 23,-33,-78,-27,-11,-127,75,-106, 
  /* [47][0][][] */ 56,-72,54,127,-10,48,64,-74, 
};
const TfArray<4, int> tensor_dimension68 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant68_scale = { 48, { 0.0043573463335633278, 0.0058959196321666241, 0.0024342108517885208, 0.0037816695403307676, 0.0021331734023988247, 0.0016004096250981092, 0.0042090415954589844, 0.00023971647897269577, 0.0028078488539904356, 0.0016988029237836599, 0.0013006639201194048, 0.0014871690655127168, 0.00089053576812148094, 0.00179556745570153, 0.0033350111916661263, 0.0015630919951945543, 0.0013584647094830871, 0.0033269948326051235, 0.0015159398317337036, 0.0017718191957101226, 0.0028505660593509674, 0.0026760243345052004, 0.0028125555254518986, 0.0026068179868161678, 0.0039421371184289455, 0.005526149645447731, 0.0013105322141200304, 0.0017113696085289121, 0.0013873878633603454, 0.0022151682060211897, 0.0010999080259352922, 0.0052968594245612621, 0.0071784346364438534, 0.0010713746305555105, 0.0052952994592487812, 0.0017726767109706998, 0.0018143034540116787, 0.0020265397615730762, 0.0063624689355492592, 0.0011457912623882294, 0.003938854206353426, 0.0019771812949329615, 0.0018785040592774749, 0.0013908848632127047, 0.0029825977981090546, 0.0031249432358890772, 0.0052387216128408909, 0.0010140534723177552, } };
const TfArray<48, int> quant68_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data69[8] = { 1531, 17134, -2218, 12388, -15873, 16851, -252, 9603, };
const TfArray<1, int> tensor_dimension69 = { 1, { 8 } };
const TfArray<8, float> quant69_scale = { 8, { 0.00010990205919370055, 9.1150679509155452e-05, 0.00010714292875491083, 9.2092144768685102e-05, 0.0001520322693977505, 7.7249562309589237e-05, 8.5825842688791454e-05, 7.3220100603066385e-05, } };
const TfArray<8, int> quant69_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data70[8*1*1*48] = { 
  /* [0][0][][] */ -31,-22,20,-27,-16,-24,-80,17,11,2,-48,-38,25,-21,-7,-13,-14,26,-50,31,5,-53,77,-23,-57,24,62,127,20,-30,-93,57,-35,-30,-3,51,-12,7,1,44,-3,51,26,-118,-20,30,30,-25, 
  /* [1][0][][] */ -10,-3,-12,2,13,46,-28,-44,-73,-97,84,-28,-58,-9,-24,4,34,18,45,27,-6,-29,-22,-40,6,45,32,67,-43,-36,127,-59,24,-57,-18,30,11,-87,31,-15,17,-23,-17,61,77,-92,-59,11, 
  /* [2][0][][] */ -24,36,-4,7,-68,-20,-1,14,-49,47,2,47,30,6,-10,-5,-26,-47,-27,19,12,127,18,60,101,-25,-39,24,20,42,-111,-37,12,-86,44,-83,11,51,-16,91,93,39,-79,-14,-62,26,-82,47, 
  /* [3][0][][] */ 55,-8,62,-30,-36,55,4,-49,-6,95,-105,40,-35,-127,46,13,-59,68,16,38,-72,-36,30,-34,-27,77,-45,11,-53,23,53,-60,-11,-60,119,-11,-7,-45,25,19,-52,-32,57,-88,-78,13,-87,31, 
  /* [4][0][][] */ 21,23,-7,-4,-2,16,-33,-9,-31,37,-9,7,-36,-29,15,11,61,25,8,1,-31,-15,-28,-34,-1,-56,-41,55,-13,22,123,34,7,49,-61,11,23,19,-27,12,58,-5,-57,-34,127,49,87,-36, 
  /* [5][0][][] */ -59,13,19,-64,75,18,22,-16,-43,-119,-7,59,-33,38,-7,13,56,24,-38,-63,-16,-3,42,-96,-16,51,-65,-62,-13,55,-110,65,12,-37,-22,28,-51,79,-11,-64,65,5,-33,-28,-127,108,-39,29, 
  /* [6][0][][] */ 38,-8,20,-30,-2,-97,-17,71,-119,19,-1,-28,49,-93,-2,-47,76,66,16,30,-45,1,18,-79,18,16,14,30,127,-11,62,-34,20,38,-3,-20,-25,-24,-25,-14,-43,-22,42,-2,-29,16,-24,7, 
  /* [7][0][][] */ -9,49,26,42,-58,-60,21,28,121,-127,-47,89,74,4,10,-19,-24,29,62,-39,-46,-59,-40,-30,-92,59,-114,-20,55,53,96,49,-27,-124,40,72,32,-88,66,55,60,-63,-60,-11,120,-59,-18,-24, 
};
const TfArray<4, int> tensor_dimension70 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant70_scale = { 8, { 0.0050476617179811001, 0.0041864346712827682, 0.0049209385178983212, 0.0042296750470995903, 0.0069826487451791763, 0.0035479741636663675, 0.0039418716914951801, 0.0033629061654210091, } };
const TfArray<8, int> quant70_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data71[48] = { 1469, 16530, 22040, 30628, 31080, -1798, -2620, 26633, 2378, -3827, -2856, 8218, -1026, -2918, 30406, -95, 51, 727, 41273, 48225, 36433, 32889, 31569, 1288, -239, 412, -3084, -1323, -21215, 15146, -9283, 62332, 18646, 63725, 21453, -9700, -307, 34510, 11770, -165, 789, 31485, 49, -4434, -4272, 480, 2659, 31547, };
const TfArray<1, int> tensor_dimension71 = { 1, { 48 } };
const TfArray<48, float> quant71_scale = { 48, { 4.1236766264773905e-05, 3.8634741940768436e-05, 6.2148967117536813e-05, 5.8421115681994706e-05, 6.7872257204726338e-05, 7.760042353766039e-05, 7.7365846664179116e-05, 0.00019733137742150575, 5.1409435400273651e-05, 6.3983301515690982e-05, 7.3042356234509498e-05, 4.2454874346731231e-05, 3.7627887650160119e-05, 0.00018083238683175296, 3.0869225156493485e-05, 0.00016420304018538445, 8.8490749476477504e-05, 0.00016805913764983416, 3.0239871193771251e-05, 2.5680308681330644e-05, 4.0557039028499275e-05, 5.5762975534889847e-05, 5.1804432587232441e-05, 5.3123829275136814e-05, 0.00011698464368237182, 7.39811803214252e-05, 4.8520138079766184e-05, 4.0788072510622442e-05, 8.6896536231506616e-05, 5.3411731641972438e-05, 0.0001333362451987341, 3.0182351110852323e-05, 5.486022200784646e-05, 3.8075355405453593e-05, 6.0522434068843722e-05, 0.00013408611994236708, 0.00019154741312377155, 4.4373213313519955e-05, 7.6547119533643126e-05, 5.0484490202507004e-05, 5.0120772357331589e-05, 8.839985093800351e-05, 6.0478352679638192e-05, 7.3679730121511966e-05, 0.0001933810708578676, 8.1786616647150367e-05, 5.1881223043892533e-05, 4.1365587094333023e-05, } };
const TfArray<48, int> quant71_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data72[1*3*3*48] = { 
  /* [0][0][][] */ 112,-127,-93,-59,-127,75,110,-80,79,51,71,101,39,127,-51,66,55,95,-93,-68,-94,-77,-56,75,74,87,90,70,73,-75,-39,-64,-127,-74,-76,127,65,-71,-23,87,77,-78,78,44,-97,64,67,-95, 107,-90,-96,-127,-126,95,96,-99,105,87,91,117,80,93,-104,44,93,108,-104,-51,-117,-93,-74,112,91,99,109,99,92,-81,122,-107,-6,-106,-90,14,49,-87,-127,105,108,-111,86,80,99,99,120,-127, 39,-108,-74,-80,-46,34,43,-16,48,39,38,28,72,-3,-73,-27,48,54,-35,-31,-81,-49,-46,36,30,45,31,42,30,-11,-38,-46,-92,-76,-74,1,-108,-15,-64,23,43,-58,37,35,-9,45,47,-66, 
  /* [0][1][][] */ 127,-105,-117,-42,-112,94,127,-106,97,81,92,122,72,75,-120,53,79,113,-124,-127,-106,-100,-89,86,104,97,114,103,108,-94,-19,-77,-116,-92,-95,111,66,-105,-69,104,91,-89,99,75,-120,75,63,-99, 121,-46,-127,-119,-109,127,125,-127,127,127,127,127,127,99,-127,-88,127,127,-127,-102,-127,-127,-127,127,127,127,127,127,127,-127,127,-127,-16,-127,-127,48,44,-127,-117,127,127,-127,127,127,127,127,127,-120, 30,-86,-69,-103,-37,36,22,-22,56,71,62,18,104,28,-61,-127,68,57,-39,-67,-70,-61,-81,54,43,48,36,56,49,-56,-58,-61,-86,-69,-92,-64,-127,-29,-102,26,53,-61,59,45,-38,62,55,-97, 
  /* [0][2][][] */ 41,-51,-34,-23,-20,21,80,-1,43,32,21,53,70,-31,-114,-8,40,37,-48,-71,-38,-51,-44,16,51,50,66,39,58,-31,10,-18,-71,-30,-49,21,42,-84,-43,27,23,-18,45,65,-37,23,9,-48, 54,-48,-93,-37,-15,33,71,-23,64,55,33,49,106,9,-96,-109,57,40,-76,-34,-30,-40,-79,26,53,58,61,55,64,-57,31,-45,-16,-49,-63,24,30,-107,-79,27,36,-5,53,70,19,48,29,-30, 19,-57,-21,-10,30,27,24,-1,35,39,28,9,63,15,-67,-96,24,37,-15,-34,-42,-25,-55,17,21,16,34,24,37,-5,-35,-24,-82,-34,-23,-45,-81,-31,-64,19,16,-1,21,48,-21,26,18,-36, 
};
const TfArray<4, int> tensor_dimension72 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant72_scale = { 48, { 0.0023115410003811121, 0.0021656835451722145, 0.0034837813582271338, 0.0032748153898864985, 0.0038046024274080992, 0.0043499181047081947, 0.0043367687612771988, 0.011061477474868298, 0.0028817732818424702, 0.0035866056568920612, 0.004094413947314024, 0.0023798223119229078, 0.0021092440001666546, 0.010136621072888374, 0.0017303848871961236, 0.009204457513988018, 0.0049603790976107121, 0.0094206118956208229, 0.0016951062716543674, 0.0014395184116438031, 0.0022734384983778, 0.0031258126255124807, 0.0029039150103926659, 0.0029778743628412485, 0.0065576140768826008, 0.0041470401920378208, 0.0027198127936571836, 0.0022863892372697592, 0.0048710149712860584, 0.0029940127860754728, 0.0074742087163031101, 0.0016918819164857268, 0.0030752082820981741, 0.0021343270782381296, 0.0033926055766642094, 0.0075162430293858051, 0.010737255215644836, 0.0024873556103557348, 0.0042908745817840099, 0.0028299251571297646, 0.0028095368761569262, 0.0049552838318049908, 0.0033901345450431108, 0.0041301422752439976, 0.010840041562914848, 0.0045845764689147472, 0.0029082195833325386, 0.0023187620099633932, } };
const TfArray<48, int> quant72_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data73[48] = { -350, 1224, 2464, 4872, 10866, -1106, -2044, 20562, 1409, 10398, 604, -1141, 5894, -4998, 3228, -1712, -337, -2745, 1045, 1783, 3582, 3739, 5988, 846, -3124, -1750, 560, 2808, 1899, 3633, -1843, 3260, 5067, 5036, 4921, 1845, 13273, 1969, 1400, -1101, 812, 12039, -723, 2456, 11011, 203, 1749, 5875, };
const TfArray<1, int> tensor_dimension73 = { 1, { 48 } };
const TfArray<48, float> quant73_scale = { 48, { 0.00028318050317466259, 0.00025980133796110749, 0.00011780807108152658, 0.00012076842540409416, 8.5332823800854385e-05, 0.00013517883780878037, 0.0001786843640729785, 4.6859586291247979e-05, 0.00019357076962478459, 7.978417124832049e-05, 0.00012245684047229588, 0.00033673804136924446, 0.0001086306365323253, 0.00013219958054833114, 0.00021913777163717896, 0.00014792584988754243, 0.0001088468634407036, 5.3490301070269197e-05, 0.00020861435041297227, 0.00029445230029523373, 0.00018111563986167312, 0.00013059495540801436, 0.00010535952606005594, 0.00016844173660501838, 0.00015861321298871189, 0.00024995027342811227, 0.00019187638827133924, 0.00018402020214125514, 0.0001672594080446288, 0.00016301104915328324, 9.1719077317975461e-05, 0.00019196954963263124, 0.00013555353507399559, 0.00014958722749724984, 8.5195475548971444e-05, 0.00011537415412021801, 6.5719352278392762e-05, 0.00012083243927918375, 0.00010422939521959051, 0.00020763807697221637, 0.00019297476683277637, 7.9080513387452811e-05, 0.00019758954294957221, 8.4102975961286575e-05, 7.5955584179610014e-05, 0.00014888242003507912, 0.00015027214249130338, 0.00013430294347926974, } };
const TfArray<48, int> quant73_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data74[48*1*1*8] = { 
  /* [0][0][][] */ 22,-24,-72,19,-127,10,-61,1, 
  /* [1][0][][] */ -123,35,127,12,-115,-21,0,-12, 
  /* [2][0][][] */ 7,74,-32,21,-57,-127,-16,81, 
  /* [3][0][][] */ -80,35,-11,127,8,-48,-66,-40, 
  /* [4][0][][] */ 17,-18,41,-127,-22,24,-127,16, 
  /* [5][0][][] */ 66,127,-62,-46,-38,-13,36,-121, 
  /* [6][0][][] */ 62,-52,53,99,-44,-127,3,-99, 
  /* [7][0][][] */ 35,112,-53,-57,-56,-27,21,-127, 
  /* [8][0][][] */ 0,-30,51,-5,10,9,-49,-127, 
  /* [9][0][][] */ -86,-2,-106,24,-127,-82,-89,-24, 
  /* [10][0][][] */ 91,1,101,-40,-127,12,95,95, 
  /* [11][0][][] */ 127,-36,-76,10,56,3,-73,-4, 
  /* [12][0][][] */ -23,-110,127,16,22,11,-74,68, 
  /* [13][0][][] */ 34,-64,73,-10,16,-127,50,-114, 
  /* [14][0][][] */ -111,38,127,4,-29,-68,51,-48, 
  /* [15][0][][] */ 31,127,-40,-53,-65,2,32,-111, 
  /* [16][0][][] */ 26,100,-48,60,-4,-42,-14,127, 
  /* [17][0][][] */ 30,79,-15,83,-57,81,-127,41, 
  /* [18][0][][] */ 69,-29,127,-36,77,-101,11,-27, 
  /* [19][0][][] */ 9,-12,10,127,30,-42,-32,-86, 
  /* [20][0][][] */ 3,24,-29,42,-8,51,-127,12, 
  /* [21][0][][] */ 9,-5,50,22,25,127,49,-54, 
  /* [22][0][][] */ 63,-127,-13,60,-78,66,21,22, 
  /* [23][0][][] */ -41,-108,-6,-110,-5,-71,-8,-127, 
  /* [24][0][][] */ 19,22,-18,-63,-39,-127,-46,51, 
  /* [25][0][][] */ 63,71,127,16,2,23,-50,-1, 
  /* [26][0][][] */ -104,34,127,-50,-90,-15,95,-13, 
  /* [27][0][][] */ -77,45,-37,-98,28,127,-19,89, 
  /* [28][0][][] */ 16,-111,67,54,48,9,-33,127, 
  /* [29][0][][] */ -111,52,81,-38,-127,12,104,-42, 
  /* [30][0][][] */ 108,-105,16,69,-127,-18,47,-93, 
  /* [31][0][][] */ 51,85,56,-37,-110,-23,11,127, 
  /* [32][0][][] */ -38,-18,98,-50,30,9,-127,-116, 
  /* [33][0][][] */ 53,37,102,-127,19,45,-35,64, 
  /* [34][0][][] */ -16,-121,90,-32,36,127,64,-91, 
  /* [35][0][][] */ 42,7,96,3,13,127,27,-48, 
  /* [36][0][][] */ -20,34,-23,46,53,-127,7,17, 
  /* [37][0][][] */ 26,-25,58,23,-127,123,-35,-19, 
  /* [38][0][][] */ -127,-28,-107,-23,89,-32,-127,-31, 
  /* [39][0][][] */ 17,1,35,-113,-34,46,-127,15, 
  /* [40][0][][] */ 92,-26,-73,-127,64,61,61,-22, 
  /* [41][0][][] */ 20,-23,-9,127,-99,10,-82,-58, 
  /* [42][0][][] */ -85,25,73,127,-62,-65,-60,4, 
  /* [43][0][][] */ 80,-107,108,43,-127,30,118,55, 
  /* [44][0][][] */ 9,-42,38,-71,-25,127,42,20, 
  /* [45][0][][] */ -33,35,-38,3,74,-48,-127,-40, 
  /* [46][0][][] */ -97,-94,-7,-20,23,127,-38,-115, 
  /* [47][0][][] */ -120,-92,-49,29,20,127,-26,-65, 
};
const TfArray<4, int> tensor_dimension74 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant74_scale = { 48, { 0.0039649792015552521, 0.0036376337520778179, 0.0016495011514052749, 0.001690950826741755, 0.0011947958264499903, 0.0018927196506410837, 0.0025018665473908186, 0.00065610907040536404, 0.0027103000320494175, 0.0011171058285981417, 0.0017145914025604725, 0.0047148703597486019, 0.0015210023848339915, 0.0018510052468627691, 0.0030682787764817476, 0.0020711980760097504, 0.0015240298816934228, 0.0007489496492780745, 0.0029209339991211891, 0.004122802522033453, 0.0025359082501381636, 0.0018285380210727453, 0.0014752016868442297, 0.0023584533482789993, 0.0022208383306860924, 0.0034997030161321163, 0.0026865759864449501, 0.002576576778665185, 0.0023418988566845655, 0.0022824150510132313, 0.0012842136202380061, 0.0026878803037106991, 0.0018979659071192145, 0.0020944601856172085, 0.0011928727617487311, 0.0016154224285855889, 0.00092017592396587133, 0.0016918471083045006, 0.0014593780506402254, 0.0029072647448629141, 0.0027019549161195755, 0.0011072534834966063, 0.0027665691450238228, 0.0011775760212913156, 0.0010634994832798839, 0.0020845916587859392, 0.0021040500141680241, 0.0018804557621479034, } };
const TfArray<48, int> quant74_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data75[8] = { -2639, -126, -14490, 10350, 8112, -2488, 8341, 2051, };
const TfArray<1, int> tensor_dimension75 = { 1, { 8 } };
const TfArray<8, float> quant75_scale = { 8, { 0.00010781836317619309, 0.00013685382145922631, 7.850531255826354e-05, 8.9171859144698828e-05, 0.00012078692816430703, 7.2904811531770974e-05, 0.00012381342821754515, 0.00011823421664303169, } };
const TfArray<8, int> quant75_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data76[8*1*1*48] = { 
  /* [0][0][][] */ 14,38,33,33,-7,-32,48,49,4,27,-10,-12,48,-35,49,-21,-56,-31,-127,-7,44,-40,21,46,8,-9,45,-7,-8,-53,7,35,-47,50,48,5,50,79,-59,-54,7,21,-99,-48,35,25,-23,-58, 
  /* [1][0][][] */ -14,-42,0,71,-24,-1,-3,-13,13,9,-17,-48,-1,-5,15,6,44,23,56,-40,1,26,25,-49,0,-12,-31,-31,-36,8,-13,-3,-31,-28,-99,75,18,17,-127,-20,24,-13,68,24,104,-22,-39,45, 
  /* [2][0][][] */ -7,5,30,-35,-26,-19,-10,127,-44,83,-43,-2,125,-8,48,-16,-55,-69,-6,38,-6,-16,21,0,7,57,11,45,22,12,77,31,-64,-16,30,64,9,65,69,-117,48,34,-42,-28,12,33,-5,-8, 
  /* [3][0][][] */ 21,-5,-127,-29,16,-13,53,-34,-25,-22,-8,13,-47,-57,46,18,14,51,8,33,-59,18,-65,-8,-40,-72,28,7,-75,-58,-59,17,80,40,-43,20,-58,1,28,-16,30,-64,-24,19,53,-47,42,-15, 
  /* [4][0][][] */ 4,44,-2,-7,20,-5,-71,-116,-38,22,-21,75,8,-29,-2,55,39,50,-78,4,25,4,-29,-10,39,-8,4,-3,-24,7,-3,-32,18,-26,-127,30,-31,2,37,37,-32,-33,71,39,12,-48,15,12, 
  /* [5][0][][] */ -57,-33,101,13,82,24,55,-7,-127,0,-107,-18,-90,-85,58,82,-17,29,18,4,46,24,29,12,-22,1,5,-17,-42,-1,-20,-28,-28,44,73,25,-15,70,-22,-3,49,-43,-54,52,-11,19,37,27, 
  /* [6][0][][] */ 84,62,-17,26,23,-26,-102,-72,-2,3,-1,74,-20,-32,-3,36,-40,33,20,-2,127,-16,61,111,7,-55,15,-24,-51,-19,-37,-58,50,-31,18,-10,-4,29,-46,35,-53,-49,-65,-39,-24,-50,45,-4, 
  /* [7][0][][] */ 6,47,40,-78,55,-51,-36,-17,9,10,33,23,-35,-1,33,-10,-20,23,-16,50,-52,-8,-10,57,7,-34,2,38,-11,27,-37,-11,43,-12,-37,-39,-65,15,127,-10,13,-31,-26,-15,42,3,61,1, 
};
const TfArray<4, int> tensor_dimension76 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant76_scale = { 8, { 0.0045822802931070328, 0.0058162873610854149, 0.0033364756964147091, 0.0037898039445281029, 0.0051334444433450699, 0.0030984543263912201, 0.0052620703354477882, 0.0050249542109668255, } };
const TfArray<8, int> quant76_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data77[48] = { -1186, -4197, 1648, -969, -161, -454, 4645, 17293, -5969, 18902, 15371, -2917, 6116, -1286, 8059, -990, 71, -462, 4351, -3686, -3846, -2538, -20237, -1634, 10833, -228, -671, 2456, 10811, 8912, 9710, -2509, -8283, -6, -2923, -6203, 5491, 9345, -3815, 15494, 1451, -345, -6014, -3194, -11962, 13819, -27, 8664, };
const TfArray<1, int> tensor_dimension77 = { 1, { 48 } };
const TfArray<48, float> quant77_scale = { 48, { 6.0142705478938296e-05, 0.00019570904260035604, 0.0001602774573257193, 0.00018835270020645112, 0.00011285298387520015, 0.00036736688343808055, 0.0001597931986907497, 0.0004373974516056478, 0.00020381931972224265, 6.4145278884097934e-05, 0.00010211930202785879, 0.00010842504707397893, 0.00014196122356224805, 0.0002846249844878912, 0.00014380711945705116, 0.00020273464906495064, 0.00044725969200953841, 0.00026160600828006864, 7.0285364927258343e-05, 0.00015017444093246013, 0.00010260604176437482, 0.00015045021427795291, 6.905010377522558e-05, 0.00028334383387118578, 8.3710532635450363e-05, 0.00027433849754743278, 8.3295453805476427e-05, 0.00017710778047330678, 0.00016317321569658816, 8.2212660345248878e-05, 0.0001186274821520783, 0.00013478372420649976, 0.00018643475777935237, 0.0002739562769420445, 0.00031097049941308796, 0.00011513726349221542, 9.2618611233774573e-05, 7.0618982135783881e-05, 0.00029282720061019063, 9.3459653726313263e-05, 0.00019641336984932423, 0.00017495475185569376, 0.00010090558498632163, 0.00018860794079955667, 0.00019117414194624871, 8.2644095527939498e-05, 0.00011070688924519345, 8.8650238467380404e-05, } };
const TfArray<48, int> quant77_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data78[1*3*3*48] = { 
  /* [0][0][][] */ 91,82,50,33,-14,-74,34,27,-64,-14,-37,52,53,14,-7,16,53,-44,96,64,63,-12,5,11,-31,-71,57,5,-26,-75,34,41,34,-95,13,28,-31,42,-12,-127,0,-109,-43,-11,19,-127,71,-127, 127,18,68,-94,50,64,42,-52,-107,-89,4,127,9,-52,-127,29,-5,102,69,58,42,71,92,31,127,-50,-14,-127,-125,-43,-127,127,31,-99,-75,127,38,-86,-79,-120,17,127,-82,30,-41,-73,92,20, 77,1,29,-78,-22,-52,36,18,-58,-14,7,27,31,25,41,3,-47,12,73,62,-34,-37,-71,-7,-33,-65,-55,-35,-41,-89,9,18,58,-52,25,30,-62,-55,0,-98,8,-33,115,-20,8,-113,25,-60, 
  /* [0][1][][] */ 97,9,25,64,47,73,5,-127,105,-127,-127,-65,14,49,-59,127,-127,85,64,63,6,103,79,-41,-32,121,88,20,43,-27,-107,53,71,100,-68,43,-73,-1,-2,-69,-17,-65,22,-91,54,-11,51,-23, 1,127,-127,90,127,64,-127,17,114,-24,-30,83,-127,127,-28,6,45,-127,-127,2,127,28,127,-127,-120,97,-38,4,0,-19,47,-18,127,-23,127,-74,122,-127,127,113,127,73,-125,-5,115,49,-127,-18, 42,-5,11,-127,55,55,18,-88,127,-51,-127,-24,16,33,-55,101,79,-9,19,82,31,-127,40,115,-90,127,-62,-20,49,-6,-46,55,-9,80,119,47,-65,-25,-52,-29,-20,-28,127,127,127,-19,75,-14, 
  /* [0][2][][] */ 27,52,31,56,-5,-5,31,26,-4,-25,-7,-7,45,-64,42,-49,-8,26,75,-48,118,-5,7,-60,-110,-70,127,88,-3,-96,-56,81,30,46,-9,1,-72,29,3,-5,-18,-82,26,-12,17,0,38,-65, 45,12,7,9,-13,-127,-3,-80,-21,-38,-1,-12,-9,-59,-13,33,5,-47,19,127,103,64,63,23,26,-44,-59,52,-127,-28,-72,29,11,127,-48,3,-114,-115,26,-21,-97,82,-16,14,-33,-65,92,-33, 15,-1,31,-61,4,-2,39,36,-24,-5,26,-1,38,-61,53,-27,-3,-25,52,-122,13,-62,-70,63,-80,-72,-103,31,-12,-127,25,46,39,-32,-14,35,-127,-65,-24,-31,-20,-12,-8,11,-1,22,-23,-66, 
};
const TfArray<4, int> tensor_dimension78 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant78_scale = { 48, { 0.0034788434859365225, 0.011320427991449833, 0.0092709530144929886, 0.010894913226366043, 0.0065277721732854843, 0.021249657496809959, 0.0092429416254162788, 0.025300446897745132, 0.011789551936089993, 0.0037103651557117701, 0.0059069022536277771, 0.0062716463580727577, 0.0082114841789007187, 0.016463605687022209, 0.0083182565867900848, 0.011726810596883297, 0.025870909914374352, 0.015132115222513676, 0.0040655271150171757, 0.0086865630000829697, 0.0059350566007196903, 0.0087025146931409836, 0.0039940755814313889, 0.016389500349760056, 0.004842081107199192, 0.015868602320551872, 0.004818071611225605, 0.010244471952319145, 0.0094384532421827316, 0.0047554392367601395, 0.0068617872893810272, 0.0077963150106370449, 0.010783974081277847, 0.01584649458527565, 0.017987513914704323, 0.0066599021665751934, 0.0053573520854115486, 0.0040848245844244957, 0.016938047483563423, 0.0054060006514191628, 0.011361167766153812, 0.010119933634996414, 0.0058366968296468258, 0.010909677483141422, 0.011058114469051361, 0.0047803949564695358, 0.0064036352559924126, 0.0051278090104460716, } };
const TfArray<48, int> quant78_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data79[48] = { -1340, -1954, 3361, -705, -2970, 3029, 2347, 27545, 2495, 2989, 5490, 3212, 1688, 11564, 6937, -2215, 14858, 2853, 752, -3118, 77, -455, 2058, 13949, 1066, 8757, 2839, -161, 9603, 230, 2386, -1486, -1624, -3675, -8226, 1562, 3081, 2256, 2312, 2960, 2794, 1025, 6125, 3091, 17665, 5073, -1919, 860, };
const TfArray<1, int> tensor_dimension79 = { 1, { 48 } };
const TfArray<48, float> quant79_scale = { 48, { 0.00021672989532817155, 0.00022928726684767753, 0.00019267889729235321, 0.00015623829676769674, 0.00017060029495041817, 9.2927628429606557e-05, 0.00022708105097990483, 4.5967390178702772e-05, 0.0001152446202468127, 0.00019007794617209584, 0.00013994412438478321, 0.00012103640619898215, 0.00020434513862710446, 7.6171279943082482e-05, 0.00011103483848273754, 0.00019916096061933786, 6.6875101765617728e-05, 9.128475358011201e-05, 0.00029627402545884252, 0.00019246840383857489, 9.8066302598454058e-05, 0.00032357836607843637, 0.00017462216783314943, 6.7126740759704262e-05, 0.00018165761139243841, 7.9506826295983046e-05, 0.00021125712373759598, 0.00021311006275936961, 5.7679953897604719e-05, 0.00025461410405114293, 0.00011567720503080636, 0.00026609227643348277, 0.00025946419918909669, 8.7481035734526813e-05, 6.6217595303896815e-05, 0.00026403655647300184, 0.00015418624388985336, 0.0001679432753007859, 0.00019550476281438023, 0.00015234138118103147, 0.00023306599177885801, 0.00021612229465972632, 0.00011359651398379356, 0.00015859708946663886, 5.3216685046209022e-05, 0.000143428347655572, 0.00010778671276057139, 0.00022376827837433666, } };
const TfArray<48, int> quant79_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data80[48*1*1*8] = { 
  /* [0][0][][] */ -13,-50,-40,102,9,-75,-81,-127, 
  /* [1][0][][] */ 127,-26,38,-27,27,-74,3,29, 
  /* [2][0][][] */ -11,47,8,-127,15,95,-62,63, 
  /* [3][0][][] */ -22,127,-50,-93,-102,-1,32,-86, 
  /* [4][0][][] */ 1,-69,-94,-41,26,-83,-66,-127, 
  /* [5][0][][] */ -46,-85,83,58,18,127,37,-123, 
  /* [6][0][][] */ 4,10,-44,32,4,18,-127,-48, 
  /* [7][0][][] */ 22,-20,11,22,-46,52,127,63, 
  /* [8][0][][] */ 1,44,-82,-27,-46,-127,-63,64, 
  /* [9][0][][] */ 63,6,-58,-22,7,127,-43,121, 
  /* [10][0][][] */ -19,57,78,127,93,118,-7,-51, 
  /* [11][0][][] */ -20,-57,-1,33,-127,66,-14,-20, 
  /* [12][0][][] */ -16,42,84,-66,75,-108,-127,-64, 
  /* [13][0][][] */ 45,31,-84,-127,-22,-64,-71,111, 
  /* [14][0][][] */ -43,-127,8,-77,-2,-79,17,-116, 
  /* [15][0][][] */ 6,71,70,98,92,127,-3,-27, 
  /* [16][0][][] */ 39,13,-30,-127,54,91,-68,84, 
  /* [17][0][][] */ -108,95,-127,37,27,107,-92,48, 
  /* [18][0][][] */ -127,62,20,-18,-92,18,-21,4, 
  /* [19][0][][] */ 127,3,-43,-27,88,-71,73,-87, 
  /* [20][0][][] */ 127,-64,46,-38,-66,29,87,3, 
  /* [21][0][][] */ 17,-32,-34,40,-5,25,127,33, 
  /* [22][0][][] */ 99,39,-127,-103,14,121,77,122, 
  /* [23][0][][] */ -28,39,-47,-85,43,5,-127,11, 
  /* [24][0][][] */ 127,-58,-103,-18,98,-61,10,26, 
  /* [25][0][][] */ -33,-78,72,-46,66,127,-28,-102, 
  /* [26][0][][] */ 21,-65,42,33,127,-61,-49,-68, 
  /* [27][0][][] */ -25,-127,62,88,16,-12,-46,107, 
  /* [28][0][][] */ -18,52,-105,-45,99,-108,-32,127, 
  /* [29][0][][] */ -81,32,127,-92,25,-41,41,36, 
  /* [30][0][][] */ 106,-78,81,-27,-65,-127,66,-26, 
  /* [31][0][][] */ 24,28,50,-6,-28,-7,-127,8, 
  /* [32][0][][] */ 16,-18,22,127,-27,-89,-41,-83, 
  /* [33][0][][] */ 113,-89,-69,127,-124,100,-66,-33, 
  /* [34][0][][] */ 12,-104,7,-72,-124,127,40,-34, 
  /* [35][0][][] */ 22,127,87,17,15,18,-59,-3, 
  /* [36][0][][] */ 28,101,-72,-127,-92,15,82,-77, 
  /* [37][0][][] */ 40,-7,46,12,40,127,64,18, 
  /* [38][0][][] */ -72,-92,96,61,29,-7,-66,127, 
  /* [39][0][][] */ 13,38,127,-49,-22,44,-25,28, 
  /* [40][0][][] */ 9,2,18,3,6,-32,127,5, 
  /* [41][0][][] */ -20,-10,-68,-127,-71,-89,-66,35, 
  /* [42][0][][] */ 46,-9,65,-39,-127,-54,-50,28, 
  /* [43][0][][] */ 76,-10,34,34,-65,-127,123,30, 
  /* [44][0][][] */ -80,-127,-11,-77,-4,13,-7,-123, 
  /* [45][0][][] */ 17,107,80,74,39,127,-64,32, 
  /* [46][0][][] */ -104,-10,0,69,103,51,-83,127, 
  /* [47][0][][] */ 21,81,-57,-38,2,-39,32,-127, 
};
const TfArray<4, int> tensor_dimension80 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant80_scale = { 48, { 0.0036393394693732262, 0.0038502034731209278, 0.0032354737631976604, 0.0026235613040626049, 0.0028647289145737886, 0.0015604454092681408, 0.0038131566252559423, 0.00077188672730699182, 0.0019351935479789972, 0.003191798459738493, 0.0023499487433582544, 0.0020324494689702988, 0.0034313739743083715, 0.0012790720211341977, 0.0018645026721060276, 0.0033443209249526262, 0.0011229701340198517, 0.0015328582376241684, 0.0049750483594834805, 0.0032319391611963511, 0.0016467343084514141, 0.0054335445165634155, 0.0029322642367333174, 0.0011271956609562039, 0.0030504039023071527, 0.0013350826920941472, 0.0035474402830004692, 0.0035785550717264414, 0.00096856470918282866, 0.0042754928581416607, 0.0019424575148150325, 0.0044682351872324944, 0.0043569360859692097, 0.001468986039981246, 0.0011119291884824634, 0.0044337152503430843, 0.0025891033001244068, 0.0028201120439916849, 0.0032829258125275373, 0.0025581242516636848, 0.0039136558771133423, 0.0036291365977376699, 0.0019075184827670455, 0.0026631704531610012, 0.00089361728169023991, 0.0024084560573101044, 0.0018099599983543158, 0.0037575282622128725, } };
const TfArray<48, int> quant80_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data81[8] = { 19120, 6358, 15434, -7249, -15259, 11284, 5486, 17908, };
const TfArray<1, int> tensor_dimension81 = { 1, { 8 } };
const TfArray<8, float> quant81_scale = { 8, { 7.3210940172430128e-05, 7.5980497058480978e-05, 6.6085856815334409e-05, 7.1885224315337837e-05, 7.6435848313849419e-05, 9.0223205916117877e-05, 6.9274930865503848e-05, 7.1643153205513954e-05, } };
const TfArray<8, int> quant81_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data82[8*1*1*48] = { 
  /* [0][0][][] */ 127,-17,-13,-11,-25,-85,-36,-13,53,-37,-56,-29,-25,77,-52,8,10,-7,7,10,32,-35,6,6,41,4,1,29,9,60,-40,-92,16,-62,6,-29,34,-40,-12,25,-60,-23,-27,-46,-80,-88,6,-28, 
  /* [1][0][][] */ -80,-3,90,-62,58,40,43,20,-20,19,-6,101,23,-31,-127,-53,-97,-88,34,-17,5,88,-50,0,18,-102,34,100,36,-27,37,42,45,42,0,30,-72,-28,22,16,2,-29,-103,22,-19,-52,-99,31, 
  /* [2][0][][] */ 97,43,-25,-63,-48,-2,-42,-85,40,26,-81,-48,-15,59,-61,40,-9,81,8,13,57,54,2,6,-127,19,32,-60,3,37,33,-83,17,-39,24,24,-55,-48,18,34,-124,-116,-25,-53,-43,-90,38,11, 
  /* [3][0][][] */ 18,2,24,25,-102,-22,-5,52,-29,-61,-12,79,12,-21,-81,-48,-29,28,5,-59,-45,127,17,-53,27,44,52,-49,17,15,12,22,35,24,14,-4,44,57,23,-6,36,-25,25,-47,-13,10,25,38, 
  /* [4][0][][] */ -51,15,-120,9,-14,96,13,35,-26,127,33,59,19,-72,-21,34,-17,-2,-11,31,-14,34,-76,18,6,-6,50,-12,39,-65,122,85,48,50,5,-53,-82,16,-5,-23,49,22,29,35,43,28,23,58, 
  /* [5][0][][] */ -28,-1,36,-11,57,-69,-34,-30,-32,-62,7,-31,38,2,-15,0,24,-6,6,32,15,61,20,15,17,-3,-35,-8,-36,1,-127,-12,-41,-11,25,-17,-4,-29,4,-18,-12,-1,-33,-11,31,36,-6,42, 
  /* [6][0][][] */ 5,51,-7,67,-18,36,-61,48,-76,-31,49,14,46,10,42,20,4,-45,-46,31,2,63,31,-34,-89,-9,-35,23,-94,-5,-88,0,3,-38,-46,-58,127,-7,-47,-56,52,34,38,-56,-79,-21,-56,-45, 
  /* [7][0][][] */ -54,13,-87,25,-25,-8,-12,-8,-61,-43,37,68,45,15,-68,-68,-63,86,-5,-7,47,11,33,-40,-45,101,-54,-109,-45,-12,-110,-15,-21,-37,-61,-3,-27,-45,-47,-25,-21,49,50,-17,-62,-64,127,-63, 
};
const TfArray<4, int> tensor_dimension82 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant82_scale = { 8, { 0.0036163176409900188, 0.0037531224079430103, 0.0032643680460751057, 0.0035508328583091497, 0.0037756150122731924, 0.0044566532596945763, 0.0034218952059745789, 0.003538875374943018, } };
const TfArray<8, int> quant82_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data83[48] = { 6133, 5546, 9948, 8470, 40907, -2172, -651, -109, -319, -13078, -2020, -1951, 18095, 9340, 5160, -40, 6581, 7741, 415, -5378, 5882, -3030, 11626, -162, 6020, 9883, -121, -77, 61, 2090, 8667, 1701, 388, -1500, -410, 289, 7584, 4623, -9, 331, 7868, -7831, 4887, -50, 231, 1424, 6374, -1853, };
const TfArray<1, int> tensor_dimension83 = { 1, { 48 } };
const TfArray<48, float> quant83_scale = { 48, { 0.00025735536473803222, 0.0001477287441957742, 7.9182718764059246e-05, 0.00016333602252416313, 4.3947784433839843e-05, 0.00045635271817445755, 0.00019856511789839715, 0.00030741427326574922, 0.0003351498453412205, 0.00021650442795362324, 0.0001264844904653728, 0.0002934096846729517, 5.9107638662680984e-05, 0.00014181363803800195, 0.00043985963566228747, 0.00011456845822976902, 0.00011751319107133895, 0.00016973377205431461, 0.00051408493891358376, 0.00016600271919742227, 0.00014140609710011631, 0.00017391041910741478, 0.0001259683194803074, 0.00019011033873539418, 0.00018675737373996526, 0.00014518447278533131, 0.00040921985055319965, 0.00023198821872938424, 0.00031867300276644528, 0.00028457149164751172, 0.00017837059567682445, 0.00032815264421515167, 0.00023712657275609672, 0.00089467200450599194, 0.00013602167018689215, 0.00019723852165043354, 0.00025693027419038117, 0.0001524912950117141, 0.00017001669039018452, 0.00028285209555178881, 0.00016810603847261518, 0.00015503412578254938, 0.00025753301451914012, 0.00040183603414334357, 0.00037304539000615478, 0.00038301612948998809, 0.00021296461636666209, 0.00027516961563378572, } };
const TfArray<48, int> quant83_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data84[1*3*3*48] = { 
  /* [0][0][][] */ -102,-18,48,-10,-127,11,-127,0,-12,127,68,11,-59,59,20,35,26,18,22,-7,-112,-16,6,54,-31,6,-8,-66,24,-113,88,48,-7,26,55,-39,18,-127,-28,125,-75,48,-9,-5,-11,9,4,-12, 15,-127,-11,24,-58,20,-124,-8,27,36,127,76,-91,-80,-88,-48,0,-49,114,96,18,64,-73,19,-74,-4,0,-127,9,-70,-27,-117,-7,16,-44,-127,-20,2,13,97,127,-18,-13,127,6,-127,3,-34, -127,7,45,3,-102,18,-73,-3,-10,107,-5,-13,-65,55,23,62,-45,-8,15,-29,-98,-27,42,20,4,-19,8,-44,-39,-127,50,1,6,14,-46,-35,17,-91,18,96,-70,37,-9,8,3,15,8,42, 
  /* [0][1][][] */ 59,-29,32,-5,-85,3,57,-17,-63,56,40,33,-78,-36,-63,116,-32,0,52,127,3,51,-107,-11,-35,-102,-20,-63,127,24,40,127,-127,-3,121,0,-5,36,-117,-127,47,-16,13,12,-127,46,1,-47, 118,-56,-127,-127,64,127,-10,127,-127,-92,-39,127,-83,-127,-127,-127,-12,-127,-77,67,127,127,-91,82,-127,81,-121,97,-59,-54,-127,-96,15,127,-127,102,-127,-53,127,-43,-66,127,-127,-70,105,83,-127,-75, 49,-20,85,-1,-54,-31,16,-26,-39,26,4,-26,-40,-81,-63,110,-127,-47,28,114,-29,53,-23,-127,18,-77,127,-1,-53,101,-50,105,113,-42,-48,16,-11,-3,-6,-58,24,-19,-9,-9,-4,35,-19,127, 
  /* [0][2][][] */ -104,-32,44,-19,-49,12,75,-2,86,53,72,12,-64,61,33,-10,57,40,9,-13,-52,-22,25,34,-29,-15,-6,7,5,31,81,3,-5,15,96,13,18,-44,-49,-5,-47,24,5,-13,-12,-11,-13,6, -65,-107,68,-48,-65,-16,124,-3,98,40,83,-37,117,-106,-69,-25,-39,29,-127,40,-70,5,-127,-13,19,-127,-2,31,2,63,14,-83,-6,-44,-9,27,-12,53,48,-57,-7,14,25,-44,22,-27,-6,8, -69,2,35,-1,-71,32,56,-4,44,24,9,21,-127,36,33,0,-56,43,2,-23,-42,-26,83,-64,-12,-25,11,29,-18,26,28,-40,-6,25,-18,13,22,-43,-2,-41,-39,48,19,0,-10,4,3,-6, 
};
const TfArray<4, int> tensor_dimension84 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant84_scale = { 48, { 0.012049944140017033, 0.0069169844500720501, 0.003707509022206068, 0.0076477513648569584, 0.0020577318500727415, 0.021367438137531281, 0.0092972554266452789, 0.014393812045454979, 0.015692451968789101, 0.01013721339404583, 0.0059222821146249771, 0.013738086447119713, 0.0027675495948642492, 0.0066400263458490372, 0.020595194771885872, 0.0053643472492694855, 0.0055022258311510086, 0.0079473080113530159, 0.024070587009191513, 0.0077726123854517937, 0.0066209440119564533, 0.0081428680568933487, 0.0058981138281524181, 0.0089013837277889252, 0.008744390681385994, 0.0067978561855852604, 0.019160572439432144, 0.010862198658287525, 0.014920970425009727, 0.013324263505637646, 0.0083517031744122505, 0.015364827588200569, 0.011102787218987942, 0.041890509426593781, 0.0063688335940241814, 0.0092351408675312996, 0.012030039913952351, 0.0071399775333702564, 0.0079605551436543465, 0.01324375718832016, 0.0078710941597819328, 0.0072590387426316738, 0.012058261781930923, 0.018814846873283386, 0.017466805875301361, 0.017933657392859459, 0.0099714715033769608, 0.012884046882390976, } };
const TfArray<48, int> quant84_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data85[48] = { 17503, -345, 1368, 1548, 3252, 1047, 8245, -618, 13168, 10727, -617, -101, 1649, 1591, 724, 3208, 4184, 3437, -2259, -694, 3200, 3235, 4426, 67, 4673, 2998, 8388, -729, 6555, -322, 6933, 8068, 4217, 825, 1213, 2215, 3756, 1707, 1637, 2906, -207, 4015, 2377, 6547, 5781, 2700, 282, 2599, };
const TfArray<1, int> tensor_dimension85 = { 1, { 48 } };
const TfArray<48, float> quant85_scale = { 48, { 5.9603222325677052e-05, 0.00034650936140678823, 0.00031697226222604513, 0.00020398864580783993, 0.00021789234597235918, 0.00012914703984279186, 7.59880495024845e-05, 0.00023667316418141127, 6.9476591306738555e-05, 7.0297290221787989e-05, 0.00016067623801063746, 0.00014609405479859561, 0.00028182839741930366, 0.00021823561110068113, 8.3546037785708904e-05, 0.00019591762975323945, 0.00012374961806926876, 0.00021593330893665552, 0.00017679869779385626, 0.00012048102507833391, 0.00022401013120543212, 0.00011177611304447055, 0.00015393577632494271, 0.00024452368961647153, 0.00014824817480985075, 0.00023811623395886272, 0.00010864437354030088, 0.000363101193215698, 0.00014023369294591248, 0.00010705488966777921, 0.00011165683099534363, 7.7367607445921749e-05, 0.00020356029563117772, 9.938880248228088e-05, 0.00024705240502953529, 0.00030454547959379852, 0.00017174650565721095, 0.00023949022579472512, 0.00032257303246296942, 9.2016482085455209e-05, 0.00021921948064118624, 0.00018085597548633814, 0.00032154380460269749, 0.0001043930315063335, 0.00015698920469731092, 0.00011091895430581644, 0.00023823199444450438, 0.00026321568293496966, } };
const TfArray<48, int> quant85_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data86[48*1*1*8] = { 
  /* [0][0][][] */ 65,-91,41,0,52,-127,-5,-80, 
  /* [1][0][][] */ -47,-51,-74,61,-127,53,-32,19, 
  /* [2][0][][] */ 67,-54,55,-20,127,-27,-1,75, 
  /* [3][0][][] */ -10,127,-14,112,11,5,-47,-42, 
  /* [4][0][][] */ -31,127,73,-38,46,20,-65,20, 
  /* [5][0][][] */ -91,28,1,14,127,-24,85,-16, 
  /* [6][0][][] */ 124,-72,118,15,38,127,105,-21, 
  /* [7][0][][] */ -30,-48,50,53,84,20,-53,127, 
  /* [8][0][][] */ 14,-14,-32,-95,-14,127,-73,18, 
  /* [9][0][][] */ -127,24,-90,-2,98,-38,-58,10, 
  /* [10][0][][] */ -21,-79,46,30,-33,-91,-127,-81, 
  /* [11][0][][] */ 41,90,-21,-7,-26,-74,27,127, 
  /* [12][0][][] */ 48,-51,-97,48,-87,127,53,86, 
  /* [13][0][][] */ -43,-28,-127,19,-87,81,19,41, 
  /* [14][0][][] */ -59,127,-83,86,90,38,-13,78, 
  /* [15][0][][] */ -81,-11,-13,-6,84,76,-66,-127, 
  /* [16][0][][] */ 83,-127,-102,-32,-59,105,-53,-17, 
  /* [17][0][][] */ 15,127,-108,-53,-75,32,63,-114, 
  /* [18][0][][] */ -76,-113,41,22,127,-73,-31,78, 
  /* [19][0][][] */ -67,102,-25,43,7,-104,-127,50, 
  /* [20][0][][] */ 82,-18,39,-65,-6,-60,25,127, 
  /* [21][0][][] */ 61,-40,127,117,-39,112,97,-20, 
  /* [22][0][][] */ -29,107,7,3,127,-69,-112,-66, 
  /* [23][0][][] */ 36,-52,28,127,-1,-55,69,-34, 
  /* [24][0][][] */ -33,57,127,-66,-21,-27,15,-31, 
  /* [25][0][][] */ -53,-123,101,67,29,-5,-32,127, 
  /* [26][0][][] */ 65,-25,-127,-95,-107,50,29,106, 
  /* [27][0][][] */ 41,127,-105,-60,-46,23,33,-123, 
  /* [28][0][][] */ -25,50,-53,-91,-15,-41,-127,-39, 
  /* [29][0][][] */ -100,53,-127,-47,111,49,-49,-1, 
  /* [30][0][][] */ 83,-55,12,-25,-127,111,125,67, 
  /* [31][0][][] */ -59,81,-33,90,127,-75,-11,-3, 
  /* [32][0][][] */ 7,81,50,-52,127,-39,-18,-83, 
  /* [33][0][][] */ -127,55,-120,8,50,30,-30,7, 
  /* [34][0][][] */ 52,-12,58,-79,-35,-127,64,101, 
  /* [35][0][][] */ -127,32,51,-17,-83,1,0,5, 
  /* [36][0][][] */ -1,-44,-41,39,-11,10,127,39, 
  /* [37][0][][] */ -32,-24,-74,-50,-30,-127,-75,-11, 
  /* [38][0][][] */ -113,27,21,25,-127,23,40,9, 
  /* [39][0][][] */ -49,-47,37,-32,-27,107,-123,-127, 
  /* [40][0][][] */ 71,-127,18,74,-56,-63,122,67, 
  /* [41][0][][] */ 20,127,81,43,30,29,-96,-29, 
  /* [42][0][][] */ 34,127,-33,-15,-28,21,-12,-49, 
  /* [43][0][][] */ -71,55,-93,-127,18,22,-70,76, 
  /* [44][0][][] */ -47,24,-22,11,36,127,-11,-9, 
  /* [45][0][][] */ -2,81,-91,-39,-71,-81,-16,127, 
  /* [46][0][][] */ 27,117,-106,-33,-63,27,10,-127, 
  /* [47][0][][] */ 24,4,-7,-58,-63,-127,-25,41, 
};
const TfArray<4, int> tensor_dimension86 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant86_scale = { 48, { 0.001011461135931313, 0.0058802315033972263, 0.0053789899684488773, 0.0034616682678461075, 0.003697612788528204, 0.002191613195464015, 0.0012895101681351662, 0.0040163216181099415, 0.0011790113057941198, 0.0011929385364055634, 0.0027266608085483313, 0.0024792025797069073, 0.0047826017253100872, 0.0037034379784017801, 0.0014177685370668769, 0.0033247040119022131, 0.0021000194828957319, 0.0036643682979047298, 0.0030002575367689133, 0.0020445517729967833, 0.0038014310412108898, 0.0018968302756547928, 0.0026122757699340582, 0.0041495445184409618, 0.0025157576892524958, 0.0040408102795481682, 0.0018436849350109696, 0.0061617936007678509, 0.0023797526955604553, 0.0018167115049436688, 0.001894806046038866, 0.0013129210565239191, 0.0034543992951512337, 0.0016866187797859311, 0.0041924566030502319, 0.0051681087352335453, 0.0029145223088562489, 0.0040641268715262413, 0.0054740342311561108, 0.0015615111915394664, 0.0037201342638581991, 0.0030691090505570173, 0.0054565686732530594, 0.0017715400317683816, 0.0026640922296792269, 0.0018822842976078391, 0.0040427749045193195, 0.0044667455367743969, } };
const TfArray<48, int> quant86_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data87[8] = { 6265, -1665, -2753, 3191, 2631, -18080, -2803, -10644, };
const TfArray<1, int> tensor_dimension87 = { 1, { 8 } };
const TfArray<8, float> quant87_scale = { 8, { 0.0002244161005364731, 0.00016991930897347629, 0.00021406213636510074, 0.00016306492034345865, 0.00017256461433134973, 8.3209073636680841e-05, 0.0001384651695843786, 0.00012096292630303651, } };
const TfArray<8, int> quant87_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data88[8*1*1*48] = { 
  /* [0][0][][] */ -24,19,3,30,-20,10,-1,31,-47,-6,-38,-2,-16,15,36,2,-48,-21,30,-19,-27,127,-21,-20,-22,-37,4,31,-35,35,10,-24,-8,21,32,38,19,4,29,-24,4,-33,-19,-13,-20,22,23,14, 
  /* [1][0][][] */ 11,55,2,47,32,36,43,113,-47,-49,80,-32,-37,-32,28,-24,-20,-2,38,3,28,-127,-6,-68,9,12,-14,12,-7,11,-35,-59,-39,1,21,-12,16,62,69,-20,25,22,39,-29,-36,43,5,47, 
  /* [2][0][][] */ -2,26,1,27,26,17,-28,35,21,13,63,19,5,-13,33,-51,22,26,-9,10,-14,127,8,-11,20,-41,-5,0,-24,30,-19,-56,-15,10,18,-38,31,-12,-38,-25,24,-15,-9,-47,-32,34,13,17, 
  /* [3][0][][] */ -39,51,-5,3,-20,36,65,1,1,7,6,17,-16,36,45,19,-16,0,6,2,44,-79,-9,21,-17,2,-127,30,-36,-29,-10,8,-42,-13,13,30,33,-11,-38,-31,1,-17,11,19,21,-9,42,19, 
  /* [4][0][][] */ 21,0,-44,7,19,-8,18,-12,-53,8,-2,23,5,-10,-19,15,-30,34,-15,-8,0,-127,-9,-5,36,31,33,-45,44,-7,0,8,-13,49,29,-9,-22,15,-9,5,-10,-61,-85,19,31,34,-1,-9, 
  /* [5][0][][] */ -7,49,83,9,1,29,24,-105,69,-34,-15,-3,97,-67,-4,19,18,-38,41,2,-26,127,17,8,81,2,88,51,99,60,-3,-32,-70,-44,106,42,-48,-46,5,-98,12,-19,66,65,-49,-42,-26,-26, 
  /* [6][0][][] */ 67,-7,-28,15,47,-22,41,-49,48,34,1,-34,-16,47,22,-77,25,-127,-23,-19,28,-16,-5,27,-40,-37,46,-21,58,-40,121,47,51,43,29,-54,-60,15,60,-34,-28,26,-74,62,39,7,42,-48, 
  /* [7][0][][] */ -15,46,51,60,-3,16,61,102,58,34,3,72,-63,-10,31,-14,90,-16,-32,-15,-4,-127,0,-103,-78,78,57,20,8,29,20,-23,21,-26,16,27,-18,106,-98,-30,11,-3,32,-16,-53,3,43,17, 
};
const TfArray<4, int> tensor_dimension88 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant88_scale = { 8, { 0.0095376837998628616, 0.0072215702384710312, 0.0090976404026150703, 0.0069302590563893318, 0.0073339957743883133, 0.0035363854840397835, 0.0058847698383033276, 0.0051409243606030941, } };
const TfArray<8, int> quant88_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data89[48] = { 26066, 30060, 12556, 22217, 7322, 12866, 17688, 11375, 56220, -1903, 417, 25176, 17618, -3836, 12188, 338, 6271, 36514, 22648, 21, 5569, -10504, -442, 1176, 52013, 40678, 680, 114, -195, 17722, -1945, 1651, -19283, 18761, 33625, 30903, 34143, 23426, -72, -129, 6370, 46229, 469, -653, -65, -1849, 23841, 12834, };
const TfArray<1, int> tensor_dimension89 = { 1, { 48 } };
const TfArray<48, float> quant89_scale = { 48, { 4.5920616685179994e-05, 5.7103126891888678e-05, 8.3286904555279762e-05, 5.885337304789573e-05, 9.5682924438733608e-05, 7.5208008638583124e-05, 0.00010725137690315023, 0.0001024703960865736, 3.4972181310877204e-05, 6.6041458921972662e-05, 6.3413463067263365e-05, 4.1452793084317818e-05, 0.00013113020395394415, 4.1886716644512489e-05, 5.3816544095752761e-05, 6.8545494286809117e-05, 2.882771150325425e-05, 6.2886065279599279e-05, 4.7144203563220799e-05, 0.00011103843280579895, 5.4114654631121084e-05, 0.00022094338783062994, 0.00012151666305726394, 8.1097270594909787e-05, 3.3094565878855065e-05, 5.6217133533209562e-05, 5.9638205129886046e-05, 9.1090674686711282e-05, 4.6675559133291245e-05, 7.1041969931684434e-05, 0.00020716396102216095, 0.00019414357666391879, 6.4696490881033242e-05, 5.9162237448617816e-05, 6.9135508965700865e-05, 0.00010554699110798538, 6.6542677814140916e-05, 0.00010720628051785752, 0.00010238599497824907, 7.3504575993865728e-05, 0.0001361429167445749, 3.4479766327422112e-05, 7.370036473730579e-05, 5.4195246775634587e-05, 0.00031661023967899382, 9.8293123301118612e-05, 6.1683800595346838e-05, 7.2291921242140234e-05, } };
const TfArray<48, int> quant89_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data90[1*3*3*48] = { 
  /* [0][0][][] */ -42,-81,-47,-67,-43,18,-40,-67,-54,56,39,-90,-27,22,-95,67,87,-73,-58,114,37,64,-47,98,-76,-61,62,69,54,-61,80,56,51,-52,-71,-34,-120,-54,124,60,-15,-15,30,64,71,93,-43,-51, -71,-117,-76,-115,-127,11,-84,-102,-67,90,77,-109,-66,69,-126,101,103,-104,-110,-5,80,76,92,123,-78,-92,102,94,91,-89,98,84,77,-91,-96,-62,-106,-81,127,88,-74,-59,58,84,80,127,-88,-91, -23,-55,-39,-66,-82,17,-48,-54,-46,44,42,-50,-21,76,-82,42,52,-37,-31,-47,56,-127,-53,46,-26,-41,48,23,44,-34,50,36,43,-46,-55,-28,-73,-35,18,41,-30,-36,38,49,26,58,-34,-32, 
  /* [0][1][][] */ -73,-96,-74,-82,-80,-20,-69,-81,-88,91,68,-100,-58,56,-127,80,106,-88,-74,127,77,81,-58,108,-108,-77,77,108,79,-86,93,74,77,-92,-98,-68,-126,-75,109,95,-78,-62,63,73,109,119,-66,-84, -127,-127,-127,-127,-121,-124,-127,-127,-127,127,127,-127,-127,127,-90,127,127,-127,-127,-51,127,85,127,127,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-127,-127,125,127,-127,-127,127,127,127,124,-127,-127, -51,-45,-76,-84,-103,-107,-81,-81,-69,75,62,-73,-50,104,-71,55,95,-49,-50,-116,85,-126,-67,52,-35,-59,46,33,73,-65,68,58,71,-77,-70,-65,-87,-61,46,59,-74,-62,66,85,36,20,-50,-63, 
  /* [0][2][][] */ -33,-26,-37,-30,-58,-27,-37,-43,-48,61,24,-31,-26,9,-91,25,31,-33,-22,28,40,22,-28,37,-39,-21,23,39,33,-25,32,23,47,-51,-44,-41,-37,-25,3,49,-60,-46,33,18,43,32,-35,-26, -60,-24,-78,-51,-84,-127,-73,-55,-68,87,43,-58,-48,62,-89,35,52,-38,-37,-67,69,2,36,20,-48,-53,38,51,55,-59,45,50,69,-85,-72,-73,-43,-48,11,64,-89,-78,65,52,52,13,-70,-50, -28,10,-52,-40,-39,-115,-54,-47,-30,62,19,-50,-14,45,-3,14,52,-17,-31,-83,40,-48,-31,18,-6,-30,10,17,39,-32,20,24,39,-50,-54,-47,-16,-24,13,35,-51,-41,33,36,6,-1,-21,-31, 
};
const TfArray<4, int> tensor_dimension90 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant90_scale = { 48, { 0.0023509387392550707, 0.0029234352987259626, 0.0042639323510229588, 0.003013040404766798, 0.0048985555768013, 0.0038503275718539953, 0.0054908106103539467, 0.0052460450679063797, 0.0017904257401823997, 0.0033810397144407034, 0.0032464975956827402, 0.0021222052164375782, 0.0067133046686649323, 0.0021444202866405249, 0.0027551762759685516, 0.003509235568344593, 0.0014758552424609661, 0.0032194969244301319, 0.0024135811254382133, 0.0056846919469535351, 0.0027704383246600628, 0.011311354115605354, 0.0062211323529481888, 0.0041518327780067921, 0.0016942998627200723, 0.0028780761640518904, 0.0030532204546034336, 0.0046634520404040813, 0.002389588626101613, 0.00363704445771873, 0.010605907067656517, 0.009939318522810936, 0.0033121828455477953, 0.0030288528650999069, 0.0035394416190683842, 0.0054035536013543606, 0.0034066999796777964, 0.0054885018616914749, 0.0052417241968214512, 0.0037631192244589329, 0.0069699338637292385, 0.0017652162350714207, 0.003773142583668232, 0.002774564316496253, 0.016209086403250694, 0.005032186396420002, 0.0031579460483044386, 0.0037010363303124905, } };
const TfArray<48, int> quant90_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data91[48] = { 1056, 3073, 2052, -249, -730, 377, 6890, 3345, 2287, -3282, 1509, 23, 5850, 104, 1182, -1707, -164, 5383, 970, 1611, -706, 29850, 1878, -1517, 1197, 4742, 2155, -1589, 225, 93, -2566, -1798, 3437, 1000, 5623, 12427, 5191, 6002, -3525, -1630, -985, 1897, 1330, 570, -2108, -2795, 3564, 901, };
const TfArray<1, int> tensor_dimension91 = { 1, { 48 } };
const TfArray<48, float> quant91_scale = { 48, { 0.00023530556063633412, 0.0002221438626293093, 0.00022322856239043176, 0.0003652996092569083, 0.00026555775548331439, 0.0002139865537174046, 0.00011905217979801819, 0.0001808549277484417, 0.000221047448576428, 0.00016089442942757159, 0.00025683949934318662, 0.00029553897911682725, 0.0001212845163536258, 0.00042497253161855042, 0.00036524806637316942, 0.00020816104370169342, 0.00044412689749151468, 0.0001283271994907409, 0.00023104857245925814, 0.00021759876108262688, 0.00032144846045412123, 5.3679537813877687e-05, 0.00022628079750575125, 0.00017154039232991636, 0.00023915116616990417, 0.0001638380199437961, 0.00028174062026664615, 0.0002665118663571775, 0.00030729026184417307, 0.0003949726524297148, 0.0001865602534962818, 0.00020068934827577323, 0.00021822427515871823, 0.00032632175134494901, 0.00015875099052209407, 7.9368473961949348e-05, 0.00017259627929888666, 0.00013681250857189298, 0.0001683225273154676, 0.00020005740225315094, 0.00030453017097897828, 0.0002695522562135011, 0.00021453274530358613, 0.00034700456308200955, 0.00021567723888438195, 0.0001842803176259622, 0.00017171681975014508, 0.00021088482753839344, } };
const TfArray<48, int> quant91_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data92[48*1*1*8] = { 
  /* [0][0][][] */ -31,66,-58,54,35,127,36,27, 
  /* [1][0][][] */ 52,-127,-93,-29,-34,60,64,-37, 
  /* [2][0][][] */ -46,48,-40,-112,-40,-127,-33,-71, 
  /* [3][0][][] */ -15,127,60,26,2,-77,-28,30, 
  /* [4][0][][] */ -105,46,-127,86,10,-22,-49,-69, 
  /* [5][0][][] */ 94,-104,-127,28,12,-17,73,-39, 
  /* [6][0][][] */ -16,-86,-62,15,-127,-47,-55,90, 
  /* [7][0][][] */ -21,-41,-12,-41,48,4,-28,127, 
  /* [8][0][][] */ 16,28,-94,-97,45,-36,-127,-90, 
  /* [9][0][][] */ -127,58,-9,101,-8,67,96,1, 
  /* [10][0][][] */ -28,-8,90,-127,-27,63,17,36, 
  /* [11][0][][] */ 105,-20,105,37,-42,46,82,127, 
  /* [12][0][][] */ 58,40,30,-52,65,112,96,-127, 
  /* [13][0][][] */ 34,55,-37,62,-9,-127,-38,53, 
  /* [14][0][][] */ 14,-127,-27,-28,13,69,34,-32, 
  /* [15][0][][] */ -96,-6,-4,-68,59,127,-70,-31, 
  /* [16][0][][] */ 10,-36,113,12,-26,27,127,74, 
  /* [17][0][][] */ 68,17,57,25,-14,-89,-39,-127, 
  /* [18][0][][] */ -127,22,-82,-16,-16,-124,28,-93, 
  /* [19][0][][] */ 69,22,121,-24,-64,41,112,127, 
  /* [20][0][][] */ 22,127,53,-9,23,41,43,9, 
  /* [21][0][][] */ -37,31,27,-107,-60,127,-3,-12, 
  /* [22][0][][] */ 31,-1,84,-10,-50,21,127,100, 
  /* [23][0][][] */ -73,127,57,47,-100,-91,-117,123, 
  /* [24][0][][] */ -14,-9,95,27,-115,127,-9,-92, 
  /* [25][0][][] */ -44,22,74,24,-127,43,-71,19, 
  /* [26][0][][] */ -43,-127,32,-42,12,41,-9,-14, 
  /* [27][0][][] */ -28,68,33,51,-25,127,-32,-13, 
  /* [28][0][][] */ 16,-127,55,23,55,126,39,36, 
  /* [29][0][][] */ 18,127,-21,28,-67,-60,-18,18, 
  /* [30][0][][] */ -49,72,106,90,-127,-67,-47,-109, 
  /* [31][0][][] */ 15,67,26,57,-50,-11,15,-127, 
  /* [32][0][][] */ -19,-31,-60,68,-127,-34,-49,5, 
  /* [33][0][][] */ 80,23,65,53,-33,65,56,127, 
  /* [34][0][][] */ 121,12,-127,-43,-54,-4,71,42, 
  /* [35][0][][] */ 121,102,102,-127,-59,-103,35,113, 
  /* [36][0][][] */ -41,-112,127,36,56,63,5,-30, 
  /* [37][0][][] */ -7,16,-24,-2,-12,-53,-44,127, 
  /* [38][0][][] */ 127,-1,54,7,-1,15,-63,35, 
  /* [39][0][][] */ 60,89,-117,-127,-103,93,45,-66, 
  /* [40][0][][] */ -41,127,-37,63,-53,-23,-58,-13, 
  /* [41][0][][] */ -127,42,-28,-51,69,46,0,-69, 
  /* [42][0][][] */ 42,-32,-5,-25,-26,127,12,84, 
  /* [43][0][][] */ -67,40,127,15,69,17,-39,6, 
  /* [44][0][][] */ 9,127,-2,29,-47,-64,-18,-2, 
  /* [45][0][][] */ -81,81,64,-127,-70,8,-69,-48, 
  /* [46][0][][] */ 39,-44,-18,18,27,13,-127,69, 
  /* [47][0][][] */ -90,-127,24,60,47,-74,10,93, 
};
const TfArray<4, int> tensor_dimension92 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant92_scale = { 48, { 0.0029424773529171944, 0.0027778914663940668, 0.0027914554812014103, 0.0045680426992475986, 0.0033207787200808525, 0.0026758848689496517, 0.0014887381112203002, 0.0022615764755755663, 0.0027641807682812214, 0.0020119720138609409, 0.0032117576338350773, 0.0036956914700567722, 0.0015166532248258591, 0.0053142476826906204, 0.0045673982240259647, 0.0026030372828245163, 0.0055537717416882515, 0.0016047215322032571, 0.0028892441187053919, 0.0027210551779717207, 0.0040196874178946018, 0.0006712583708576858, 0.0028296234086155891, 0.0021450989879667759, 0.0029905664268881083, 0.0020487813744693995, 0.0035231441725045443, 0.0033327098935842514, 0.0038426402024924755, 0.0049391016364097595, 0.002332921139895916, 0.0025096044410020113, 0.0027288773562759161, 0.004080627579241991, 0.0019851685501635075, 0.00099249649792909622, 0.0021583028137683868, 0.0017108295578509569, 0.0021048597991466522, 0.0025017019361257553, 0.0038081256207078695, 0.0033707297407090664, 0.002682714955881238, 0.0043392647057771683, 0.0026970268227159977, 0.002304410794749856, 0.00214730529114604, 0.0026370980776846409, } };
const TfArray<48, int> quant92_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data93[8] = { 6751, -12932, 679, 6095, 2761, -5753, 2198, 5517, };
const TfArray<1, int> tensor_dimension93 = { 1, { 8 } };
const TfArray<8, float> quant93_scale = { 8, { 0.00023071393661666662, 0.00016538873023819178, 9.8331802291795611e-05, 0.0001739415165502578, 0.00026704449555836618, 0.0001249674241989851, 0.00019426576909609139, 9.7544994787313044e-05, } };
const TfArray<8, int> quant93_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data94[8*1*1*48] = { 
  /* [0][0][][] */ -25,-5,-9,-32,-66,-15,-6,-18,63,6,8,-4,10,15,-20,5,-31,12,-17,-18,0,9,-20,2,18,-8,84,9,-17,-81,-14,12,-5,34,127,-11,-24,-42,26,-38,25,5,-5,-18,-17,-1,-20,-85, 
  /* [1][0][][] */ 20,-30,-11,64,3,-8,17,38,70,80,44,-50,-54,73,2,4,-10,-29,20,-22,-63,41,-45,31,86,15,-30,33,28,-2,127,26,-17,-37,-33,-1,-14,11,-24,-10,2,-20,7,23,-5,38,28,24, 
  /* [2][0][][] */ -69,-3,-81,112,-70,-73,27,-64,-82,42,56,-97,-22,-10,-44,3,125,33,-75,-47,-69,-24,-44,16,84,-38,127,-6,84,-14,-67,16,3,-28,50,-4,-51,28,-1,-109,61,-75,-59,-123,-18,-73,-69,100, 
  /* [3][0][][] */ 25,-52,12,-41,34,-23,-9,-75,46,-63,4,-26,-86,-77,-18,8,12,-13,40,-37,-10,31,-83,2,75,-37,49,17,6,-5,-1,-27,-36,34,22,-30,-53,27,-1,-6,127,19,-48,36,-50,49,-10,-50, 
  /* [4][0][][] */ 21,3,13,13,6,33,-9,-12,44,21,7,-46,0,6,-64,17,1,18,23,-19,-26,27,3,40,35,4,-31,7,44,-13,-16,25,-2,-6,30,20,-127,-1,51,10,12,-8,-2,17,-32,49,-26,-96, 
  /* [5][0][][] */ -39,-97,34,119,-32,-4,-51,103,-100,85,48,31,-82,23,73,-39,-11,33,24,-5,-1,33,43,50,-49,12,-26,41,-45,-100,40,23,-109,-50,-27,-3,127,-3,-23,17,-35,-12,84,101,21,39,47,50, 
  /* [6][0][][] */ 87,1,-13,-12,86,-28,-26,-59,39,27,30,-27,-9,7,11,6,-2,0,-10,-29,-31,17,15,25,60,-55,51,0,-23,111,-21,10,42,29,-127,-18,-88,-34,26,-65,-13,-6,-6,-93,-5,4,-19,-11, 
  /* [7][0][][] */ -32,-71,58,-44,18,127,48,-47,-2,-91,-55,-3,-2,-24,-55,3,14,-54,112,62,50,-41,10,-2,-21,13,111,-7,51,28,10,-2,-39,-26,-47,107,-120,98,-35,-35,-51,55,8,-71,16,-19,68,-29, 
};
const TfArray<4, int> tensor_dimension94 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant94_scale = { 8, { 0.0098053421825170517, 0.0070290206931531429, 0.004179101437330246, 0.007392514031380415, 0.011349390260875225, 0.0053111151792109013, 0.0082562947645783424, 0.0041456623002886772, } };
const TfArray<8, int> quant94_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data95[48] = { 9758, 3440, -2024, 7601, -55, -1133, 5320, -429, 1563, 4745, -265, 122, -2378, 11481, 4043, -57, -5532, -409, -617, 117, 13441, -153, -15571, -192, -4920, 823, 413, 2, -1578, -1182, -4850, 188, 15446, -599, 578, 1540, -1516, 1628, -788, 1930, 18395, 764, 3277, 4, 335, -50, -4624, 6198, };
const TfArray<1, int> tensor_dimension95 = { 1, { 48 } };
const TfArray<48, float> quant95_scale = { 48, { 0.00020990525081288069, 0.00028527760878205299, 0.0002060264814645052, 0.00031375093385577202, 0.00039553942042402923, 0.00049794156802818179, 0.00012163996871095151, 0.00025660186656750739, 7.1940492489375174e-05, 0.00021480208670254797, 0.00040295798680745065, 0.0004563423281069845, 0.00024061663134489208, 0.0001561737444717437, 0.00019051640992984176, 0.00031522277276962996, 6.3940278778318316e-05, 0.0016562292585149407, 0.00040068448288366199, 0.00017338270845357329, 9.4085597083903849e-05, 0.00053522962843999267, 0.00010916573228314519, 0.00017448612197767943, 0.00029439158970490098, 0.00028725073207169771, 0.00033870266634039581, 0.00031123860389925539, 0.000482287781778723, 0.00025635812198743224, 0.00015359414101112634, 0.00053393840789794922, 7.0649060944560915e-05, 0.0003942134790122509, 0.00020674180996138602, 0.00066889054141938686, 0.00015394594811368734, 0.00022388214711099863, 0.00088347872951999307, 0.00038185369339771569, 5.1285293011460453e-05, 0.00035246904008090496, 0.00015804063878022134, 0.00014041880785953254, 0.00028029130771756172, 0.00028043636120855808, 0.00014035885396879166, 0.00038378441240638494, } };
const TfArray<48, int> quant95_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data96[1*3*3*48] = { 
  /* [0][0][][] */ -65,50,-42,-52,-7,-17,16,-16,-2,-15,7,39,-3,-94,-95,19,127,-3,56,39,-104,-58,102,-106,-8,-48,-7,94,-12,13,34,127,-18,-11,-15,0,-10,-41,-8,20,110,-95,-55,46,78,-109,-29,-2, -10,-127,34,-127,-2,-20,-72,127,73,-76,23,39,17,-127,-111,11,-38,11,-31,-81,-82,3,73,127,13,-7,11,127,26,-5,10,-103,-97,23,-9,-28,127,-127,56,-8,-4,-122,-62,27,102,69,39,-32, -23,-1,17,-25,-3,34,18,64,-3,12,3,30,25,36,-87,25,72,11,-30,16,-127,50,64,24,-8,67,3,-43,-18,-1,10,-37,-51,2,-2,5,-26,117,-14,12,82,-60,14,-32,59,39,-39,-11, 
  /* [0][1][][] */ -32,-20,-117,-15,-29,23,-3,1,29,-63,-3,-106,-28,-51,-127,120,108,3,127,86,-18,127,127,106,6,-55,-39,1,44,-38,35,-106,5,-27,-54,-5,-5,-94,43,21,85,127,-25,-11,-64,127,58,-32, -127,50,127,118,127,-116,-127,-12,-20,-127,-127,-127,127,-25,-18,38,10,-127,-100,-127,123,-10,-78,-98,127,-37,127,-57,127,127,-45,75,-127,-127,127,-127,85,-86,-127,-127,25,109,-104,14,-127,-71,127,127, -19,4,11,21,40,127,-19,52,69,8,52,-50,-13,-16,-78,-20,72,48,-7,57,-64,-113,123,-23,9,127,17,2,43,28,127,26,10,9,57,12,-23,83,51,-9,4,78,127,-14,-53,-53,60,-6, 
  /* [0][2][][] */ -34,7,-55,-8,-4,-16,15,-14,37,19,5,45,-2,-9,80,0,21,0,56,12,-59,-5,75,23,-6,-52,-14,-72,2,-14,-9,-35,-4,51,-8,-4,-65,6,-8,7,22,-16,-44,-58,-16,13,-59,-36, -19,-45,51,-4,-81,-21,-84,-96,127,66,48,51,-6,-43,21,12,70,99,-37,-17,-87,2,23,-31,-2,-47,-69,-83,-13,-34,98,27,-56,47,-68,-13,25,-110,35,43,-127,-20,-121,127,26,0,56,-48, 11,-11,20,-6,-41,24,18,-97,8,-11,-19,25,9,26,99,-127,45,-23,-28,-11,-66,7,27,-3,-5,31,-30,8,-2,-27,21,13,-16,46,-44,0,-98,91,-19,26,5,-27,38,50,-22,-14,-72,-21, 
};
const TfArray<4, int> tensor_dimension96 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant96_scale = { 48, { 0.0089209731668233871, 0.012124298140406609, 0.008756125345826149, 0.01333441399037838, 0.016810424625873566, 0.021162515506148338, 0.0051696985028684139, 0.010905579663813114, 0.0030574710108339787, 0.0091290883719921112, 0.01712571457028389, 0.019394548609852791, 0.010226206853985786, 0.0066373837180435658, 0.0080969473347067833, 0.013396967202425003, 0.0027174619026482105, 0.070389740169048309, 0.017029089853167534, 0.007368764840066433, 0.0039986376650631428, 0.022747259587049484, 0.0046395435929298401, 0.0074156601913273335, 0.012511641718447208, 0.012208156287670135, 0.01439486350864172, 0.013227640651166439, 0.020497230812907219, 0.010895220562815666, 0.0065277507528662682, 0.022692382335662842, 0.003002585144713521, 0.016754072159528732, 0.0087865265086293221, 0.028427848592400551, 0.0065427026711404324, 0.0095149911940097809, 0.037547845393419266, 0.016228782013058662, 0.0021796249784529209, 0.014979934319853783, 0.0067167272791266441, 0.0059677991084754467, 0.01191238034516573, 0.011918544769287109, 0.0059652514755725861, 0.016310837119817734, } };
const TfArray<48, int> quant96_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data97[48] = { 4801, 1394, 4744, 8685, 392, 5901, 1513, 2324, 2284, 4629, 4196, 6664, 3582, 2081, 3652, 67, 330, -3055, 7666, 2616, 1654, 6773, 8822, 659, 3779, 3848, 2261, -221, -1906, 1632, 7664, 3067, 1586, 1360, 877, -659, 1075, 2430, 150, 2134, 1432, 6544, 2543, 808, 3538, 1566, -231, 12676, };
const TfArray<1, int> tensor_dimension97 = { 1, { 48 } };
const TfArray<48, float> quant97_scale = { 48, { 0.00018992296827491373, 0.00037398040876723826, 0.00015891462680883706, 0.00012454888201318681, 0.0010218593524768949, 0.00012470180809032172, 0.00041267546475864947, 0.00025857685250230134, 0.00023889946169219911, 0.00015754124615341425, 0.00017092422058340162, 9.8636395705398172e-05, 0.00021203444339334965, 0.00019039020116906613, 0.00015258762869052589, 0.00018413204816170037, 0.00031234882771968842, 0.00025029678363353014, 0.00012616100138984621, 0.00039288448169827461, 0.00043023278703913093, 0.00012422539293766022, 9.6877702162601054e-05, 0.00027769510052166879, 0.00016107151168398559, 0.00024461775319650769, 0.00030608056113123894, 0.00020980779663659632, 0.00023486872669309378, 0.00057072838535532355, 0.00011977384565398097, 0.00025754474336281419, 0.00039077061228454113, 0.00022527558030560613, 0.00069766747765243053, 0.00022411260579247028, 0.00017247896175831556, 0.00016853016859386116, 0.00019574533507693559, 0.00032227957854047418, 0.00028906506486237049, 0.0001333734835498035, 0.0001582359109306708, 0.00027076888363808393, 0.00015622455975972116, 0.00032766858930699527, 0.00030811142642050982, 7.9324192483909428e-05, } };
const TfArray<48, int> quant97_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data98[48*1*1*8] = { 
  /* [0][0][][] */ -127,-17,27,-112,-124,123,1,-62, 
  /* [1][0][][] */ 80,4,19,-24,5,60,-127,44, 
  /* [2][0][][] */ -46,49,-103,89,-53,127,19,53, 
  /* [3][0][][] */ 97,-26,-30,74,-2,-67,11,127, 
  /* [4][0][][] */ -80,-6,-5,13,-20,-34,127,3, 
  /* [5][0][][] */ 56,113,21,47,-127,-48,11,-32, 
  /* [6][0][][] */ -1,-68,35,127,13,-96,-19,37, 
  /* [7][0][][] */ 127,-3,102,1,-77,32,74,125, 
  /* [8][0][][] */ -37,-127,48,50,82,-32,-28,3, 
  /* [9][0][][] */ -79,-102,18,-26,-25,3,-51,127, 
  /* [10][0][][] */ -34,-127,30,102,62,115,7,-24, 
  /* [11][0][][] */ -127,-117,31,-71,59,56,-42,126, 
  /* [12][0][][] */ 81,-18,88,-77,24,-127,83,-1, 
  /* [13][0][][] */ 35,17,21,127,-12,18,35,-61, 
  /* [14][0][][] */ -43,-8,39,3,127,-18,-1,127, 
  /* [15][0][][] */ -84,127,47,80,64,105,-45,94, 
  /* [16][0][][] */ 1,-31,-63,-127,-60,60,19,56, 
  /* [17][0][][] */ 24,127,5,57,-25,-45,-5,17, 
  /* [18][0][][] */ 18,34,-15,-127,-46,-87,23,-17, 
  /* [19][0][][] */ 30,-63,-127,-100,-76,99,14,-3, 
  /* [20][0][][] */ 27,4,17,-3,127,23,32,-37, 
  /* [21][0][][] */ -127,-83,-68,-91,45,41,58,-18, 
  /* [22][0][][] */ -68,-44,79,127,46,-47,-51,127, 
  /* [23][0][][] */ 25,37,-46,127,115,29,36,96, 
  /* [24][0][][] */ 127,-1,-121,-22,-1,-23,46,-51, 
  /* [25][0][][] */ 5,-8,-45,-18,70,-25,-127,-60, 
  /* [26][0][][] */ 127,8,105,-34,-89,47,60,119, 
  /* [27][0][][] */ 18,-56,-39,127,38,-2,-24,-109, 
  /* [28][0][][] */ -61,127,82,68,62,-21,-26,3, 
  /* [29][0][][] */ 0,1,52,4,-72,2,127,66, 
  /* [30][0][][] */ -58,-75,52,-66,-77,127,62,43, 
  /* [31][0][][] */ 106,20,91,-23,-97,73,78,127, 
  /* [32][0][][] */ -113,-14,-32,37,-23,21,127,19, 
  /* [33][0][][] */ -117,127,59,80,29,27,-78,8, 
  /* [34][0][][] */ 111,6,24,-17,7,47,-127,18, 
  /* [35][0][][] */ 5,-5,22,30,-43,31,11,-127, 
  /* [36][0][][] */ 21,-4,-69,-112,48,-22,28,127, 
  /* [37][0][][] */ 53,-40,-40,-55,-23,33,59,-127, 
  /* [38][0][][] */ 30,127,21,107,-75,-90,-18,-22, 
  /* [39][0][][] */ 103,-4,111,-12,-91,35,127,118, 
  /* [40][0][][] */ -64,-77,127,105,-17,-25,-89,26, 
  /* [41][0][][] */ 29,-15,8,20,20,-64,-10,127, 
  /* [42][0][][] */ 55,-91,-82,-90,-57,74,40,-127, 
  /* [43][0][][] */ 100,-8,121,-34,-86,-17,113,127, 
  /* [44][0][][] */ -123,-89,-68,127,99,-24,-94,47, 
  /* [45][0][][] */ 127,-16,85,-28,-34,26,-5,74, 
  /* [46][0][][] */ 47,-117,2,78,127,-1,58,12, 
  /* [47][0][][] */ 74,127,-25,111,-38,-80,35,-79, 
};
const TfArray<4, int> tensor_dimension98 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant98_scale = { 48, { 0.0026530011091381311, 0.0052240677177906036, 0.0022198508959263563, 0.0017398018389940262, 0.014274177141487598, 0.0017419380601495504, 0.0057645919732749462, 0.0036120153963565826, 0.0033371453173458576, 0.0022006663493812084, 0.0023876109626144171, 0.0013778347056359053, 0.0029618723783642054, 0.0026595278177410364, 0.0021314702462404966, 0.0025721087586134672, 0.004363146610558033, 0.0034963525831699371, 0.0017623211024329066, 0.0054881353862583637, 0.0060098473913967609, 0.0017352829454466701, 0.0013532678131014109, 0.003879074938595295, 0.0022499801125377417, 0.0034170232247561216, 0.0042755864560604095, 0.0029307687655091286, 0.0032808405812829733, 0.0079724062234163284, 0.0016731001669541001, 0.0035975980572402477, 0.0054586068727076054, 0.0031468356028199196, 0.0097455959767103195, 0.0031305903103202581, 0.0024093287065625191, 0.0023541687987744808, 0.0027343328110873699, 0.0045018675737082958, 0.0040378998965024948, 0.0018630711128935218, 0.0022103700321167707, 0.003782323794439435, 0.002182273892685771, 0.0045771459117531776, 0.0043039550073444843, 0.0011080659460276365, } };
const TfArray<48, int> quant98_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data99[8] = { 3822, 2471, 2243, 10324, 5346, 5490, 2408, -2808, };
const TfArray<1, int> tensor_dimension99 = { 1, { 8 } };
const TfArray<8, float> quant99_scale = { 8, { 0.0001548242726130411, 0.00012378486280795187, 0.00014415563782677054, 0.00014463637489825487, 0.00012899744615424424, 0.000111426692456007, 0.00011769926641136408, 0.00031559958006255329, } };
const TfArray<8, int> quant99_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data100[8*1*1*48] = { 
  /* [0][0][][] */ -28,38,-28,0,-44,-25,-79,23,9,21,37,39,36,5,-43,11,-44,42,11,-63,30,40,-127,5,-8,11,-31,46,-6,-11,23,20,15,-24,36,18,0,108,-67,-17,-12,20,-27,29,5,6,20,-4, 
  /* [1][0][][] */ -74,-101,-58,5,87,-27,-127,61,-25,-39,-12,-77,-20,76,6,-10,114,-124,-9,-18,-61,4,5,-19,21,-6,-26,-53,22,-15,-116,-23,24,-56,-81,-100,44,8,-90,-2,2,39,9,79,-13,7,4,44, 
  /* [2][0][][] */ 7,-68,10,57,112,17,98,-8,-34,-28,-12,-48,3,-26,18,32,-32,-90,44,-60,6,-68,-57,11,-70,59,70,-96,-37,-5,-56,-47,18,5,-68,-48,-6,127,77,-35,-12,9,-25,-75,45,35,48,-25, 
  /* [3][0][][] */ 8,2,20,-15,33,25,22,-90,25,19,-12,9,3,-112,-17,2,-28,9,-18,-4,-6,51,-127,5,18,-96,34,29,46,-16,-31,56,1,9,-3,-33,-98,-45,8,-15,-7,-2,39,2,-16,3,1,-52, 
  /* [4][0][][] */ 36,-57,8,74,53,8,-29,-5,-37,-13,23,-34,75,36,-22,32,-46,-65,66,35,35,-52,127,24,-31,13,-56,-16,-10,16,-81,-43,84,-26,-44,-65,-45,-48,-23,0,-64,98,-1,-9,59,84,44,26, 
  /* [5][0][][] */ -63,-22,-35,53,-6,10,-1,-52,-59,-35,-3,-21,16,38,-71,15,127,-17,54,-76,28,-97,-7,-5,88,-112,-102,-11,55,-43,33,-76,13,-57,-35,26,-79,-19,18,-33,-45,27,94,46,42,18,27,-40, 
  /* [6][0][][] */ -33,6,-37,36,-25,77,-75,11,-21,-1,-127,9,49,37,121,21,22,9,44,-11,40,-15,-47,-15,11,0,-72,17,2,-51,7,-23,35,-43,7,8,-3,-5,-55,-22,-34,45,-23,29,30,31,34,-1, 
  /* [7][0][][] */ 30,-5,39,-18,2,8,12,-11,14,4,-8,-2,-11,-7,-1,-13,12,-4,-25,-19,-21,14,127,13,5,-14,0,9,6,-9,-22,14,-1,20,-1,-19,-10,14,6,27,4,-3,9,-1,-17,-2,-23,15, 
};
const TfArray<4, int> tensor_dimension100 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant100_scale = { 8, { 0.0065800314769148827, 0.005260856356471777, 0.0061266142874956131, 0.0061470456421375275, 0.0054823914542794228, 0.004735634196549654, 0.0050022187642753124, 0.013412981294095516, } };
const TfArray<8, int> quant100_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data101[48] = { 4138, -236, 104, 91, 8406, 3089, 908, 5668, 4288, -157, -1370, 29, 52, -490, -268, 2, 10588, -76, 50, 33435, 38, 16834, -133, -51, -14, -8018, 8208, -256, 431, -358, 3778, 8022, 43, 106, 800, 453, 7136, -697, 1040, -542, 336, -100, 19245, -9183, -2, 9, 0, -180, };
const TfArray<1, int> tensor_dimension101 = { 1, { 48 } };
const TfArray<48, float> quant101_scale = { 48, { 5.6957964261528105e-05, 0.00020100564870517701, 0.0017182958545163274, 0.00057553831720724702, 0.00012327605509199202, 0.00017762226343620569, 7.2616319812368602e-05, 0.0002838950022123754, 0.00019159731164108962, 0.00043664436088874936, 7.0379879616666585e-05, 0.00052605033852159977, 0.00083348184125497937, 0.00018652444123290479, 0.00012552896805573255, 0.0054494151845574379, 0.00017794313316699117, 0.00021375676442403346, 0.00030422731651924551, 0.0001029310078592971, 0.000585140660405159, 7.9800636740401387e-05, 0.00030277346377260983, 0.00012233156303409487, 0.00016220520774368197, 0.00073137501021847129, 0.0001228548790095374, 0.00036723422817885876, 0.00095148815307766199, 0.00048875855281949043, 8.0517806054558605e-05, 0.00012240505020599812, 0.0011109308106824756, 0.00064521812601014972, 0.00018754521443042904, 0.00015193903527688235, 0.00016325704928021878, 6.8420435127336532e-05, 0.00010791118984343484, 0.00022164531401358545, 0.00039947492768988013, 0.00043764224392361939, 7.291073416126892e-05, 0.00017913251940626651, 0.00067198247415944934, 0.0006366153247654438, 0.0034575376193970442, 0.00052739266538992524, } };
const TfArray<48, int> quant101_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data102[1*3*3*48] = { 
  /* [0][0][][] */ 110,-36,-71,-94,23,-101,65,-54,69,24,92,49,-96,60,55,-119,72,-93,3,-41,-127,-57,37,109,-7,70,-6,66,-127,-32,88,-80,-45,-62,47,82,-127,49,112,79,-46,-127,-62,46,-67,-35,7,-82, 83,-56,77,127,88,36,121,-123,-80,98,57,69,1,56,59,119,74,-91,-105,-59,89,-95,52,1,113,127,-33,83,6,52,80,-50,49,112,127,127,-93,47,72,-27,86,24,-37,105,127,109,-4,-10, 22,-22,3,-41,37,54,21,-89,-12,46,-86,35,91,-12,-67,-1,28,-31,97,-20,38,2,-84,-89,22,7,-6,31,33,69,36,8,-4,-45,30,35,-20,11,15,-58,-57,105,14,82,-59,-78,-2,76, 
  /* [0][1][][] */ 127,71,-127,16,-82,-127,70,-64,96,-72,127,-95,90,90,127,126,-45,111,-13,-85,116,-80,49,127,-4,-8,-34,19,-57,79,65,-127,-127,-72,-21,27,-14,101,127,127,-53,-80,-127,54,-3,-27,-127,-127, 126,127,114,-21,-127,12,127,-127,-127,-127,85,-127,37,127,101,-127,-38,127,127,-127,-67,-127,74,-36,72,6,-127,71,10,127,127,-104,119,127,-30,5,-21,127,96,-42,127,-7,-56,127,-10,127,123,44, 23,55,2,9,-32,78,27,-85,-10,-94,-88,-69,-127,-3,-77,1,34,36,-112,-55,-50,-13,-127,-104,-31,1,-70,23,43,81,30,6,6,-61,-11,-4,-1,33,19,-77,-64,92,-15,101,8,-85,3,95, 
  /* [0][2][][] */ 40,-42,-29,-1,38,-25,4,-19,70,20,31,45,5,47,-13,-14,-127,-29,-5,-17,17,-37,11,43,84,-13,-15,-95,22,43,-13,-77,-25,-42,-71,-4,78,23,33,72,-105,-54,-116,35,2,-5,93,-64, 13,-65,4,0,35,3,29,-50,-92,64,0,59,-21,60,-7,13,-96,-24,-12,-52,-28,-71,30,-11,127,-10,-45,-127,19,70,0,-53,29,80,-61,13,85,45,17,-25,-65,0,-56,85,-4,-9,-98,60, -4,-27,23,6,5,20,5,-20,-10,49,-35,31,17,-16,-22,1,21,-4,19,-37,11,4,-41,-53,-12,-6,-13,-41,17,60,-6,13,-3,-38,-41,1,70,19,2,-42,-106,52,-28,48,6,4,5,13, 
};
const TfArray<4, int> tensor_dimension102 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant102_scale = { 48, { 0.0024207134265452623, 0.0085427397862076759, 0.073027573525905609, 0.024460377171635628, 0.0052392319776117802, 0.0075489459559321404, 0.0030861934646964073, 0.01206553727388382, 0.0081428857520222664, 0.018557384610176086, 0.0029911447782069445, 0.022357139736413956, 0.035422977060079575, 0.0079272883012890816, 0.0053349807858467102, 0.23160015046596527, 0.0075625833123922348, 0.0090846624225378036, 0.012929661199450493, 0.0043745678849518299, 0.024868477135896683, 0.0033915271051228046, 0.012867871671915054, 0.0051990910433232784, 0.0068937214091420174, 0.031083438545465469, 0.005221332423388958, 0.015607453882694244, 0.040438245981931686, 0.020772237330675125, 0.0034220067318528891, 0.0052022146992385387, 0.047214556485414505, 0.027421770617365837, 0.0079706711694598198, 0.0064574088901281357, 0.006938424427062273, 0.0029078684747219086, 0.0045862253755331039, 0.0094199255108833313, 0.016977684572339058, 0.018599795177578926, 0.0030987062491476536, 0.0076131317764520645, 0.028559254482388496, 0.027056150138378143, 0.14694534242153168, 0.022414188832044601, } };
const TfArray<48, int> quant102_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data103[48] = { -1672, -12972, 25255, 6873, 17164, 5026, 4930, 803, -1759, -11640, 943, 6966, 32737, -18954, 133, 9285, -11249, -219, 4118, 11387, 14091, 4818, 1389, 506, 18493, 35520, 16123, -18179, 3414, -1470, -21, -5447, 30878, 12640, 17622, -2504, -17073, 125, -5996, -592, -20098, -15438, -2209, 4064, 11915, -18614, 11605, -2623, };
const TfArray<1, int> tensor_dimension103 = { 1, { 48 } };
const TfArray<48, float> quant103_scale = { 48, { 0.00023267368669621646, 0.00015292814350686967, 3.6867128073936328e-05, 0.0001531112939119339, 0.00016762991435825825, 0.00041339267045259476, 0.00046126788947731256, 0.00040974409785121679, 0.00032358517637476325, 0.00018112665566150099, 0.00094526936300098896, 0.00016975874314084649, 4.1716135456226766e-05, 0.00020598861738108099, 0.00037835122202523053, 3.2543346605962142e-05, 0.00015785191499162465, 0.00020113641221541911, 0.00019765300385188311, 0.00013122842938173562, 8.6512824054807425e-05, 0.00065373489633202553, 0.00025611641467548907, 0.00052969664102420211, 0.00011948708561249077, 5.7971283240476623e-05, 0.00023592886282131076, 0.00017640984151512384, 0.00056470202980563045, 0.00028250555624254048, 0.00065744470339268446, 0.00065676280064508319, 6.8897046730853617e-05, 0.00017402664525434375, 0.00019147142302244902, 0.00046357602695934474, 0.00025130098219960928, 0.00026369004626758397, 0.00056722480803728104, 0.00025038167950697243, 0.00018454126256983727, 0.00014714989811182022, 0.00017952299094758928, 0.00026502885157242417, 8.6888911027926952e-05, 0.00015857236576266587, 2.6968082238454372e-05, 0.00037567669642157853, } };
const TfArray<48, int> quant103_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data104[48*1*1*8] = { 
  /* [0][0][][] */ 11,52,5,-19,93,-24,127,-3, 
  /* [1][0][][] */ 127,84,74,15,-11,-42,-3,121, 
  /* [2][0][][] */ -64,11,-2,127,9,-17,-36,59, 
  /* [3][0][][] */ 49,-33,-127,0,0,-43,24,119, 
  /* [4][0][][] */ -121,81,-127,-16,16,27,-39,-44, 
  /* [5][0][][] */ 127,-17,-5,-47,-1,-32,9,-127, 
  /* [6][0][][] */ 6,-7,-4,1,-127,-26,56,4, 
  /* [7][0][][] */ -4,-60,-4,1,-25,2,-127,-2, 
  /* [8][0][][] */ -12,25,34,-7,127,15,-60,-19, 
  /* [9][0][][] */ 127,-37,27,0,-6,-31,40,110, 
  /* [10][0][][] */ 127,6,-5,-37,-2,10,0,-124, 
  /* [11][0][][] */ -51,1,-2,127,-2,-44,-35,34, 
  /* [12][0][][] */ -127,-3,-77,-18,17,113,-58,-126, 
  /* [13][0][][] */ 115,6,127,13,-7,21,24,47, 
  /* [14][0][][] */ -127,-6,14,16,0,-14,7,125, 
  /* [15][0][][] */ -127,12,1,126,0,-6,-24,125, 
  /* [16][0][][] */ 66,-72,127,76,-13,-118,35,67, 
  /* [17][0][][] */ 16,-56,-80,127,1,24,-7,115, 
  /* [18][0][][] */ 18,-32,-120,44,-18,0,36,127, 
  /* [19][0][][] */ 24,16,-11,127,-8,3,-71,-45, 
  /* [20][0][][] */ 18,54,112,-115,9,-72,10,-127, 
  /* [21][0][][] */ 4,-3,-6,0,-127,-13,56,2, 
  /* [22][0][][] */ 1,56,-2,-10,3,127,-11,1, 
  /* [23][0][][] */ 120,26,-8,96,-3,0,-44,-127, 
  /* [24][0][][] */ -127,25,-91,-45,22,-42,-48,-61, 
  /* [25][0][][] */ -47,-6,-59,-43,7,-127,11,-44, 
  /* [26][0][][] */ -102,-22,-127,9,11,4,-19,-34, 
  /* [27][0][][] */ 99,4,127,18,-8,47,16,42, 
  /* [28][0][][] */ 6,-63,-22,37,26,-127,2,14, 
  /* [29][0][][] */ -6,-9,26,-127,-15,-7,20,-2, 
  /* [30][0][][] */ -43,5,127,-5,-1,6,-8,-118, 
  /* [31][0][][] */ -1,10,4,0,127,25,-51,-1, 
  /* [32][0][][] */ -127,-18,-110,-9,1,-30,-22,-63, 
  /* [33][0][][] */ 12,-56,5,-34,37,-127,14,-19, 
  /* [34][0][][] */ -52,-127,-126,71,2,-55,-12,-18, 
  /* [35][0][][] */ 56,6,-114,0,0,-1,6,127, 
  /* [36][0][][] */ 64,34,80,28,2,127,10,30, 
  /* [37][0][][] */ -10,18,-3,127,7,-21,-15,12, 
  /* [38][0][][] */ 1,23,8,0,127,25,-39,-1, 
  /* [39][0][][] */ -8,11,-9,18,-33,127,-100,-4, 
  /* [40][0][][] */ 127,-19,120,19,-22,29,16,60, 
  /* [41][0][][] */ 117,-3,127,18,-8,9,33,47, 
  /* [42][0][][] */ 61,-61,-9,-34,27,127,19,-27, 
  /* [43][0][][] */ -9,-66,-8,0,-45,-17,-127,3, 
  /* [44][0][][] */ -24,-127,37,96,18,41,13,-120, 
  /* [45][0][][] */ 123,13,127,-2,-7,29,26,45, 
  /* [46][0][][] */ -85,19,4,127,2,3,-39,71, 
  /* [47][0][][] */ -5,48,-10,-3,0,127,-16,1, 
};
const TfArray<4, int> tensor_dimension104 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant104_scale = { 48, { 0.0039483439177274704, 0.0025951061397790909, 0.00062561483355239034, 0.0025982141960412264, 0.0028445872012525797, 0.0070150452665984631, 0.0078274616971611977, 0.0069531314074993134, 0.0054910616017878056, 0.0030736194457858801, 0.016040699556469917, 0.0028807122725993395, 0.00070789980236440897, 0.0034955132286995649, 0.0064204111695289612, 0.00055224262177944183, 0.0026786597445607185, 0.0034131738357245922, 0.0033540623262524605, 0.0022268739994615316, 0.0014680748572573066, 0.011093520559370518, 0.0043461541645228863, 0.0089886598289012909, 0.0020276298746466637, 0.0009837406687438488, 0.0040035825222730637, 0.0029935776256024837, 0.0095826815813779831, 0.0047939633950591087, 0.011156473308801651, 0.011144902557134628, 0.0011691448744386435, 0.0029531361069530249, 0.0032491644378751516, 0.0078666293993592262, 0.0042644389905035496, 0.0044746743515133858, 0.0096254916861653328, 0.004248838871717453, 0.0031315633095800877, 0.0024970525410026312, 0.0030464059673249722, 0.0044973935000598431, 0.001474456861615181, 0.0026908854488283396, 0.00045763346133753657, 0.0063750259578227997, } };
const TfArray<48, int> quant104_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data105[8] = { 1876, 1134, -703, -10857, 46, -1592, -987, 5182, };
const TfArray<1, int> tensor_dimension105 = { 1, { 8 } };
const TfArray<8, float> quant105_scale = { 8, { 0.00018588290549814701, 0.0002108216576743871, 0.0002828568103723228, 0.00016570415755268186, 0.00020708744705189019, 0.00010354421829106286, 0.0002690984692890197, 0.00016185182903427631, } };
const TfArray<8, int> quant105_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data106[8*1*1*8] = { 
  /* [0][0][][] */ -11,-13,-21,13,-9,-127,9,38, 
  /* [1][0][][] */ -61,24,-127,120,8,61,-19,40, 
  /* [2][0][][] */ 9,-10,24,-4,-9,-127,12,26, 
  /* [3][0][][] */ 24,51,52,127,16,-41,-43,-13, 
  /* [4][0][][] */ 16,56,21,-18,-127,-7,25,-6, 
  /* [5][0][][] */ 61,-24,127,-103,18,-58,-7,-45, 
  /* [6][0][][] */ 30,127,47,-37,38,-13,-67,-20, 
  /* [7][0][][] */ -22,-27,-42,-16,-13,-127,21,42, 
};
const TfArray<4, int> tensor_dimension106 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant106_scale = { 8, { 0.0097122667357325554, 0.011015301570296288, 0.01477909367531538, 0.0086579397320747375, 0.010820191353559494, 0.0054101212881505489, 0.014060229063034058, 0.0084566576406359673, } };
const TfArray<8, int> quant106_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data107[8] = { 8332, 281, 2027, 1473, 13475, 356, 936, -451, };
const TfArray<1, int> tensor_dimension107 = { 1, { 8 } };
const TfArray<8, float> quant107_scale = { 8, { 0.00010869617835851386, 0.00038160503027029335, 0.00015214573068078607, 0.00056396581931039691, 0.00015157063899096102, 0.00025047280360013247, 0.00050443154759705067, 7.8022290836088359e-05, } };
const TfArray<8, int> quant107_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data108[1*3*3*8] = { 
  /* [0][0][][] */ -22,-5,3,-1,-2,27,-3,-3, 12,-1,3,-7,10,127,11,127, 3,0,4,-8,-1,16,2,8, 
  /* [0][1][][] */ 6,-127,-8,3,-15,-6,-111,-5, -127,100,-77,127,-127,-8,127,-40, 11,-1,-3,-65,-6,1,50,-23, 
  /* [0][2][][] */ 18,-2,1,-4,-1,-22,3,-3, 58,-1,127,-22,13,-113,0,10, 9,0,-6,-8,-2,-20,-5,0, 
};
const TfArray<4, int> tensor_dimension108 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant108_scale = { 8, { 0.0050017773173749447, 0.017559986561536789, 0.007001157384365797, 0.025951523333787918, 0.0069746943190693855, 0.011525789275765419, 0.023211987689137459, 0.0035902836825698614, } };
const TfArray<8, int> quant108_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data109[8] = { 104004, 4102, 117509, 52049, 40680, 777776, 46316, 81184, };
const TfArray<1, int> tensor_dimension109 = { 1, { 8 } };
const TfArray<8, float> quant109_scale = { 8, { 3.0843737476971e-05, 2.3665053959120996e-05, 3.2094209018396214e-05, 1.3182165275793523e-05, 4.6031756937736645e-05, 3.3686987990222406e-06, 4.471769898373168e-06, 3.8093970943009481e-05, } };
const TfArray<8, int> quant109_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data110[8*3*3*3] = { 
  /* [0][0][][] */ 10,-3,13, 9,-23,31, 13,-24,21, 
  /* [0][1][][] */ 41,30,28, 67,19,59, 25,-33,39, 
  /* [0][2][][] */ -20,-92,-12, -29,-127,0, -7,-55,18, 
  /* [1][0][][] */ 30,75,24, 5,9,-2, -32,-69,-27, 
  /* [1][1][][] */ 52,122,39, 1,0,-3, -56,-127,-40, 
  /* [1][2][][] */ 28,45,11, 3,-1,0, -33,-53,-3, 
  /* [2][0][][] */ 43,92,10, 53,127,12, 16,43,-1, 
  /* [2][1][][] */ -48,-84,-29, -82,-94,-39, -31,-6,-21, 
  /* [2][2][][] */ 0,10,6, 4,16,-1, 0,11,-7, 
  /* [3][0][][] */ 45,-30,-16, 78,-35,-39, 31,-16,-12, 
  /* [3][1][][] */ 80,-55,-37, 127,-54,-74, 59,-28,-29, 
  /* [3][2][][] */ 19,-21,-4, 41,-28,-16, 15,-11,-2, 
  /* [4][0][][] */ -12,-23,-4, 27,45,10, -15,-28,-4, 
  /* [4][1][][] */ -28,-59,-9, 64,127,19, -34,-61,-7, 
  /* [4][2][][] */ -9,-13,3, 21,25,-3, -11,-13,-2, 
  /* [5][0][][] */ -33,-59,-30, -54,-85,-48, -44,-30,-22, 
  /* [5][1][][] */ -58,-104,-43, -84,-127,-59, -50,-39,-28, 
  /* [5][2][][] */ -1,4,-10, -4,-2,-6, -4,9,1, 
  /* [6][0][][] */ -99,-5,35, 2,20,-13, 65,17,-20, 
  /* [6][1][][] */ -127,-34,44, 14,21,-27, 108,16,-32, 
  /* [6][2][][] */ -51,-13,17, 15,-7,-2, 34,-13,30, 
  /* [7][0][][] */ -6,16,-2, -16,22,-7, -7,21,-8, 
  /* [7][1][][] */ 17,84,-6, 22,127,-23, -3,60,-27, 
  /* [7][2][][] */ -28,-51,-20, -43,-52,-33, -20,4,-19, 
};
const TfArray<4, int> tensor_dimension110 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant110_scale = { 8, { 0.0078651523217558861, 0.0060345884412527084, 0.0081840232014656067, 0.003361451905220747, 0.011738097295165062, 0.00085901812417432666, 0.001140301232226193, 0.0097139617428183556, } };
const TfArray<8, int> quant110_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 0 };
const TfArray<4, int> tensor_dimension111 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant111_scale = { 1, { 0.021731510758399963, } };
const TfArray<1, int> quant111_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 0 };
const TfArray<4, int> tensor_dimension112 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant112_scale = { 1, { 0.019138982519507408, } };
const TfArray<1, int> quant112_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<4, int> tensor_dimension113 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant113_scale = { 1, { 0.068445809185504913, } };
const TfArray<1, int> quant113_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const TfArray<4, int> tensor_dimension114 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant114_scale = { 1, { 0.058929435908794403, } };
const TfArray<1, int> quant114_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 0 };
const TfArray<4, int> tensor_dimension115 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant115_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant115_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<4, int> tensor_dimension116 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant116_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant116_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<4, int> tensor_dimension117 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant117_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant117_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfArray<4, int> tensor_dimension118 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant118_scale = { 1, { 0.071587972342967987, } };
const TfArray<1, int> quant118_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant118 = { (TfLiteFloatArray*)&quant118_scale, (TfLiteIntArray*)&quant118_zero, 0 };
const TfArray<4, int> tensor_dimension119 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant119_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant119_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant119 = { (TfLiteFloatArray*)&quant119_scale, (TfLiteIntArray*)&quant119_zero, 0 };
const TfArray<4, int> tensor_dimension120 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant120_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant120_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant120 = { (TfLiteFloatArray*)&quant120_scale, (TfLiteIntArray*)&quant120_zero, 0 };
const TfArray<4, int> tensor_dimension121 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant121_scale = { 1, { 0.066814839839935303, } };
const TfArray<1, int> quant121_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant121 = { (TfLiteFloatArray*)&quant121_scale, (TfLiteIntArray*)&quant121_zero, 0 };
const TfArray<4, int> tensor_dimension122 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant122_scale = { 1, { 0.079968519508838654, } };
const TfArray<1, int> quant122_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant122 = { (TfLiteFloatArray*)&quant122_scale, (TfLiteIntArray*)&quant122_zero, 0 };
const TfArray<4, int> tensor_dimension123 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant123_scale = { 1, { 0.019532885402441025, } };
const TfArray<1, int> quant123_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant123 = { (TfLiteFloatArray*)&quant123_scale, (TfLiteIntArray*)&quant123_zero, 0 };
const TfArray<4, int> tensor_dimension124 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant124_scale = { 1, { 0.019532885402441025, } };
const TfArray<1, int> quant124_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant124 = { (TfLiteFloatArray*)&quant124_scale, (TfLiteIntArray*)&quant124_zero, 0 };
const TfArray<4, int> tensor_dimension125 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant125_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant125_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant125 = { (TfLiteFloatArray*)&quant125_scale, (TfLiteIntArray*)&quant125_zero, 0 };
const TfArray<4, int> tensor_dimension126 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant126_scale = { 1, { 0.058927841484546661, } };
const TfArray<1, int> quant126_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant126 = { (TfLiteFloatArray*)&quant126_scale, (TfLiteIntArray*)&quant126_zero, 0 };
const TfArray<4, int> tensor_dimension127 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant127_scale = { 1, { 0.021357391029596329, } };
const TfArray<1, int> quant127_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant127 = { (TfLiteFloatArray*)&quant127_scale, (TfLiteIntArray*)&quant127_zero, 0 };
const TfArray<4, int> tensor_dimension128 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant128_scale = { 1, { 0.02024460956454277, } };
const TfArray<1, int> quant128_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant128 = { (TfLiteFloatArray*)&quant128_scale, (TfLiteIntArray*)&quant128_zero, 0 };
const TfArray<4, int> tensor_dimension129 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant129_scale = { 1, { 0.025513716042041779, } };
const TfArray<1, int> quant129_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant129 = { (TfLiteFloatArray*)&quant129_scale, (TfLiteIntArray*)&quant129_zero, 0 };
const TfArray<4, int> tensor_dimension130 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant130_scale = { 1, { 0.059551987797021866, } };
const TfArray<1, int> quant130_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant130 = { (TfLiteFloatArray*)&quant130_scale, (TfLiteIntArray*)&quant130_zero, 0 };
const TfArray<4, int> tensor_dimension131 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant131_scale = { 1, { 0.017288131639361382, } };
const TfArray<1, int> quant131_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant131 = { (TfLiteFloatArray*)&quant131_scale, (TfLiteIntArray*)&quant131_zero, 0 };
const TfArray<4, int> tensor_dimension132 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant132_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant132_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant132 = { (TfLiteFloatArray*)&quant132_scale, (TfLiteIntArray*)&quant132_zero, 0 };
const TfArray<4, int> tensor_dimension133 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant133_scale = { 1, { 0.035332288593053818, } };
const TfArray<1, int> quant133_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant133 = { (TfLiteFloatArray*)&quant133_scale, (TfLiteIntArray*)&quant133_zero, 0 };
const TfArray<4, int> tensor_dimension134 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant134_scale = { 1, { 0.071420423686504364, } };
const TfArray<1, int> quant134_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant134 = { (TfLiteFloatArray*)&quant134_scale, (TfLiteIntArray*)&quant134_zero, 0 };
const TfArray<4, int> tensor_dimension135 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant135_scale = { 1, { 0.017839513719081879, } };
const TfArray<1, int> quant135_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant135 = { (TfLiteFloatArray*)&quant135_scale, (TfLiteIntArray*)&quant135_zero, 0 };
const TfArray<4, int> tensor_dimension136 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant136_scale = { 1, { 0.017839513719081879, } };
const TfArray<1, int> quant136_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant136 = { (TfLiteFloatArray*)&quant136_scale, (TfLiteIntArray*)&quant136_zero, 0 };
const TfArray<4, int> tensor_dimension137 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant137_scale = { 1, { 0.021772865206003189, } };
const TfArray<1, int> quant137_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant137 = { (TfLiteFloatArray*)&quant137_scale, (TfLiteIntArray*)&quant137_zero, 0 };
const TfArray<4, int> tensor_dimension138 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant138_scale = { 1, { 0.051465433090925217, } };
const TfArray<1, int> quant138_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant138 = { (TfLiteFloatArray*)&quant138_scale, (TfLiteIntArray*)&quant138_zero, 0 };
const TfArray<4, int> tensor_dimension139 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant139_scale = { 1, { 0.012804871425032616, } };
const TfArray<1, int> quant139_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant139 = { (TfLiteFloatArray*)&quant139_scale, (TfLiteIntArray*)&quant139_zero, 0 };
const TfArray<4, int> tensor_dimension140 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant140_scale = { 1, { 0.016720984131097794, } };
const TfArray<1, int> quant140_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant140 = { (TfLiteFloatArray*)&quant140_scale, (TfLiteIntArray*)&quant140_zero, 0 };
const TfArray<4, int> tensor_dimension141 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant141_scale = { 1, { 0.013946858234703541, } };
const TfArray<1, int> quant141_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant141 = { (TfLiteFloatArray*)&quant141_scale, (TfLiteIntArray*)&quant141_zero, 0 };
const TfArray<4, int> tensor_dimension142 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant142_scale = { 1, { 0.057113721966743469, } };
const TfArray<1, int> quant142_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant142 = { (TfLiteFloatArray*)&quant142_scale, (TfLiteIntArray*)&quant142_zero, 0 };
const TfArray<4, int> tensor_dimension143 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant143_scale = { 1, { 0.013531005941331387, } };
const TfArray<1, int> quant143_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant143 = { (TfLiteFloatArray*)&quant143_scale, (TfLiteIntArray*)&quant143_zero, 0 };
const TfArray<4, int> tensor_dimension144 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant144_scale = { 1, { 0.019122578203678131, } };
const TfArray<1, int> quant144_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant144 = { (TfLiteFloatArray*)&quant144_scale, (TfLiteIntArray*)&quant144_zero, 0 };
const TfArray<4, int> tensor_dimension145 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant145_scale = { 1, { 0.014694303274154663, } };
const TfArray<1, int> quant145_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant145 = { (TfLiteFloatArray*)&quant145_scale, (TfLiteIntArray*)&quant145_zero, 0 };
const TfArray<4, int> tensor_dimension146 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant146_scale = { 1, { 0.064033865928649902, } };
const TfArray<1, int> quant146_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant146 = { (TfLiteFloatArray*)&quant146_scale, (TfLiteIntArray*)&quant146_zero, 0 };
const TfArray<4, int> tensor_dimension147 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant147_scale = { 1, { 0.015774961560964584, } };
const TfArray<1, int> quant147_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant147 = { (TfLiteFloatArray*)&quant147_scale, (TfLiteIntArray*)&quant147_zero, 0 };
const TfArray<4, int> tensor_dimension148 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant148_scale = { 1, { 0.020730558782815933, } };
const TfArray<1, int> quant148_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant148 = { (TfLiteFloatArray*)&quant148_scale, (TfLiteIntArray*)&quant148_zero, 0 };
const TfArray<4, int> tensor_dimension149 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant149_scale = { 1, { 0.022254154086112976, } };
const TfArray<1, int> quant149_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant149 = { (TfLiteFloatArray*)&quant149_scale, (TfLiteIntArray*)&quant149_zero, 0 };
const TfArray<4, int> tensor_dimension150 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant150_scale = { 1, { 0.055930443108081818, } };
const TfArray<1, int> quant150_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant150 = { (TfLiteFloatArray*)&quant150_scale, (TfLiteIntArray*)&quant150_zero, 0 };
const TfArray<4, int> tensor_dimension151 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant151_scale = { 1, { 0.015165897086262703, } };
const TfArray<1, int> quant151_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant151 = { (TfLiteFloatArray*)&quant151_scale, (TfLiteIntArray*)&quant151_zero, 0 };
const TfArray<4, int> tensor_dimension152 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant152_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant152_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant152 = { (TfLiteFloatArray*)&quant152_scale, (TfLiteIntArray*)&quant152_zero, 0 };
const TfArray<4, int> tensor_dimension153 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant153_scale = { 1, { 0.027859421446919441, } };
const TfArray<1, int> quant153_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant153 = { (TfLiteFloatArray*)&quant153_scale, (TfLiteIntArray*)&quant153_zero, 0 };
const TfArray<4, int> tensor_dimension154 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant154_scale = { 1, { 0.019767910242080688, } };
const TfArray<1, int> quant154_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant154 = { (TfLiteFloatArray*)&quant154_scale, (TfLiteIntArray*)&quant154_zero, 0 };
const TfArray<4, int> tensor_dimension155 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant155_scale = { 1, { 0.018340254202485085, } };
const TfArray<1, int> quant155_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant155 = { (TfLiteFloatArray*)&quant155_scale, (TfLiteIntArray*)&quant155_zero, 0 };
const TfArray<4, int> tensor_dimension156 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant156_scale = { 1, { 0.023876076564192772, } };
const TfArray<1, int> quant156_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant156 = { (TfLiteFloatArray*)&quant156_scale, (TfLiteIntArray*)&quant156_zero, 0 };
const TfArray<4, int> tensor_dimension157 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant157_scale = { 1, { 0.040148548781871796, } };
const TfArray<1, int> quant157_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant157 = { (TfLiteFloatArray*)&quant157_scale, (TfLiteIntArray*)&quant157_zero, 0 };
const TfArray<4, int> tensor_dimension158 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant158_scale = { 1, { 0.011309931054711342, } };
const TfArray<1, int> quant158_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant158 = { (TfLiteFloatArray*)&quant158_scale, (TfLiteIntArray*)&quant158_zero, 0 };
const TfArray<4, int> tensor_dimension159 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant159_scale = { 1, { 0.019693866372108459, } };
const TfArray<1, int> quant159_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant159 = { (TfLiteFloatArray*)&quant159_scale, (TfLiteIntArray*)&quant159_zero, 0 };
const TfArray<4, int> tensor_dimension160 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant160_scale = { 1, { 0.0264320969581604, } };
const TfArray<1, int> quant160_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant160 = { (TfLiteFloatArray*)&quant160_scale, (TfLiteIntArray*)&quant160_zero, 0 };
const TfArray<4, int> tensor_dimension161 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant161_scale = { 1, { 0.052586626261472702, } };
const TfArray<1, int> quant161_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant161 = { (TfLiteFloatArray*)&quant161_scale, (TfLiteIntArray*)&quant161_zero, 0 };
const TfArray<4, int> tensor_dimension162 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant162_scale = { 1, { 0.014420168474316597, } };
const TfArray<1, int> quant162_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant162 = { (TfLiteFloatArray*)&quant162_scale, (TfLiteIntArray*)&quant162_zero, 0 };
const TfArray<4, int> tensor_dimension163 = { 4, { 1,7,7,96 } };
const TfArray<1, float> quant163_scale = { 1, { 0.014420168474316597, } };
const TfArray<1, int> quant163_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant163 = { (TfLiteFloatArray*)&quant163_scale, (TfLiteIntArray*)&quant163_zero, 0 };
const TfArray<4, int> tensor_dimension164 = { 4, { 1,3,3,96 } };
const TfArray<1, float> quant164_scale = { 1, { 0.014149139635264874, } };
const TfArray<1, int> quant164_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant164 = { (TfLiteFloatArray*)&quant164_scale, (TfLiteIntArray*)&quant164_zero, 0 };
const TfArray<4, int> tensor_dimension165 = { 4, { 1,3,3,16 } };
const TfArray<1, float> quant165_scale = { 1, { 0.030670184642076492, } };
const TfArray<1, int> quant165_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant165 = { (TfLiteFloatArray*)&quant165_scale, (TfLiteIntArray*)&quant165_zero, 0 };
const TfArray<4, int> tensor_dimension166 = { 4, { 1,3,3,96 } };
const TfArray<1, float> quant166_scale = { 1, { 0.010393059812486172, } };
const TfArray<1, int> quant166_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant166 = { (TfLiteFloatArray*)&quant166_scale, (TfLiteIntArray*)&quant166_zero, 0 };
const TfArray<4, int> tensor_dimension167 = { 4, { 1,3,3,96 } };
const TfArray<1, float> quant167_scale = { 1, { 0.01846984401345253, } };
const TfArray<1, int> quant167_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant167 = { (TfLiteFloatArray*)&quant167_scale, (TfLiteIntArray*)&quant167_zero, 0 };
const TfArray<4, int> tensor_dimension168 = { 4, { 1,3,3,16 } };
const TfArray<1, float> quant168_scale = { 1, { 0.017278488725423813, } };
const TfArray<1, int> quant168_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant168 = { (TfLiteFloatArray*)&quant168_scale, (TfLiteIntArray*)&quant168_zero, 0 };
const TfArray<4, int> tensor_dimension169 = { 4, { 1,3,3,16 } };
const TfArray<1, float> quant169_scale = { 1, { 0.029302926734089851, } };
const TfArray<1, int> quant169_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant169 = { (TfLiteFloatArray*)&quant169_scale, (TfLiteIntArray*)&quant169_zero, 0 };
const TfArray<4, int> tensor_dimension170 = { 4, { 1,3,3,96 } };
const TfArray<1, float> quant170_scale = { 1, { 0.011242296546697617, } };
const TfArray<1, int> quant170_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant170 = { (TfLiteFloatArray*)&quant170_scale, (TfLiteIntArray*)&quant170_zero, 0 };
const TfArray<4, int> tensor_dimension171 = { 4, { 1,3,3,96 } };
const TfArray<1, float> quant171_scale = { 1, { 0.015110970474779606, } };
const TfArray<1, int> quant171_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant171 = { (TfLiteFloatArray*)&quant171_scale, (TfLiteIntArray*)&quant171_zero, 0 };
const TfArray<4, int> tensor_dimension172 = { 4, { 1,3,3,16 } };
const TfArray<1, float> quant172_scale = { 1, { 0.014876554720103741, } };
const TfArray<1, int> quant172_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant172 = { (TfLiteFloatArray*)&quant172_scale, (TfLiteIntArray*)&quant172_zero, 0 };
const TfArray<4, int> tensor_dimension173 = { 4, { 1,3,3,16 } };
const TfArray<1, float> quant173_scale = { 1, { 0.0308799147605896, } };
const TfArray<1, int> quant173_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant173 = { (TfLiteFloatArray*)&quant173_scale, (TfLiteIntArray*)&quant173_zero, 0 };
const TfArray<4, int> tensor_dimension174 = { 4, { 1,3,3,96 } };
const TfArray<1, float> quant174_scale = { 1, { 0.013350911438465118, } };
const TfArray<1, int> quant174_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant174 = { (TfLiteFloatArray*)&quant174_scale, (TfLiteIntArray*)&quant174_zero, 0 };
const TfArray<4, int> tensor_dimension175 = { 4, { 1,3,3,96 } };
const TfArray<1, float> quant175_scale = { 1, { 0.012734104879200459, } };
const TfArray<1, int> quant175_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant175 = { (TfLiteFloatArray*)&quant175_scale, (TfLiteIntArray*)&quant175_zero, 0 };
const TfArray<4, int> tensor_dimension176 = { 4, { 1,3,3,32 } };
const TfArray<1, float> quant176_scale = { 1, { 0.03414950892329216, } };
const TfArray<1, int> quant176_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant176 = { (TfLiteFloatArray*)&quant176_scale, (TfLiteIntArray*)&quant176_zero, 0 };
const TfArray<4, int> tensor_dimension177 = { 4, { 1,3,3,1280 } };
const TfArray<1, float> quant177_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant177_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant177 = { (TfLiteFloatArray*)&quant177_scale, (TfLiteIntArray*)&quant177_zero, 0 };
const TfArray<2, int> tensor_dimension178 = { 2, { 9,8 } };
const TfArray<1, float> quant178_scale = { 1, { 0.034350663423538208, } };
const TfArray<1, int> quant178_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant178 = { (TfLiteFloatArray*)&quant178_scale, (TfLiteIntArray*)&quant178_zero, 0 };
const TfArray<2, int> tensor_dimension179 = { 2, { 1,72 } };
const TfArray<1, float> quant179_scale = { 1, { 0.034350663423538208, } };
const TfArray<1, int> quant179_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant179 = { (TfLiteFloatArray*)&quant179_scale, (TfLiteIntArray*)&quant179_zero, 0 };
const TfArray<2, int> tensor_dimension180 = { 2, { 1,7 } };
const TfArray<1, float> quant180_scale = { 1, { 0.072352014482021332, } };
const TfArray<1, int> quant180_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant180 = { (TfLiteFloatArray*)&quant180_scale, (TfLiteIntArray*)&quant180_zero, 0 };
const TfArray<2, int> tensor_dimension181 = { 2, { 1,7 } };
const TfArray<1, float> quant181_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant181_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant181 = { (TfLiteFloatArray*)&quant181_scale, (TfLiteIntArray*)&quant181_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,110,109 } };
const TfArray<1, int> outputs0 = { 1, { 111 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 111,108,107 } };
const TfArray<1, int> outputs1 = { 1, { 112 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 112,106,105 } };
const TfArray<1, int> outputs2 = { 1, { 113 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 111,113 } };
const TfArray<1, int> outputs3 = { 1, { 114 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 114,104,103 } };
const TfArray<1, int> outputs4 = { 1, { 115 } };
const TfArray<2, int> inputs5 = { 2, { 115,1 } };
const TfArray<1, int> outputs5 = { 1, { 116 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 116,102,101 } };
const TfArray<1, int> outputs6 = { 1, { 117 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 117,100,99 } };
const TfArray<1, int> outputs7 = { 1, { 118 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 118,98,97 } };
const TfArray<1, int> outputs8 = { 1, { 119 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 119,96,95 } };
const TfArray<1, int> outputs9 = { 1, { 120 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 120,94,93 } };
const TfArray<1, int> outputs10 = { 1, { 121 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 118,121 } };
const TfArray<1, int> outputs11 = { 1, { 122 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 122,92,91 } };
const TfArray<1, int> outputs12 = { 1, { 123 } };
const TfArray<2, int> inputs13 = { 2, { 123,1 } };
const TfArray<1, int> outputs13 = { 1, { 124 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 124,90,89 } };
const TfArray<1, int> outputs14 = { 1, { 125 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 125,88,87 } };
const TfArray<1, int> outputs15 = { 1, { 126 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 126,86,85 } };
const TfArray<1, int> outputs16 = { 1, { 127 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 127,84,83 } };
const TfArray<1, int> outputs17 = { 1, { 128 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 128,82,81 } };
const TfArray<1, int> outputs18 = { 1, { 129 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 126,129 } };
const TfArray<1, int> outputs19 = { 1, { 130 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 130,80,79 } };
const TfArray<1, int> outputs20 = { 1, { 131 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 131,78,77 } };
const TfArray<1, int> outputs21 = { 1, { 132 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 132,76,75 } };
const TfArray<1, int> outputs22 = { 1, { 133 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 130,133 } };
const TfArray<1, int> outputs23 = { 1, { 134 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 134,74,73 } };
const TfArray<1, int> outputs24 = { 1, { 135 } };
const TfArray<2, int> inputs25 = { 2, { 135,1 } };
const TfArray<1, int> outputs25 = { 1, { 136 } };
const TfLiteDepthwiseConvParams opdata26 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 136,72,71 } };
const TfArray<1, int> outputs26 = { 1, { 137 } };
const TfLiteConvParams opdata27 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 137,70,69 } };
const TfArray<1, int> outputs27 = { 1, { 138 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 138,68,67 } };
const TfArray<1, int> outputs28 = { 1, { 139 } };
const TfLiteDepthwiseConvParams opdata29 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 139,66,65 } };
const TfArray<1, int> outputs29 = { 1, { 140 } };
const TfLiteConvParams opdata30 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 140,64,63 } };
const TfArray<1, int> outputs30 = { 1, { 141 } };
const TfLiteAddParams opdata31 = { kTfLiteActNone };
const TfArray<2, int> inputs31 = { 2, { 138,141 } };
const TfArray<1, int> outputs31 = { 1, { 142 } };
const TfLiteConvParams opdata32 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs32 = { 3, { 142,62,61 } };
const TfArray<1, int> outputs32 = { 1, { 143 } };
const TfLiteDepthwiseConvParams opdata33 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs33 = { 3, { 143,60,59 } };
const TfArray<1, int> outputs33 = { 1, { 144 } };
const TfLiteConvParams opdata34 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs34 = { 3, { 144,58,57 } };
const TfArray<1, int> outputs34 = { 1, { 145 } };
const TfLiteAddParams opdata35 = { kTfLiteActNone };
const TfArray<2, int> inputs35 = { 2, { 142,145 } };
const TfArray<1, int> outputs35 = { 1, { 146 } };
const TfLiteConvParams opdata36 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs36 = { 3, { 146,56,55 } };
const TfArray<1, int> outputs36 = { 1, { 147 } };
const TfLiteDepthwiseConvParams opdata37 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs37 = { 3, { 147,54,53 } };
const TfArray<1, int> outputs37 = { 1, { 148 } };
const TfLiteConvParams opdata38 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs38 = { 3, { 148,52,51 } };
const TfArray<1, int> outputs38 = { 1, { 149 } };
const TfLiteAddParams opdata39 = { kTfLiteActNone };
const TfArray<2, int> inputs39 = { 2, { 146,149 } };
const TfArray<1, int> outputs39 = { 1, { 150 } };
const TfLiteConvParams opdata40 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs40 = { 3, { 150,50,49 } };
const TfArray<1, int> outputs40 = { 1, { 151 } };
const TfLiteDepthwiseConvParams opdata41 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs41 = { 3, { 151,48,47 } };
const TfArray<1, int> outputs41 = { 1, { 152 } };
const TfLiteConvParams opdata42 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs42 = { 3, { 152,46,45 } };
const TfArray<1, int> outputs42 = { 1, { 153 } };
const TfLiteConvParams opdata43 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs43 = { 3, { 153,44,43 } };
const TfArray<1, int> outputs43 = { 1, { 154 } };
const TfLiteDepthwiseConvParams opdata44 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs44 = { 3, { 154,42,41 } };
const TfArray<1, int> outputs44 = { 1, { 155 } };
const TfLiteConvParams opdata45 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs45 = { 3, { 155,40,39 } };
const TfArray<1, int> outputs45 = { 1, { 156 } };
const TfLiteAddParams opdata46 = { kTfLiteActNone };
const TfArray<2, int> inputs46 = { 2, { 153,156 } };
const TfArray<1, int> outputs46 = { 1, { 157 } };
const TfLiteConvParams opdata47 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs47 = { 3, { 157,38,37 } };
const TfArray<1, int> outputs47 = { 1, { 158 } };
const TfLiteDepthwiseConvParams opdata48 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs48 = { 3, { 158,36,35 } };
const TfArray<1, int> outputs48 = { 1, { 159 } };
const TfLiteConvParams opdata49 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs49 = { 3, { 159,34,33 } };
const TfArray<1, int> outputs49 = { 1, { 160 } };
const TfLiteAddParams opdata50 = { kTfLiteActNone };
const TfArray<2, int> inputs50 = { 2, { 157,160 } };
const TfArray<1, int> outputs50 = { 1, { 161 } };
const TfLiteConvParams opdata51 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs51 = { 3, { 161,32,31 } };
const TfArray<1, int> outputs51 = { 1, { 162 } };
const TfArray<2, int> inputs52 = { 2, { 162,1 } };
const TfArray<1, int> outputs52 = { 1, { 163 } };
const TfLiteDepthwiseConvParams opdata53 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs53 = { 3, { 163,30,29 } };
const TfArray<1, int> outputs53 = { 1, { 164 } };
const TfLiteConvParams opdata54 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs54 = { 3, { 164,28,27 } };
const TfArray<1, int> outputs54 = { 1, { 165 } };
const TfLiteConvParams opdata55 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs55 = { 3, { 165,26,25 } };
const TfArray<1, int> outputs55 = { 1, { 166 } };
const TfLiteDepthwiseConvParams opdata56 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs56 = { 3, { 166,24,23 } };
const TfArray<1, int> outputs56 = { 1, { 167 } };
const TfLiteConvParams opdata57 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs57 = { 3, { 167,22,21 } };
const TfArray<1, int> outputs57 = { 1, { 168 } };
const TfLiteAddParams opdata58 = { kTfLiteActNone };
const TfArray<2, int> inputs58 = { 2, { 165,168 } };
const TfArray<1, int> outputs58 = { 1, { 169 } };
const TfLiteConvParams opdata59 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs59 = { 3, { 169,20,19 } };
const TfArray<1, int> outputs59 = { 1, { 170 } };
const TfLiteDepthwiseConvParams opdata60 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs60 = { 3, { 170,18,17 } };
const TfArray<1, int> outputs60 = { 1, { 171 } };
const TfLiteConvParams opdata61 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs61 = { 3, { 171,16,15 } };
const TfArray<1, int> outputs61 = { 1, { 172 } };
const TfLiteAddParams opdata62 = { kTfLiteActNone };
const TfArray<2, int> inputs62 = { 2, { 169,172 } };
const TfArray<1, int> outputs62 = { 1, { 173 } };
const TfLiteConvParams opdata63 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs63 = { 3, { 173,14,13 } };
const TfArray<1, int> outputs63 = { 1, { 174 } };
const TfLiteDepthwiseConvParams opdata64 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs64 = { 3, { 174,12,11 } };
const TfArray<1, int> outputs64 = { 1, { 175 } };
const TfLiteConvParams opdata65 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs65 = { 3, { 175,10,9 } };
const TfArray<1, int> outputs65 = { 1, { 176 } };
const TfLiteConvParams opdata66 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs66 = { 3, { 176,8,7 } };
const TfArray<1, int> outputs66 = { 1, { 177 } };
const TfLiteFullyConnectedParams opdata67 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs67 = { 3, { 177,6,5 } };
const TfArray<1, int> outputs67 = { 1, { 178 } };
const TfLiteReshapeParams opdata68 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs68 = { 2, { 178,2 } };
const TfArray<1, int> outputs68 = { 1, { 179 } };
const TfLiteFullyConnectedParams opdata69 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs69 = { 3, { 179,4,3 } };
const TfArray<1, int> outputs69 = { 1, { 180 } };
const TfLiteSoftmaxParams opdata70 = { 1 };
const TfArray<1, int> inputs70 = { 1, { 180 } };
const TfArray<1, int> outputs70 = { 1, { 181 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 28, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 10240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 40960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data45, (TfLiteIntArray*)&g0::tensor_dimension45, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data46, (TfLiteIntArray*)&g0::tensor_dimension46, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data47, (TfLiteIntArray*)&g0::tensor_dimension47, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data48, (TfLiteIntArray*)&g0::tensor_dimension48, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data49, (TfLiteIntArray*)&g0::tensor_dimension49, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data50, (TfLiteIntArray*)&g0::tensor_dimension50, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data51, (TfLiteIntArray*)&g0::tensor_dimension51, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data52, (TfLiteIntArray*)&g0::tensor_dimension52, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data53, (TfLiteIntArray*)&g0::tensor_dimension53, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data54, (TfLiteIntArray*)&g0::tensor_dimension54, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data55, (TfLiteIntArray*)&g0::tensor_dimension55, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data56, (TfLiteIntArray*)&g0::tensor_dimension56, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data57, (TfLiteIntArray*)&g0::tensor_dimension57, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data58, (TfLiteIntArray*)&g0::tensor_dimension58, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data59, (TfLiteIntArray*)&g0::tensor_dimension59, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data60, (TfLiteIntArray*)&g0::tensor_dimension60, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data61, (TfLiteIntArray*)&g0::tensor_dimension61, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data62, (TfLiteIntArray*)&g0::tensor_dimension62, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data63, (TfLiteIntArray*)&g0::tensor_dimension63, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data64, (TfLiteIntArray*)&g0::tensor_dimension64, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data65, (TfLiteIntArray*)&g0::tensor_dimension65, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data66, (TfLiteIntArray*)&g0::tensor_dimension66, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data67, (TfLiteIntArray*)&g0::tensor_dimension67, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data68, (TfLiteIntArray*)&g0::tensor_dimension68, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data69, (TfLiteIntArray*)&g0::tensor_dimension69, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data70, (TfLiteIntArray*)&g0::tensor_dimension70, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data71, (TfLiteIntArray*)&g0::tensor_dimension71, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data72, (TfLiteIntArray*)&g0::tensor_dimension72, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant72))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data73, (TfLiteIntArray*)&g0::tensor_dimension73, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant73))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data74, (TfLiteIntArray*)&g0::tensor_dimension74, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant74))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data75, (TfLiteIntArray*)&g0::tensor_dimension75, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant75))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data76, (TfLiteIntArray*)&g0::tensor_dimension76, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant76))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data77, (TfLiteIntArray*)&g0::tensor_dimension77, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant77))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data78, (TfLiteIntArray*)&g0::tensor_dimension78, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant78))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data79, (TfLiteIntArray*)&g0::tensor_dimension79, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant79))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data80, (TfLiteIntArray*)&g0::tensor_dimension80, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant80))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data81, (TfLiteIntArray*)&g0::tensor_dimension81, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant81))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data82, (TfLiteIntArray*)&g0::tensor_dimension82, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant82))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data83, (TfLiteIntArray*)&g0::tensor_dimension83, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant83))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data84, (TfLiteIntArray*)&g0::tensor_dimension84, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant84))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data85, (TfLiteIntArray*)&g0::tensor_dimension85, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant85))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data86, (TfLiteIntArray*)&g0::tensor_dimension86, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant86))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data87, (TfLiteIntArray*)&g0::tensor_dimension87, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant87))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data88, (TfLiteIntArray*)&g0::tensor_dimension88, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant88))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data89, (TfLiteIntArray*)&g0::tensor_dimension89, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant89))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data90, (TfLiteIntArray*)&g0::tensor_dimension90, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant90))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data91, (TfLiteIntArray*)&g0::tensor_dimension91, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant91))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data92, (TfLiteIntArray*)&g0::tensor_dimension92, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant92))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data93, (TfLiteIntArray*)&g0::tensor_dimension93, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant93))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data94, (TfLiteIntArray*)&g0::tensor_dimension94, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant94))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data95, (TfLiteIntArray*)&g0::tensor_dimension95, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant95))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data96, (TfLiteIntArray*)&g0::tensor_dimension96, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant96))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data97, (TfLiteIntArray*)&g0::tensor_dimension97, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant97))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data98, (TfLiteIntArray*)&g0::tensor_dimension98, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant98))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data99, (TfLiteIntArray*)&g0::tensor_dimension99, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant99))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data100, (TfLiteIntArray*)&g0::tensor_dimension100, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant100))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data101, (TfLiteIntArray*)&g0::tensor_dimension101, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant101))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data102, (TfLiteIntArray*)&g0::tensor_dimension102, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant102))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data103, (TfLiteIntArray*)&g0::tensor_dimension103, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant103))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data104, (TfLiteIntArray*)&g0::tensor_dimension104, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant104))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data105, (TfLiteIntArray*)&g0::tensor_dimension105, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant105))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data106, (TfLiteIntArray*)&g0::tensor_dimension106, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant106))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data107, (TfLiteIntArray*)&g0::tensor_dimension107, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant107))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data108, (TfLiteIntArray*)&g0::tensor_dimension108, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant108))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data109, (TfLiteIntArray*)&g0::tensor_dimension109, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant109))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data110, (TfLiteIntArray*)&g0::tensor_dimension110, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant110))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension111, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant111))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension112, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant112))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension113, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant113))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension114, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant114))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension115, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant115))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension116, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant116))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension117, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant117))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension118, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant118))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension119, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant119))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension120, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant120))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension121, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant121))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension122, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant122))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension123, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant123))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension124, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant124))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension125, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant125))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension126, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant126))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension127, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant127))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension128, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant128))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension129, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant129))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension130, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant130))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension131, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant131))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension132, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant132))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension133, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant133))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension134, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant134))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension135, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant135))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension136, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant136))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension137, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant137))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension138, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant138))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension139, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant139))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension140, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant140))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension141, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant141))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension142, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant142))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension143, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant143))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension144, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant144))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension145, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant145))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension146, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant146))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension147, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant147))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension148, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant148))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension149, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant149))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension150, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant150))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension151, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant151))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension152, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant152))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension153, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant153))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension154, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant154))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension155, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant155))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension156, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant156))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8640), (TfLiteIntArray*)&g0::tensor_dimension157, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant157))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension158, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant158))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension159, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant159))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension160, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant160))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension161, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant161))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4704), (TfLiteIntArray*)&g0::tensor_dimension162, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant162))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension163, 4704, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant163))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6432), (TfLiteIntArray*)&g0::tensor_dimension164, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant164))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3600), (TfLiteIntArray*)&g0::tensor_dimension165, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant165))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2592), (TfLiteIntArray*)&g0::tensor_dimension166, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant166))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension167, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant167))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension168, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant168))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension169, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant169))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2592), (TfLiteIntArray*)&g0::tensor_dimension170, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant170))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension171, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant171))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 144), (TfLiteIntArray*)&g0::tensor_dimension172, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant172))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension173, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant173))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2592), (TfLiteIntArray*)&g0::tensor_dimension174, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant174))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension175, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant175))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 11520), (TfLiteIntArray*)&g0::tensor_dimension176, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant176))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension177, 11520, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant177))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 11520), (TfLiteIntArray*)&g0::tensor_dimension178, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant178))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension179, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant179))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80), (TfLiteIntArray*)&g0::tensor_dimension180, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant180))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension181, 7, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant181))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[71] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata31)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs39, (TfLiteIntArray*)&g0::outputs39, (TfLiteIntArray*)&g0::inputs39, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata39)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs40, (TfLiteIntArray*)&g0::outputs40, (TfLiteIntArray*)&g0::inputs40, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata40)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs41, (TfLiteIntArray*)&g0::outputs41, (TfLiteIntArray*)&g0::inputs41, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata41)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs42, (TfLiteIntArray*)&g0::outputs42, (TfLiteIntArray*)&g0::inputs42, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata42)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs43, (TfLiteIntArray*)&g0::outputs43, (TfLiteIntArray*)&g0::inputs43, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata43)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs44, (TfLiteIntArray*)&g0::outputs44, (TfLiteIntArray*)&g0::inputs44, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata44)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs45, (TfLiteIntArray*)&g0::outputs45, (TfLiteIntArray*)&g0::inputs45, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata45)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs46, (TfLiteIntArray*)&g0::outputs46, (TfLiteIntArray*)&g0::inputs46, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata46)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs47, (TfLiteIntArray*)&g0::outputs47, (TfLiteIntArray*)&g0::inputs47, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata47)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs48, (TfLiteIntArray*)&g0::outputs48, (TfLiteIntArray*)&g0::inputs48, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata48)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs49, (TfLiteIntArray*)&g0::outputs49, (TfLiteIntArray*)&g0::inputs49, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata49)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs50, (TfLiteIntArray*)&g0::outputs50, (TfLiteIntArray*)&g0::inputs50, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata50)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs51, (TfLiteIntArray*)&g0::outputs51, (TfLiteIntArray*)&g0::inputs51, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata51)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs52, (TfLiteIntArray*)&g0::outputs52, (TfLiteIntArray*)&g0::inputs52, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs53, (TfLiteIntArray*)&g0::outputs53, (TfLiteIntArray*)&g0::inputs53, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata53)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs54, (TfLiteIntArray*)&g0::outputs54, (TfLiteIntArray*)&g0::inputs54, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata54)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs55, (TfLiteIntArray*)&g0::outputs55, (TfLiteIntArray*)&g0::inputs55, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata55)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs56, (TfLiteIntArray*)&g0::outputs56, (TfLiteIntArray*)&g0::inputs56, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata56)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs57, (TfLiteIntArray*)&g0::outputs57, (TfLiteIntArray*)&g0::inputs57, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata57)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs58, (TfLiteIntArray*)&g0::outputs58, (TfLiteIntArray*)&g0::inputs58, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata58)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs59, (TfLiteIntArray*)&g0::outputs59, (TfLiteIntArray*)&g0::inputs59, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata59)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs60, (TfLiteIntArray*)&g0::outputs60, (TfLiteIntArray*)&g0::inputs60, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata60)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs61, (TfLiteIntArray*)&g0::outputs61, (TfLiteIntArray*)&g0::inputs61, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata61)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs62, (TfLiteIntArray*)&g0::outputs62, (TfLiteIntArray*)&g0::inputs62, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata62)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs63, (TfLiteIntArray*)&g0::outputs63, (TfLiteIntArray*)&g0::inputs63, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata63)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs64, (TfLiteIntArray*)&g0::outputs64, (TfLiteIntArray*)&g0::inputs64, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata64)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs65, (TfLiteIntArray*)&g0::outputs65, (TfLiteIntArray*)&g0::inputs65, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata65)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs66, (TfLiteIntArray*)&g0::outputs66, (TfLiteIntArray*)&g0::inputs66, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata66)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs67, (TfLiteIntArray*)&g0::outputs67, (TfLiteIntArray*)&g0::inputs67, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata67)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs68, (TfLiteIntArray*)&g0::outputs68, (TfLiteIntArray*)&g0::inputs68, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata68)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs69, (TfLiteIntArray*)&g0::outputs69, (TfLiteIntArray*)&g0::inputs69, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata69)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs70, (TfLiteIntArray*)&g0::outputs70, (TfLiteIntArray*)&g0::inputs70, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata70)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[71] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata31)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs39, (TfLiteIntArray*)&g0::outputs39, (TfLiteIntArray*)&g0::inputs39, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata39)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs40, (TfLiteIntArray*)&g0::outputs40, (TfLiteIntArray*)&g0::inputs40, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata40)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs41, (TfLiteIntArray*)&g0::outputs41, (TfLiteIntArray*)&g0::inputs41, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata41)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs42, (TfLiteIntArray*)&g0::outputs42, (TfLiteIntArray*)&g0::inputs42, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata42)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs43, (TfLiteIntArray*)&g0::outputs43, (TfLiteIntArray*)&g0::inputs43, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata43)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs44, (TfLiteIntArray*)&g0::outputs44, (TfLiteIntArray*)&g0::inputs44, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata44)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs45, (TfLiteIntArray*)&g0::outputs45, (TfLiteIntArray*)&g0::inputs45, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata45)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs46, (TfLiteIntArray*)&g0::outputs46, (TfLiteIntArray*)&g0::inputs46, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata46)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs47, (TfLiteIntArray*)&g0::outputs47, (TfLiteIntArray*)&g0::inputs47, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata47)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs48, (TfLiteIntArray*)&g0::outputs48, (TfLiteIntArray*)&g0::inputs48, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata48)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs49, (TfLiteIntArray*)&g0::outputs49, (TfLiteIntArray*)&g0::inputs49, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata49)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs50, (TfLiteIntArray*)&g0::outputs50, (TfLiteIntArray*)&g0::inputs50, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata50)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs51, (TfLiteIntArray*)&g0::outputs51, (TfLiteIntArray*)&g0::inputs51, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata51)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs52, (TfLiteIntArray*)&g0::outputs52, (TfLiteIntArray*)&g0::inputs52, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs53, (TfLiteIntArray*)&g0::outputs53, (TfLiteIntArray*)&g0::inputs53, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata53)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs54, (TfLiteIntArray*)&g0::outputs54, (TfLiteIntArray*)&g0::inputs54, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata54)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs55, (TfLiteIntArray*)&g0::outputs55, (TfLiteIntArray*)&g0::inputs55, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata55)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs56, (TfLiteIntArray*)&g0::outputs56, (TfLiteIntArray*)&g0::inputs56, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata56)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs57, (TfLiteIntArray*)&g0::outputs57, (TfLiteIntArray*)&g0::inputs57, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata57)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs58, (TfLiteIntArray*)&g0::outputs58, (TfLiteIntArray*)&g0::inputs58, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata58)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs59, (TfLiteIntArray*)&g0::outputs59, (TfLiteIntArray*)&g0::inputs59, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata59)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs60, (TfLiteIntArray*)&g0::outputs60, (TfLiteIntArray*)&g0::inputs60, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata60)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs61, (TfLiteIntArray*)&g0::outputs61, (TfLiteIntArray*)&g0::inputs61, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata61)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs62, (TfLiteIntArray*)&g0::outputs62, (TfLiteIntArray*)&g0::inputs62, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata62)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs63, (TfLiteIntArray*)&g0::outputs63, (TfLiteIntArray*)&g0::inputs63, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata63)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs64, (TfLiteIntArray*)&g0::outputs64, (TfLiteIntArray*)&g0::inputs64, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata64)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs65, (TfLiteIntArray*)&g0::outputs65, (TfLiteIntArray*)&g0::inputs65, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata65)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs66, (TfLiteIntArray*)&g0::outputs66, (TfLiteIntArray*)&g0::inputs66, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata66)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs67, (TfLiteIntArray*)&g0::outputs67, (TfLiteIntArray*)&g0::inputs67, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata67)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs68, (TfLiteIntArray*)&g0::outputs68, (TfLiteIntArray*)&g0::inputs68, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata68)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs69, (TfLiteIntArray*)&g0::outputs69, (TfLiteIntArray*)&g0::inputs69, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata69)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs70, (TfLiteIntArray*)&g0::outputs70, (TfLiteIntArray*)&g0::inputs70, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata70)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_FULLY_CONNECTED, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 182, };
const size_t tflNodes_subgraph_index[] = {0, 71, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  181, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_10_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 182;
  for (size_t i = 0; i < 182; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_invoke() {
  for (size_t i = 0; i < 71; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
